
Fan controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  080086d0  080086d0  000186d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b1c  08008b1c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008b1c  08008b1c  00018b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b24  08008b24  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b24  08008b24  00018b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b28  08008b28  00018b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200001e0  08008d0c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08008d0c  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f82  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2d  00000000  00000000  00035192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00037cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  00038f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002505d  00000000  00000000  0003a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159a1  00000000  00000000  0005f14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1803  00000000  00000000  00074aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001562f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006098  00000000  00000000  00156344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080086b4 	.word	0x080086b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080086b4 	.word	0x080086b4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <lcd16x2_i2c_sendCommand>:

#include "lcd16x2_i2c.h"

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	011b      	lsls	r3, r3, #4
 8000eee:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f023 030f 	bic.w	r3, r3, #15
 8000ef6:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000ef8:	7bbb      	ldrb	r3, [r7, #14]
 8000efa:	f043 030c 	orr.w	r3, r3, #12
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	723b      	strb	r3, [r7, #8]
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	727b      	strb	r3, [r7, #9]
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	f043 030c 	orr.w	r3, r3, #12
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	72bb      	strb	r3, [r7, #10]
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	f043 0308 	orr.w	r3, r3, #8
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <lcd16x2_i2c_sendCommand+0x60>)
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <lcd16x2_i2c_sendCommand+0x64>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b299      	uxth	r1, r3
 8000f2a:	f107 0208 	add.w	r2, r7, #8
 8000f2e:	23c8      	movs	r3, #200	; 0xc8
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2304      	movs	r3, #4
 8000f34:	f002 fa10 	bl	8003358 <HAL_I2C_Master_Transmit>
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200001fc 	.word	0x200001fc
 8000f44:	20000200 	.word	0x20000200

08000f48 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f023 030f 	bic.w	r3, r3, #15
 8000f5e:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000f60:	7bbb      	ldrb	r3, [r7, #14]
 8000f62:	f043 030d 	orr.w	r3, r3, #13
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	723b      	strb	r3, [r7, #8]
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	f043 0309 	orr.w	r3, r3, #9
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	727b      	strb	r3, [r7, #9]
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	f043 030d 	orr.w	r3, r3, #13
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	72bb      	strb	r3, [r7, #10]
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	f043 0309 	orr.w	r3, r3, #9
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <lcd16x2_i2c_sendData+0x60>)
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <lcd16x2_i2c_sendData+0x64>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b299      	uxth	r1, r3
 8000f92:	f107 0208 	add.w	r2, r7, #8
 8000f96:	23c8      	movs	r3, #200	; 0xc8
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	f002 f9dc 	bl	8003358 <HAL_I2C_Master_Transmit>
}
 8000fa0:	bf00      	nop
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200001fc 	.word	0x200001fc
 8000fac:	20000200 	.word	0x20000200

08000fb0 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000fb8:	2032      	movs	r0, #50	; 0x32
 8000fba:	f000 ffe7 	bl	8001f8c <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8000fbe:	4a30      	ldr	r2, [pc, #192]	; (8001080 <lcd16x2_i2c_init+0xd0>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000fc4:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <lcd16x2_i2c_init+0xd0>)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fcc:	2205      	movs	r2, #5
 8000fce:	214e      	movs	r1, #78	; 0x4e
 8000fd0:	f002 fac0 	bl	8003554 <HAL_I2C_IsDeviceReady>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d010      	beq.n	8000ffc <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000fda:	4b29      	ldr	r3, [pc, #164]	; (8001080 <lcd16x2_i2c_init+0xd0>)
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fe2:	2205      	movs	r2, #5
 8000fe4:	217e      	movs	r1, #126	; 0x7e
 8000fe6:	f002 fab5 	bl	8003554 <HAL_I2C_IsDeviceReady>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e040      	b.n	8001076 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000ff4:	4b23      	ldr	r3, [pc, #140]	; (8001084 <lcd16x2_i2c_init+0xd4>)
 8000ff6:	227e      	movs	r2, #126	; 0x7e
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	e002      	b.n	8001002 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <lcd16x2_i2c_init+0xd4>)
 8000ffe:	224e      	movs	r2, #78	; 0x4e
 8001000:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8001002:	202d      	movs	r0, #45	; 0x2d
 8001004:	f000 ffc2 	bl	8001f8c <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8001008:	2030      	movs	r0, #48	; 0x30
 800100a:	f7ff ff69 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 800100e:	2005      	movs	r0, #5
 8001010:	f000 ffbc 	bl	8001f8c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8001014:	2030      	movs	r0, #48	; 0x30
 8001016:	f7ff ff63 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f000 ffb6 	bl	8001f8c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8001020:	2030      	movs	r0, #48	; 0x30
 8001022:	f7ff ff5d 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8001026:	2008      	movs	r0, #8
 8001028:	f000 ffb0 	bl	8001f8c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 800102c:	2020      	movs	r0, #32
 800102e:	f7ff ff57 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8001032:	2008      	movs	r0, #8
 8001034:	f000 ffaa 	bl	8001f8c <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001038:	2028      	movs	r0, #40	; 0x28
 800103a:	f7ff ff51 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f000 ffa4 	bl	8001f8c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8001044:	2008      	movs	r0, #8
 8001046:	f7ff ff4b 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f000 ff9e 	bl	8001f8c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8001050:	2001      	movs	r0, #1
 8001052:	f7ff ff45 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8001056:	2003      	movs	r0, #3
 8001058:	f000 ff98 	bl	8001f8c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 800105c:	2006      	movs	r0, #6
 800105e:	f7ff ff3f 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f000 ff92 	bl	8001f8c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8001068:	200c      	movs	r0, #12
 800106a:	f7ff ff39 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800106e:	2003      	movs	r0, #3
 8001070:	f000 ff8c 	bl	8001f8c <HAL_Delay>

  return true;
 8001074:	2301      	movs	r3, #1
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200001fc 	.word	0x200001fc
 8001084:	20000200 	.word	0x20000200

08001088 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d108      	bne.n	80010b8 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ac:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff15 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 80010b6:	e007      	b.n	80010c8 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80010be:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff0c 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <lcd16x2_i2c_1stLine>:

/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_i2c_1stLine(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(0,0);
 80010d4:	2100      	movs	r1, #0
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff ffd6 	bl	8001088 <lcd16x2_i2c_setCursor>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <lcd16x2_i2c_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_i2c_2ndLine(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(1,0);
 80010e4:	2100      	movs	r1, #0
 80010e6:	2001      	movs	r0, #1
 80010e8:	f7ff ffce 	bl	8001088 <lcd16x2_i2c_setCursor>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 80010f0:	b40f      	push	{r0, r1, r2, r3}
 80010f2:	b590      	push	{r4, r7, lr}
 80010f4:	b089      	sub	sp, #36	; 0x24
 80010f6:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80010f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010fc:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001106:	4618      	mov	r0, r3
 8001108:	f005 f8c0 	bl	800628c <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800110c:	2300      	movs	r3, #0
 800110e:	77fb      	strb	r3, [r7, #31]
 8001110:	e00b      	b.n	800112a <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 8001112:	7ffb      	ldrb	r3, [r7, #31]
 8001114:	f107 0220 	add.w	r2, r7, #32
 8001118:	4413      	add	r3, r2
 800111a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff12 	bl	8000f48 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001124:	7ffb      	ldrb	r3, [r7, #31]
 8001126:	3301      	adds	r3, #1
 8001128:	77fb      	strb	r3, [r7, #31]
 800112a:	7ffc      	ldrb	r4, [r7, #31]
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f86d 	bl	8000210 <strlen>
 8001136:	4603      	mov	r3, r0
 8001138:	429c      	cmp	r4, r3
 800113a:	d202      	bcs.n	8001142 <lcd16x2_i2c_printf+0x52>
 800113c:	7ffb      	ldrb	r3, [r7, #31]
 800113e:	2b0f      	cmp	r3, #15
 8001140:	d9e7      	bls.n	8001112 <lcd16x2_i2c_printf+0x22>
  }
}
 8001142:	bf00      	nop
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800114c:	b004      	add	sp, #16
 800114e:	4770      	bx	lr

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001154:	f000 fea8 	bl	8001ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001158:	f000 f86e 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115c:	f000 f9ba 	bl	80014d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001160:	f000 f98e 	bl	8001480 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001164:	f000 f8d6 	bl	8001314 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001168:	f000 f954 	bl	8001414 <MX_TIM6_Init>
  MX_I2C1_Init();
 800116c:	f000 f924 	bl	80013b8 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  TIM4_Init();
 8001170:	f000 fa34 	bl	80015dc <TIM4_Init>
  TIM5_Init();
 8001174:	f000 fa50 	bl	8001618 <TIM5_Init>

  HAL_TIM_Base_Start_IT(&htim6);
 8001178:	4827      	ldr	r0, [pc, #156]	; (8001218 <main+0xc8>)
 800117a:	f003 fadd 	bl	8004738 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800117e:	4827      	ldr	r0, [pc, #156]	; (800121c <main+0xcc>)
 8001180:	f003 fada 	bl	8004738 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001184:	4826      	ldr	r0, [pc, #152]	; (8001220 <main+0xd0>)
 8001186:	f003 fad7 	bl	8004738 <HAL_TIM_Base_Start_IT>

  lcd16x2_i2c_init(&hi2c1);
 800118a:	4826      	ldr	r0, [pc, #152]	; (8001224 <main+0xd4>)
 800118c:	f7ff ff10 	bl	8000fb0 <lcd16x2_i2c_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		temperature_hysteresis = temperature_threshold-2;
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <main+0xd8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3b02      	subs	r3, #2
 8001196:	4a25      	ldr	r2, [pc, #148]	; (800122c <main+0xdc>)
 8001198:	6013      	str	r3, [r2, #0]

	  if(CONV_ADC_TO_TEMPERATURE((int)adc_buff) > temperature_threshold && fan_state == DISABLED){
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <main+0xe0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fa5a 	bl	8001658 <CONV_ADC_TO_TEMPERATURE>
 80011a4:	ec55 4b10 	vmov	r4, r5, d0
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <main+0xd8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9d9 	bl	8000564 <__aeabi_i2d>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4620      	mov	r0, r4
 80011b8:	4629      	mov	r1, r5
 80011ba:	f7ff fccd 	bl	8000b58 <__aeabi_dcmpgt>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d009      	beq.n	80011d8 <main+0x88>
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <main+0xe4>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d105      	bne.n	80011d8 <main+0x88>

		  fan_state = ENABLED;
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <main+0xe4>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
		  START_FAN();
 80011d2:	f000 facf 	bl	8001774 <START_FAN>
 80011d6:	e01d      	b.n	8001214 <main+0xc4>

	  }else if(CONV_ADC_TO_TEMPERATURE((int)adc_buff) <= temperature_hysteresis && fan_state == ENABLED){
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <main+0xe0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fa3b 	bl	8001658 <CONV_ADC_TO_TEMPERATURE>
 80011e2:	ec55 4b10 	vmov	r4, r5, d0
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <main+0xdc>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f9ba 	bl	8000564 <__aeabi_i2d>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4620      	mov	r0, r4
 80011f6:	4629      	mov	r1, r5
 80011f8:	f7ff fc9a 	bl	8000b30 <__aeabi_dcmple>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d008      	beq.n	8001214 <main+0xc4>
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <main+0xe4>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d1c2      	bne.n	8001190 <main+0x40>

		  fan_state = DISABLED;
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <main+0xe4>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
		  STOP_FAN();
 8001210:	f000 fabc 	bl	800178c <STOP_FAN>
		temperature_hysteresis = temperature_threshold-2;
 8001214:	e7bc      	b.n	8001190 <main+0x40>
 8001216:	bf00      	nop
 8001218:	20000390 	.word	0x20000390
 800121c:	200002f8 	.word	0x200002f8
 8001220:	20000214 	.word	0x20000214
 8001224:	20000298 	.word	0x20000298
 8001228:	20000000 	.word	0x20000000
 800122c:	20000210 	.word	0x20000210
 8001230:	200003d8 	.word	0x200003d8
 8001234:	20000201 	.word	0x20000201

08001238 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  * @note System clock is 84MHz
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	; 0x50
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	2234      	movs	r2, #52	; 0x34
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f004 fb78 	bl	800593c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	4b2a      	ldr	r3, [pc, #168]	; (800130c <SystemClock_Config+0xd4>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	4a29      	ldr	r2, [pc, #164]	; (800130c <SystemClock_Config+0xd4>)
 8001266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <SystemClock_Config+0xd4>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001278:	2300      	movs	r3, #0
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <SystemClock_Config+0xd8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001284:	4a22      	ldr	r2, [pc, #136]	; (8001310 <SystemClock_Config+0xd8>)
 8001286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b20      	ldr	r3, [pc, #128]	; (8001310 <SystemClock_Config+0xd8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001298:	2302      	movs	r3, #2
 800129a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129c:	2301      	movs	r3, #1
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a0:	2310      	movs	r3, #16
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a4:	2302      	movs	r3, #2
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a8:	2300      	movs	r3, #0
 80012aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012ac:	2310      	movs	r3, #16
 80012ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012b6:	2304      	movs	r3, #4
 80012b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012ba:	2302      	movs	r3, #2
 80012bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012be:	2302      	movs	r3, #2
 80012c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 ff48 	bl	800415c <HAL_RCC_OscConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012d2:	f000 faf3 	bl	80018bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d6:	230f      	movs	r3, #15
 80012d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012da:	2302      	movs	r3, #2
 80012dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	2102      	movs	r1, #2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 fc66 	bl	8003bc4 <HAL_RCC_ClockConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012fe:	f000 fadd 	bl	80018bc <Error_Handler>
  }
}
 8001302:	bf00      	nop
 8001304:	3750      	adds	r7, #80	; 0x50
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40007000 	.word	0x40007000

08001314 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800131a:	463b      	mov	r3, r7
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_ADC1_Init+0x98>)
 8001328:	4a21      	ldr	r2, [pc, #132]	; (80013b0 <MX_ADC1_Init+0x9c>)
 800132a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800132c:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <MX_ADC1_Init+0x98>)
 800132e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001332:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_ADC1_Init+0x98>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_ADC1_Init+0x98>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_ADC1_Init+0x98>)
 8001342:	2200      	movs	r2, #0
 8001344:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_ADC1_Init+0x98>)
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_ADC1_Init+0x98>)
 8001350:	2200      	movs	r2, #0
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_ADC1_Init+0x98>)
 8001356:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <MX_ADC1_Init+0xa0>)
 8001358:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_ADC1_Init+0x98>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_ADC1_Init+0x98>)
 8001362:	2201      	movs	r2, #1
 8001364:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_ADC1_Init+0x98>)
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_ADC1_Init+0x98>)
 8001370:	2201      	movs	r2, #1
 8001372:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001374:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_ADC1_Init+0x98>)
 8001376:	f000 fe2d 	bl	8001fd4 <HAL_ADC_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001380:	f000 fa9c 	bl	80018bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001384:	2300      	movs	r3, #0
 8001386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_ADC1_Init+0x98>)
 8001396:	f001 f8df 	bl	8002558 <HAL_ADC_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013a0:	f000 fa8c 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000348 	.word	0x20000348
 80013b0:	40012000 	.word	0x40012000
 80013b4:	0f000001 	.word	0x0f000001

080013b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <MX_I2C1_Init+0x50>)
 80013be:	4a13      	ldr	r2, [pc, #76]	; (800140c <MX_I2C1_Init+0x54>)
 80013c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_I2C1_Init+0x50>)
 80013c4:	4a12      	ldr	r2, [pc, #72]	; (8001410 <MX_I2C1_Init+0x58>)
 80013c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <MX_I2C1_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_I2C1_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_I2C1_Init+0x50>)
 80013d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <MX_I2C1_Init+0x50>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_I2C1_Init+0x50>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <MX_I2C1_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_I2C1_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f4:	4804      	ldr	r0, [pc, #16]	; (8001408 <MX_I2C1_Init+0x50>)
 80013f6:	f001 fe6b 	bl	80030d0 <HAL_I2C_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001400:	f000 fa5c 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000298 	.word	0x20000298
 800140c:	40005400 	.word	0x40005400
 8001410:	000186a0 	.word	0x000186a0

08001414 <MX_TIM6_Init>:
  * @param None
  * @retval None
  * @note causes interrupt every 10ms
  */
static void MX_TIM6_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141a:	463b      	mov	r3, r7
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_TIM6_Init+0x60>)
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <MX_TIM6_Init+0x64>)
 8001426:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <MX_TIM6_Init+0x60>)
 800142a:	2200      	movs	r2, #0
 800142c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_TIM6_Init+0x60>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 840000;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_TIM6_Init+0x60>)
 8001436:	4a11      	ldr	r2, [pc, #68]	; (800147c <MX_TIM6_Init+0x68>)
 8001438:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_TIM6_Init+0x60>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001440:	480c      	ldr	r0, [pc, #48]	; (8001474 <MX_TIM6_Init+0x60>)
 8001442:	f003 f929 	bl	8004698 <HAL_TIM_Base_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 800144c:	f000 fa36 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001458:	463b      	mov	r3, r7
 800145a:	4619      	mov	r1, r3
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_TIM6_Init+0x60>)
 800145e:	f003 fbab 	bl	8004bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001468:	f000 fa28 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000390 	.word	0x20000390
 8001478:	40001000 	.word	0x40001000
 800147c:	000cd140 	.word	0x000cd140

08001480 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <MX_USART2_UART_Init+0x50>)
 8001488:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 800148c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001490:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014b8:	f003 fc0e 	bl	8004cd8 <HAL_UART_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014c2:	f000 f9fb 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200003dc 	.word	0x200003dc
 80014d0:	40004400 	.word	0x40004400

080014d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b37      	ldr	r3, [pc, #220]	; (80015cc <MX_GPIO_Init+0xf8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a36      	ldr	r2, [pc, #216]	; (80015cc <MX_GPIO_Init+0xf8>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b34      	ldr	r3, [pc, #208]	; (80015cc <MX_GPIO_Init+0xf8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b30      	ldr	r3, [pc, #192]	; (80015cc <MX_GPIO_Init+0xf8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a2f      	ldr	r2, [pc, #188]	; (80015cc <MX_GPIO_Init+0xf8>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <MX_GPIO_Init+0xf8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2120      	movs	r1, #32
 8001526:	482a      	ldr	r0, [pc, #168]	; (80015d0 <MX_GPIO_Init+0xfc>)
 8001528:	f001 fd86 	bl	8003038 <HAL_GPIO_WritePin>

  /*Configure GPIO Pin : PA10 (fan Enable/Disable Pin)*/
   GPIO_InitStruct.Pin = GPIO_PIN_10;
 800152c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001530:	60fb      	str	r3, [r7, #12]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	4619      	mov	r1, r3
 8001540:	4823      	ldr	r0, [pc, #140]	; (80015d0 <MX_GPIO_Init+0xfc>)
 8001542:	f001 fbe5 	bl	8002d10 <HAL_GPIO_Init>

   /*Configure GPIO Pin : PB5 (Increasing threshold temperature)*/
   GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001546:	2320      	movs	r3, #32
 8001548:	60fb      	str	r3, [r7, #12]
   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <MX_GPIO_Init+0x100>)
 800154c:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154e:	2301      	movs	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	4619      	mov	r1, r3
 800155c:	481e      	ldr	r0, [pc, #120]	; (80015d8 <MX_GPIO_Init+0x104>)
 800155e:	f001 fbd7 	bl	8002d10 <HAL_GPIO_Init>
   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001562:	2017      	movs	r0, #23
 8001564:	f001 fb27 	bl	8002bb6 <HAL_NVIC_EnableIRQ>
   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 14, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	210e      	movs	r1, #14
 800156c:	2017      	movs	r0, #23
 800156e:	f001 fb06 	bl	8002b7e <HAL_NVIC_SetPriority>

   /*Configure GPIO Pin : PB4 (Decreasing threshold temperature)*/
   GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001572:	2310      	movs	r3, #16
 8001574:	60fb      	str	r3, [r7, #12]
   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <MX_GPIO_Init+0x100>)
 8001578:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157a:	2301      	movs	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	4619      	mov	r1, r3
 8001588:	4813      	ldr	r0, [pc, #76]	; (80015d8 <MX_GPIO_Init+0x104>)
 800158a:	f001 fbc1 	bl	8002d10 <HAL_GPIO_Init>
   HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800158e:	200a      	movs	r0, #10
 8001590:	f001 fb11 	bl	8002bb6 <HAL_NVIC_EnableIRQ>
   HAL_NVIC_SetPriority(EXTI4_IRQn, 14, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	210e      	movs	r1, #14
 8001598:	200a      	movs	r0, #10
 800159a:	f001 faf0 	bl	8002b7e <HAL_NVIC_SetPriority>

    /*Configure GPIO pin : LD2_Pin (GPIOA 5) */
   GPIO_InitStruct.Pin = LD2_Pin;
 800159e:	2320      	movs	r3, #32
 80015a0:	60fb      	str	r3, [r7, #12]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	4619      	mov	r1, r3
 80015b4:	4806      	ldr	r0, [pc, #24]	; (80015d0 <MX_GPIO_Init+0xfc>)
 80015b6:	f001 fbab 	bl	8002d10 <HAL_GPIO_Init>
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2120      	movs	r1, #32
 80015be:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_GPIO_Init+0xfc>)
 80015c0:	f001 fd3a 	bl	8003038 <HAL_GPIO_WritePin>

}
 80015c4:	bf00      	nop
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	10210000 	.word	0x10210000
 80015d8:	40020400 	.word	0x40020400

080015dc <TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  * @note causes interrupt every 500ms
  */
void TIM4_Init(void){
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0


	htim4.Instance = TIM4;
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <TIM4_Init+0x34>)
 80015e2:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <TIM4_Init+0x38>)
 80015e4:	601a      	str	r2, [r3, #0]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <TIM4_Init+0x34>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
	htim4.Init.Prescaler = 4999;
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <TIM4_Init+0x34>)
 80015ee:	f241 3287 	movw	r2, #4999	; 0x1387
 80015f2:	605a      	str	r2, [r3, #4]
	htim4.Init.Period = 8400;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <TIM4_Init+0x34>)
 80015f6:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80015fa:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&htim4) != HAL_OK){
 80015fc:	4804      	ldr	r0, [pc, #16]	; (8001610 <TIM4_Init+0x34>)
 80015fe:	f003 f84b 	bl	8004698 <HAL_TIM_Base_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <TIM4_Init+0x30>
		Error_Handler();
 8001608:	f000 f958 	bl	80018bc <Error_Handler>
	}

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000214 	.word	0x20000214
 8001614:	40000800 	.word	0x40000800

08001618 <TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  * @note causes interrupt every 3s
  */
void TIM5_Init(void){
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0


	htim5.Instance = TIM5;
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <TIM5_Init+0x34>)
 800161e:	4a0c      	ldr	r2, [pc, #48]	; (8001650 <TIM5_Init+0x38>)
 8001620:	601a      	str	r2, [r3, #0]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <TIM5_Init+0x34>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
	htim5.Init.Prescaler = 4999;
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <TIM5_Init+0x34>)
 800162a:	f241 3287 	movw	r2, #4999	; 0x1387
 800162e:	605a      	str	r2, [r3, #4]
	htim5.Init.Period = 50400;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <TIM5_Init+0x34>)
 8001632:	f24c 42e0 	movw	r2, #50400	; 0xc4e0
 8001636:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&htim5) != HAL_OK){
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <TIM5_Init+0x34>)
 800163a:	f003 f82d 	bl	8004698 <HAL_TIM_Base_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <TIM5_Init+0x30>
		Error_Handler();
 8001644:	f000 f93a 	bl	80018bc <Error_Handler>
	}

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200002f8 	.word	0x200002f8
 8001650:	40000c00 	.word	0x40000c00
 8001654:	00000000 	.word	0x00000000

08001658 <CONV_ADC_TO_TEMPERATURE>:
 *
 * @Note              -  LM35DZ sensor has proportional voltage rise to temperature
 * 						 It is rising 1mV for every Celsius degree. 3,3V is refference voltage

 */
double CONV_ADC_TO_TEMPERATURE(int adc_read_value){
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

	voltage = (ADC_REFERENCE_VOLTAGE*adc_read_value)/ADC_RESOLUTION;
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7fe ff7f 	bl	8000564 <__aeabi_i2d>
 8001666:	a31b      	add	r3, pc, #108	; (adr r3, 80016d4 <CONV_ADC_TO_TEMPERATURE+0x7c>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7fe ffe4 	bl	8000638 <__aeabi_dmul>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <CONV_ADC_TO_TEMPERATURE+0x70>)
 800167e:	f7ff f905 	bl	800088c <__aeabi_ddiv>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4911      	ldr	r1, [pc, #68]	; (80016cc <CONV_ADC_TO_TEMPERATURE+0x74>)
 8001688:	e9c1 2300 	strd	r2, r3, [r1]
	temperature = voltage/VOLTAGE_RISE;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <CONV_ADC_TO_TEMPERATURE+0x74>)
 800168e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001692:	a30b      	add	r3, pc, #44	; (adr r3, 80016c0 <CONV_ADC_TO_TEMPERATURE+0x68>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7ff f8f8 	bl	800088c <__aeabi_ddiv>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	490b      	ldr	r1, [pc, #44]	; (80016d0 <CONV_ADC_TO_TEMPERATURE+0x78>)
 80016a2:	e9c1 2300 	strd	r2, r3, [r1]
	return temperature;
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <CONV_ADC_TO_TEMPERATURE+0x78>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	ec43 2b17 	vmov	d7, r2, r3
}
 80016b0:	eeb0 0a47 	vmov.f32	s0, s14
 80016b4:	eef0 0a67 	vmov.f32	s1, s15
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	47ae147b 	.word	0x47ae147b
 80016c4:	3f847ae1 	.word	0x3f847ae1
 80016c8:	40b00000 	.word	0x40b00000
 80016cc:	20000340 	.word	0x20000340
 80016d0:	200002f0 	.word	0x200002f0
 80016d4:	66666666 	.word	0x66666666
 80016d8:	400a6666 	.word	0x400a6666

080016dc <LCD_REFRESH>:
 * @return            -  none
 *
 * @Note              -

 */
void LCD_REFRESH(void){
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0

			lcd16x2_i2c_1stLine();
 80016e0:	f7ff fcf6 	bl	80010d0 <lcd16x2_i2c_1stLine>
		  	lcd16x2_i2c_printf("Temper. value:");
 80016e4:	481b      	ldr	r0, [pc, #108]	; (8001754 <LCD_REFRESH+0x78>)
 80016e6:	f7ff fd03 	bl	80010f0 <lcd16x2_i2c_printf>
		  	lcd16x2_i2c_2ndLine();
 80016ea:	f7ff fcf9 	bl	80010e0 <lcd16x2_i2c_2ndLine>
		  	lcd16x2_i2c_printf("%.2f", CONV_ADC_TO_TEMPERATURE((int)adc_buff));
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <LCD_REFRESH+0x7c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ffb0 	bl	8001658 <CONV_ADC_TO_TEMPERATURE>
 80016f8:	eeb0 7a40 	vmov.f32	s14, s0
 80016fc:	eef0 7a60 	vmov.f32	s15, s1
 8001700:	eeb0 0a47 	vmov.f32	s0, s14
 8001704:	eef0 0a67 	vmov.f32	s1, s15
 8001708:	4814      	ldr	r0, [pc, #80]	; (800175c <LCD_REFRESH+0x80>)
 800170a:	f7ff fcf1 	bl	80010f0 <lcd16x2_i2c_printf>
		  	lcd16x2_i2c_setCursor(1, 14);
 800170e:	210e      	movs	r1, #14
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff fcb9 	bl	8001088 <lcd16x2_i2c_setCursor>
		  	lcd16x2_i2c_printf("%d", temperature_threshold);
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <LCD_REFRESH+0x84>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4619      	mov	r1, r3
 800171c:	4811      	ldr	r0, [pc, #68]	; (8001764 <LCD_REFRESH+0x88>)
 800171e:	f7ff fce7 	bl	80010f0 <lcd16x2_i2c_printf>

 	if(fan_state == ENABLED){
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <LCD_REFRESH+0x8c>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d107      	bne.n	800173a <LCD_REFRESH+0x5e>

	  		lcd16x2_i2c_setCursor(1, 8);
 800172a:	2108      	movs	r1, #8
 800172c:	2001      	movs	r0, #1
 800172e:	f7ff fcab 	bl	8001088 <lcd16x2_i2c_setCursor>
		  	lcd16x2_i2c_printf("Fan: EN");
 8001732:	480e      	ldr	r0, [pc, #56]	; (800176c <LCD_REFRESH+0x90>)
 8001734:	f7ff fcdc 	bl	80010f0 <lcd16x2_i2c_printf>
	  	}else if(fan_state == DISABLED){

	  		lcd16x2_i2c_setCursor(1, 8);
	  		lcd16x2_i2c_printf("Fan: DI");
	  	}
}
 8001738:	e00a      	b.n	8001750 <LCD_REFRESH+0x74>
	  	}else if(fan_state == DISABLED){
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <LCD_REFRESH+0x8c>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <LCD_REFRESH+0x74>
	  		lcd16x2_i2c_setCursor(1, 8);
 8001742:	2108      	movs	r1, #8
 8001744:	2001      	movs	r0, #1
 8001746:	f7ff fc9f 	bl	8001088 <lcd16x2_i2c_setCursor>
	  		lcd16x2_i2c_printf("Fan: DI");
 800174a:	4809      	ldr	r0, [pc, #36]	; (8001770 <LCD_REFRESH+0x94>)
 800174c:	f7ff fcd0 	bl	80010f0 <lcd16x2_i2c_printf>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	080086d0 	.word	0x080086d0
 8001758:	200003d8 	.word	0x200003d8
 800175c:	080086e0 	.word	0x080086e0
 8001760:	20000000 	.word	0x20000000
 8001764:	080086e8 	.word	0x080086e8
 8001768:	20000201 	.word	0x20000201
 800176c:	080086ec 	.word	0x080086ec
 8001770:	080086f4 	.word	0x080086f4

08001774 <START_FAN>:
 * @return            -  none
 *
 * @Note              -

 */
void START_FAN(void){
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800177e:	4802      	ldr	r0, [pc, #8]	; (8001788 <START_FAN+0x14>)
 8001780:	f001 fc5a 	bl	8003038 <HAL_GPIO_WritePin>
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40020000 	.word	0x40020000

0800178c <STOP_FAN>:
 * @return            -  none
 *
 * @Note              -

 */
void STOP_FAN(void){
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001796:	4802      	ldr	r0, [pc, #8]	; (80017a0 <STOP_FAN+0x14>)
 8001798:	f001 fc4e 	bl	8003038 <HAL_GPIO_WritePin>
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40020000 	.word	0x40020000

080017a4 <HAL_TIM_PeriodElapsedCallback>:
 *
 * @Note              -	Interrupt from TIM6 enables ADC1 to get voltage drop measurment from temperature sensor
 * 					  - Interrupt from TIM5 sends data to HC-05 module via UART2
					  - Interrupt from TIM4 refresh LCD
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6){
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a18      	ldr	r2, [pc, #96]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d103      	bne.n	80017be <HAL_TIM_PeriodElapsedCallback+0x1a>

		HAL_ADC_Start_IT(&hadc1);
 80017b6:	4818      	ldr	r0, [pc, #96]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017b8:	f000 fc50 	bl	800205c <HAL_ADC_Start_IT>
 80017bc:	e01f      	b.n	80017fe <HAL_TIM_PeriodElapsedCallback+0x5a>

	}else if(htim->Instance == TIM5){
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a16      	ldr	r2, [pc, #88]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d11a      	bne.n	80017fe <HAL_TIM_PeriodElapsedCallback+0x5a>

		sprintf(adc_value_msg,"Temp: %.2f stop. Fan state: %d \n \r", CONV_ADC_TO_TEMPERATURE((int)adc_buff), fan_state );
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff43 	bl	8001658 <CONV_ADC_TO_TEMPERATURE>
 80017d2:	ec51 0b10 	vmov	r0, r1, d0
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4911      	ldr	r1, [pc, #68]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017e2:	4812      	ldr	r0, [pc, #72]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80017e4:	f004 fd1c 	bl	8006220 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)adc_value_msg, strlen(adc_value_msg), HAL_MAX_DELAY);
 80017e8:	4810      	ldr	r0, [pc, #64]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80017ea:	f7fe fd11 	bl	8000210 <strlen>
 80017ee:	4603      	mov	r3, r0
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	490d      	ldr	r1, [pc, #52]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80017f8:	480d      	ldr	r0, [pc, #52]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80017fa:	f003 faba 	bl	8004d72 <HAL_UART_Transmit>

	} if(htim->Instance == TIM4){
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d101      	bne.n	800180c <HAL_TIM_PeriodElapsedCallback+0x68>

		LCD_REFRESH();
 8001808:	f7ff ff68 	bl	80016dc <LCD_REFRESH>

	}
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40001000 	.word	0x40001000
 8001818:	20000348 	.word	0x20000348
 800181c:	40000c00 	.word	0x40000c00
 8001820:	200003d8 	.word	0x200003d8
 8001824:	20000201 	.word	0x20000201
 8001828:	080086fc 	.word	0x080086fc
 800182c:	2000025c 	.word	0x2000025c
 8001830:	200003dc 	.word	0x200003dc
 8001834:	40000800 	.word	0x40000800

08001838 <HAL_ADC_ConvCpltCallback>:
 * @return            - none
 *
 * @Note              -	Interrupt from ADC1 enables ADC to get one voltage drop measurment from temperature sensor, then stops ADC
 *
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	adc_buff = HAL_ADC_GetValue(&hadc1);
 8001840:	4808      	ldr	r0, [pc, #32]	; (8001864 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001842:	f000 fe67 	bl	8002514 <HAL_ADC_GetValue>
 8001846:	4603      	mov	r3, r0
 8001848:	4a07      	ldr	r2, [pc, #28]	; (8001868 <HAL_ADC_ConvCpltCallback+0x30>)
 800184a:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800184c:	2120      	movs	r1, #32
 800184e:	4807      	ldr	r0, [pc, #28]	; (800186c <HAL_ADC_ConvCpltCallback+0x34>)
 8001850:	f001 fc0b 	bl	800306a <HAL_GPIO_TogglePin>
	HAL_ADC_Stop_IT(&hadc1);
 8001854:	4803      	ldr	r0, [pc, #12]	; (8001864 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001856:	f000 fcdf 	bl	8002218 <HAL_ADC_Stop_IT>

}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000348 	.word	0x20000348
 8001868:	200003d8 	.word	0x200003d8
 800186c:	40020000 	.word	0x40020000

08001870 <HAL_GPIO_EXTI_Callback>:
 * @return            - none
 *
 * @Note              -	Interrupt from GPIOB 4 will increase temperature threshold by 1
 * 					  - Interrupt from GPIOB 6 will decrease temperature threshold by 1
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_4){
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	2b10      	cmp	r3, #16
 800187e:	d109      	bne.n	8001894 <HAL_GPIO_EXTI_Callback+0x24>

		if(temperature_threshold < MAX_THRESHOLD_TEMPERATURE){
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x48>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b20      	cmp	r3, #32
 8001886:	dc11      	bgt.n	80018ac <HAL_GPIO_EXTI_Callback+0x3c>
		temperature_threshold++;
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x48>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	3301      	adds	r3, #1
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x48>)
 8001890:	6013      	str	r3, [r2, #0]
	}else if(GPIO_Pin == GPIO_PIN_5){
		if(temperature_threshold > MIN_THRESHOLD_TEMPERATURE){
		temperature_threshold--;
		}
	}
}
 8001892:	e00b      	b.n	80018ac <HAL_GPIO_EXTI_Callback+0x3c>
	}else if(GPIO_Pin == GPIO_PIN_5){
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	2b20      	cmp	r3, #32
 8001898:	d108      	bne.n	80018ac <HAL_GPIO_EXTI_Callback+0x3c>
		if(temperature_threshold > MIN_THRESHOLD_TEMPERATURE){
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x48>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b13      	cmp	r3, #19
 80018a0:	dd04      	ble.n	80018ac <HAL_GPIO_EXTI_Callback+0x3c>
		temperature_threshold--;
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x48>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	4a03      	ldr	r2, [pc, #12]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x48>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	20000000 	.word	0x20000000

080018bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <Error_Handler+0x8>
	...

080018c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <HAL_MspInit+0x4c>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <HAL_MspInit+0x4c>)
 80018d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <HAL_MspInit+0x4c>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_MspInit+0x4c>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a08      	ldr	r2, [pc, #32]	; (8001914 <HAL_MspInit+0x4c>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_MspInit+0x4c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001906:	2007      	movs	r0, #7
 8001908:	f001 f92e 	bl	8002b68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800

08001918 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a1b      	ldr	r2, [pc, #108]	; (80019a4 <HAL_ADC_MspInit+0x8c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d12f      	bne.n	800199a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <HAL_ADC_MspInit+0x90>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <HAL_ADC_MspInit+0x90>)
 8001944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_ADC_MspInit+0x90>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <HAL_ADC_MspInit+0x90>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <HAL_ADC_MspInit+0x90>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_ADC_MspInit+0x90>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001972:	2303      	movs	r3, #3
 8001974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001976:	2303      	movs	r3, #3
 8001978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4809      	ldr	r0, [pc, #36]	; (80019ac <HAL_ADC_MspInit+0x94>)
 8001986:	f001 f9c3 	bl	8002d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800198a:	2012      	movs	r0, #18
 800198c:	f001 f913 	bl	8002bb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	2012      	movs	r0, #18
 8001996:	f001 f8f2 	bl	8002b7e <HAL_NVIC_SetPriority>
  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40012000 	.word	0x40012000
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000

080019b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <HAL_I2C_MspInit+0x84>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d12b      	bne.n	8001a2a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <HAL_I2C_MspInit+0x88>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <HAL_I2C_MspInit+0x88>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_I2C_MspInit+0x88>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ee:	23c0      	movs	r3, #192	; 0xc0
 80019f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f2:	2312      	movs	r3, #18
 80019f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019fe:	2304      	movs	r3, #4
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <HAL_I2C_MspInit+0x8c>)
 8001a0a:	f001 f981 	bl	8002d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_I2C_MspInit+0x88>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <HAL_I2C_MspInit+0x88>)
 8001a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_I2C_MspInit+0x88>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3728      	adds	r7, #40	; 0x28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40005400 	.word	0x40005400
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020400 	.word	0x40020400

08001a40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a29      	ldr	r2, [pc, #164]	; (8001af4 <HAL_TIM_Base_MspInit+0xb4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d115      	bne.n	8001a7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <HAL_TIM_Base_MspInit+0xb8>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a27      	ldr	r2, [pc, #156]	; (8001af8 <HAL_TIM_Base_MspInit+0xb8>)
 8001a5c:	f043 0310 	orr.w	r3, r3, #16
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <HAL_TIM_Base_MspInit+0xb8>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2100      	movs	r1, #0
 8001a72:	2036      	movs	r0, #54	; 0x36
 8001a74:	f001 f883 	bl	8002b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a78:	2036      	movs	r0, #54	; 0x36
 8001a7a:	f001 f89c 	bl	8002bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

  if(htim_base->Instance==TIM5)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a1e      	ldr	r2, [pc, #120]	; (8001afc <HAL_TIM_Base_MspInit+0xbc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d115      	bne.n	8001ab4 <HAL_TIM_Base_MspInit+0x74>
    {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_TIM5_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <HAL_TIM_Base_MspInit+0xb8>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	4a19      	ldr	r2, [pc, #100]	; (8001af8 <HAL_TIM_Base_MspInit+0xb8>)
 8001a92:	f043 0308 	orr.w	r3, r3, #8
 8001a96:	6413      	str	r3, [r2, #64]	; 0x40
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_TIM_Base_MspInit+0xb8>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	693b      	ldr	r3, [r7, #16]
      /* TIM6 interrupt Init */
      HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	2032      	movs	r0, #50	; 0x32
 8001aaa:	f001 f868 	bl	8002b7e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001aae:	2032      	movs	r0, #50	; 0x32
 8001ab0:	f001 f881 	bl	8002bb6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
    }

  if(htim_base->Instance==TIM4)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <HAL_TIM_Base_MspInit+0xc0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d115      	bne.n	8001aea <HAL_TIM_Base_MspInit+0xaa>
    {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_TIM4_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_TIM_Base_MspInit+0xb8>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <HAL_TIM_Base_MspInit+0xb8>)
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_TIM_Base_MspInit+0xb8>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
      /* TIM6 interrupt Init */
      HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2101      	movs	r1, #1
 8001ade:	201e      	movs	r0, #30
 8001ae0:	f001 f84d 	bl	8002b7e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ae4:	201e      	movs	r0, #30
 8001ae6:	f001 f866 	bl	8002bb6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
    }

}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40001000 	.word	0x40001000
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40000c00 	.word	0x40000c00
 8001b00:	40000800 	.word	0x40000800

08001b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <HAL_UART_MspInit+0x94>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d133      	bne.n	8001b8e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <HAL_UART_MspInit+0x98>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a1b      	ldr	r2, [pc, #108]	; (8001b9c <HAL_UART_MspInit+0x98>)
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_UART_MspInit+0x98>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_UART_MspInit+0x98>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <HAL_UART_MspInit+0x98>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_UART_MspInit+0x98>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b5e:	230c      	movs	r3, #12
 8001b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b6e:	2307      	movs	r3, #7
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <HAL_UART_MspInit+0x9c>)
 8001b7a:	f001 f8c9 	bl	8002d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b7e:	2026      	movs	r0, #38	; 0x26
 8001b80:	f001 f819 	bl	8002bb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	210f      	movs	r1, #15
 8001b88:	2026      	movs	r0, #38	; 0x26
 8001b8a:	f000 fff8 	bl	8002b7e <HAL_NVIC_SetPriority>
  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	; 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40004400 	.word	0x40004400
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <NMI_Handler+0x4>

08001baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <HardFault_Handler+0x4>

08001bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <MemManage_Handler+0x4>

08001bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <BusFault_Handler+0x4>

08001bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <UsageFault_Handler+0x4>

08001bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf0:	f000 f9ac 	bl	8001f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(systick_cnt < 10000){
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <SysTick_Handler+0x24>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d805      	bhi.n	8001c0c <SysTick_Handler+0x20>
  systick_cnt++;
 8001c00:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <SysTick_Handler+0x24>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	3301      	adds	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	4b01      	ldr	r3, [pc, #4]	; (8001c10 <SysTick_Handler+0x24>)
 8001c0a:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000202 	.word	0x20000202

08001c14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <TIM6_DAC_IRQHandler+0x10>)
 8001c1a:	f002 fdfd 	bl	8004818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000390 	.word	0x20000390

08001c28 <ADC_IRQHandler>:



/* USER CODE BEGIN 1 */
void ADC_IRQHandler(void){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	HAL_ADC_IRQHandler(&hadc1);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <ADC_IRQHandler+0x10>)
 8001c2e:	f000 fb30 	bl	8002292 <HAL_ADC_IRQHandler>
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000348 	.word	0x20000348

08001c3c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <USART2_IRQHandler+0x10>)
 8001c42:	f003 f929 	bl	8004e98 <HAL_UART_IRQHandler>
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200003dc 	.word	0x200003dc

08001c50 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001c54:	2010      	movs	r0, #16
 8001c56:	f001 fa23 	bl	80030a0 <HAL_GPIO_EXTI_IRQHandler>
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001c62:	2020      	movs	r0, #32
 8001c64:	f001 fa1c 	bl	80030a0 <HAL_GPIO_EXTI_IRQHandler>
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c74:	f001 fa14 	bl	80030a0 <HAL_GPIO_EXTI_IRQHandler>
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim4);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <TIM4_IRQHandler+0x10>)
 8001c82:	f002 fdc9 	bl	8004818 <HAL_TIM_IRQHandler>
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000214 	.word	0x20000214

08001c90 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim5);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <TIM5_IRQHandler+0x10>)
 8001c96:	f002 fdbf 	bl	8004818 <HAL_TIM_IRQHandler>
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200002f8 	.word	0x200002f8

08001ca4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
	return 1;
 8001ca8:	2301      	movs	r3, #1
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <_kill>:

int _kill(int pid, int sig)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cbe:	f003 fe13 	bl	80058e8 <__errno>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2216      	movs	r2, #22
 8001cc6:	601a      	str	r2, [r3, #0]
	return -1;
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <_exit>:

void _exit (int status)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ffe7 	bl	8001cb4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ce6:	e7fe      	b.n	8001ce6 <_exit+0x12>

08001ce8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	e00a      	b.n	8001d10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cfa:	f3af 8000 	nop.w
 8001cfe:	4601      	mov	r1, r0
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	60ba      	str	r2, [r7, #8]
 8001d06:	b2ca      	uxtb	r2, r1
 8001d08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	dbf0      	blt.n	8001cfa <_read+0x12>
	}

return len;
 8001d18:	687b      	ldr	r3, [r7, #4]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	e009      	b.n	8001d48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	60ba      	str	r2, [r7, #8]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3301      	adds	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	dbf1      	blt.n	8001d34 <_write+0x12>
	}
	return len;
 8001d50:	687b      	ldr	r3, [r7, #4]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <_close>:

int _close(int file)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
	return -1;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d82:	605a      	str	r2, [r3, #4]
	return 0;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <_isatty>:

int _isatty(int file)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
	return 1;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
	return 0;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dcc:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <_sbrk+0x5c>)
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <_sbrk+0x60>)
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <_sbrk+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <_sbrk+0x64>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <_sbrk+0x68>)
 8001de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d207      	bcs.n	8001e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df4:	f003 fd78 	bl	80058e8 <__errno>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001e02:	e009      	b.n	8001e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <_sbrk+0x64>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <_sbrk+0x64>)
 8001e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e16:	68fb      	ldr	r3, [r7, #12]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20020000 	.word	0x20020000
 8001e24:	00000400 	.word	0x00000400
 8001e28:	20000204 	.word	0x20000204
 8001e2c:	20000438 	.word	0x20000438

08001e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <SystemInit+0x20>)
 8001e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3a:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <SystemInit+0x20>)
 8001e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e58:	480d      	ldr	r0, [pc, #52]	; (8001e90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e5a:	490e      	ldr	r1, [pc, #56]	; (8001e94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e5c:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e60:	e002      	b.n	8001e68 <LoopCopyDataInit>

08001e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e66:	3304      	adds	r3, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e6c:	d3f9      	bcc.n	8001e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e70:	4c0b      	ldr	r4, [pc, #44]	; (8001ea0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e74:	e001      	b.n	8001e7a <LoopFillZerobss>

08001e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e78:	3204      	adds	r2, #4

08001e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e7c:	d3fb      	bcc.n	8001e76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e7e:	f7ff ffd7 	bl	8001e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e82:	f003 fd37 	bl	80058f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e86:	f7ff f963 	bl	8001150 <main>
  bx  lr    
 8001e8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e94:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001e98:	08008b2c 	.word	0x08008b2c
  ldr r2, =_sbss
 8001e9c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001ea0:	20000434 	.word	0x20000434

08001ea4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea4:	e7fe      	b.n	8001ea4 <CAN1_RX0_IRQHandler>
	...

08001ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <HAL_Init+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <HAL_Init+0x40>)
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <HAL_Init+0x40>)
 8001ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a07      	ldr	r2, [pc, #28]	; (8001ee8 <HAL_Init+0x40>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f000 fe49 	bl	8002b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f000 f808 	bl	8001eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001edc:	f7ff fcf4 	bl	80018c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023c00 	.word	0x40023c00

08001eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_InitTick+0x54>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_InitTick+0x58>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4619      	mov	r1, r3
 8001efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fe61 	bl	8002bd2 <HAL_SYSTICK_Config>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00e      	b.n	8001f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b0f      	cmp	r3, #15
 8001f1e:	d80a      	bhi.n	8001f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f20:	2200      	movs	r2, #0
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	f000 fe29 	bl	8002b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f2c:	4a06      	ldr	r2, [pc, #24]	; (8001f48 <HAL_InitTick+0x5c>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000004 	.word	0x20000004
 8001f44:	2000000c 	.word	0x2000000c
 8001f48:	20000008 	.word	0x20000008

08001f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_IncTick+0x20>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_IncTick+0x24>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <HAL_IncTick+0x24>)
 8001f5e:	6013      	str	r3, [r2, #0]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	2000000c 	.word	0x2000000c
 8001f70:	20000420 	.word	0x20000420

08001f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return uwTick;
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <HAL_GetTick+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000420 	.word	0x20000420

08001f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f94:	f7ff ffee 	bl	8001f74 <HAL_GetTick>
 8001f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d005      	beq.n	8001fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_Delay+0x44>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fb2:	bf00      	nop
 8001fb4:	f7ff ffde 	bl	8001f74 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d8f7      	bhi.n	8001fb4 <HAL_Delay+0x28>
  {
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000000c 	.word	0x2000000c

08001fd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e033      	b.n	8002052 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fc90 	bl	8001918 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800201a:	f023 0302 	bic.w	r3, r3, #2
 800201e:	f043 0202 	orr.w	r2, r3, #2
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fbc8 	bl	80027bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f023 0303 	bic.w	r3, r3, #3
 800203a:	f043 0201 	orr.w	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	641a      	str	r2, [r3, #64]	; 0x40
 8002042:	e001      	b.n	8002048 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002050:	7bfb      	ldrb	r3, [r7, #15]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_ADC_Start_IT+0x1a>
 8002072:	2302      	movs	r3, #2
 8002074:	e0bd      	b.n	80021f2 <HAL_ADC_Start_IT+0x196>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d018      	beq.n	80020be <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800209c:	4b58      	ldr	r3, [pc, #352]	; (8002200 <HAL_ADC_Start_IT+0x1a4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a58      	ldr	r2, [pc, #352]	; (8002204 <HAL_ADC_Start_IT+0x1a8>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0c9a      	lsrs	r2, r3, #18
 80020a8:	4613      	mov	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020b0:	e002      	b.n	80020b8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f9      	bne.n	80020b2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	f040 8085 	bne.w	80021d8 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800210c:	d106      	bne.n	800211c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	f023 0206 	bic.w	r2, r3, #6
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	645a      	str	r2, [r3, #68]	; 0x44
 800211a:	e002      	b.n	8002122 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800212a:	4b37      	ldr	r3, [pc, #220]	; (8002208 <HAL_ADC_Start_IT+0x1ac>)
 800212c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002136:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002146:	f043 0320 	orr.w	r3, r3, #32
 800214a:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	2b00      	cmp	r3, #0
 8002156:	d12a      	bne.n	80021ae <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a2b      	ldr	r2, [pc, #172]	; (800220c <HAL_ADC_Start_IT+0x1b0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d015      	beq.n	800218e <HAL_ADC_Start_IT+0x132>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a2a      	ldr	r2, [pc, #168]	; (8002210 <HAL_ADC_Start_IT+0x1b4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d105      	bne.n	8002178 <HAL_ADC_Start_IT+0x11c>
 800216c:	4b26      	ldr	r3, [pc, #152]	; (8002208 <HAL_ADC_Start_IT+0x1ac>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a25      	ldr	r2, [pc, #148]	; (8002214 <HAL_ADC_Start_IT+0x1b8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d136      	bne.n	80021f0 <HAL_ADC_Start_IT+0x194>
 8002182:	4b21      	ldr	r3, [pc, #132]	; (8002208 <HAL_ADC_Start_IT+0x1ac>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b00      	cmp	r3, #0
 800218c:	d130      	bne.n	80021f0 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d129      	bne.n	80021f0 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	e020      	b.n	80021f0 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a16      	ldr	r2, [pc, #88]	; (800220c <HAL_ADC_Start_IT+0x1b0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d11b      	bne.n	80021f0 <HAL_ADC_Start_IT+0x194>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d114      	bne.n	80021f0 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	e00b      	b.n	80021f0 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f043 0210 	orr.w	r2, r3, #16
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e8:	f043 0201 	orr.w	r2, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000004 	.word	0x20000004
 8002204:	431bde83 	.word	0x431bde83
 8002208:	40012300 	.word	0x40012300
 800220c:	40012000 	.word	0x40012000
 8002210:	40012100 	.word	0x40012100
 8002214:	40012200 	.word	0x40012200

08002218 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_ADC_Stop_IT+0x16>
 800222a:	2302      	movs	r3, #2
 800222c:	e02b      	b.n	8002286 <HAL_ADC_Stop_IT+0x6e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0201 	bic.w	r2, r2, #1
 8002244:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d113      	bne.n	800227c <HAL_ADC_Stop_IT+0x64>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002262:	f023 0320 	bic.w	r3, r3, #32
 8002266:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	f043 0201 	orr.w	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	bf0c      	ite	eq
 80022c6:	2301      	moveq	r3, #1
 80022c8:	2300      	movne	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d049      	beq.n	8002368 <HAL_ADC_IRQHandler+0xd6>
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d046      	beq.n	8002368 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d105      	bne.n	80022f2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d12b      	bne.n	8002358 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002304:	2b00      	cmp	r3, #0
 8002306:	d127      	bne.n	8002358 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002312:	2b00      	cmp	r3, #0
 8002314:	d006      	beq.n	8002324 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002320:	2b00      	cmp	r3, #0
 8002322:	d119      	bne.n	8002358 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0220 	bic.w	r2, r2, #32
 8002332:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d105      	bne.n	8002358 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff fa6d 	bl	8001838 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f06f 0212 	mvn.w	r2, #18
 8002366:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b04      	cmp	r3, #4
 8002374:	bf0c      	ite	eq
 8002376:	2301      	moveq	r3, #1
 8002378:	2300      	movne	r3, #0
 800237a:	b2db      	uxtb	r3, r3
 800237c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002388:	2b80      	cmp	r3, #128	; 0x80
 800238a:	bf0c      	ite	eq
 800238c:	2301      	moveq	r3, #1
 800238e:	2300      	movne	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d057      	beq.n	800244a <HAL_ADC_IRQHandler+0x1b8>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d054      	beq.n	800244a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d139      	bne.n	800243a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d12b      	bne.n	800243a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d124      	bne.n	800243a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d11d      	bne.n	800243a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002402:	2b00      	cmp	r3, #0
 8002404:	d119      	bne.n	800243a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002414:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d105      	bne.n	800243a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f043 0201 	orr.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 faba 	bl	80029b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 020c 	mvn.w	r2, #12
 8002448:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b01      	cmp	r3, #1
 8002456:	bf0c      	ite	eq
 8002458:	2301      	moveq	r3, #1
 800245a:	2300      	movne	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246a:	2b40      	cmp	r3, #64	; 0x40
 800246c:	bf0c      	ite	eq
 800246e:	2301      	moveq	r3, #1
 8002470:	2300      	movne	r3, #0
 8002472:	b2db      	uxtb	r3, r3
 8002474:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d017      	beq.n	80024ac <HAL_ADC_IRQHandler+0x21a>
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d014      	beq.n	80024ac <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d10d      	bne.n	80024ac <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f846 	bl	800252e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f06f 0201 	mvn.w	r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0320 	and.w	r3, r3, #32
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	bf0c      	ite	eq
 80024ba:	2301      	moveq	r3, #1
 80024bc:	2300      	movne	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024d0:	bf0c      	ite	eq
 80024d2:	2301      	moveq	r3, #1
 80024d4:	2300      	movne	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d015      	beq.n	800250c <HAL_ADC_IRQHandler+0x27a>
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d012      	beq.n	800250c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f043 0202 	orr.w	r2, r3, #2
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f06f 0220 	mvn.w	r2, #32
 80024fa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f820 	bl	8002542 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f06f 0220 	mvn.w	r2, #32
 800250a:	601a      	str	r2, [r3, #0]
  }
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002522:	4618      	mov	r0, r3
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x1c>
 8002570:	2302      	movs	r3, #2
 8002572:	e113      	b.n	800279c <HAL_ADC_ConfigChannel+0x244>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b09      	cmp	r3, #9
 8002582:	d925      	bls.n	80025d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68d9      	ldr	r1, [r3, #12]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	3b1e      	subs	r3, #30
 800259a:	2207      	movs	r2, #7
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43da      	mvns	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	400a      	ands	r2, r1
 80025a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68d9      	ldr	r1, [r3, #12]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	4618      	mov	r0, r3
 80025bc:	4603      	mov	r3, r0
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4403      	add	r3, r0
 80025c2:	3b1e      	subs	r3, #30
 80025c4:	409a      	lsls	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	e022      	b.n	8002616 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6919      	ldr	r1, [r3, #16]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	4613      	mov	r3, r2
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	4413      	add	r3, r2
 80025e4:	2207      	movs	r2, #7
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43da      	mvns	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	400a      	ands	r2, r1
 80025f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6919      	ldr	r1, [r3, #16]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	4618      	mov	r0, r3
 8002606:	4603      	mov	r3, r0
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4403      	add	r3, r0
 800260c:	409a      	lsls	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b06      	cmp	r3, #6
 800261c:	d824      	bhi.n	8002668 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	3b05      	subs	r3, #5
 8002630:	221f      	movs	r2, #31
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	400a      	ands	r2, r1
 800263e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	4618      	mov	r0, r3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	3b05      	subs	r3, #5
 800265a:	fa00 f203 	lsl.w	r2, r0, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	635a      	str	r2, [r3, #52]	; 0x34
 8002666:	e04c      	b.n	8002702 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b0c      	cmp	r3, #12
 800266e:	d824      	bhi.n	80026ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	3b23      	subs	r3, #35	; 0x23
 8002682:	221f      	movs	r2, #31
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43da      	mvns	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	400a      	ands	r2, r1
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	4618      	mov	r0, r3
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	3b23      	subs	r3, #35	; 0x23
 80026ac:	fa00 f203 	lsl.w	r2, r0, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
 80026b8:	e023      	b.n	8002702 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	3b41      	subs	r3, #65	; 0x41
 80026cc:	221f      	movs	r2, #31
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43da      	mvns	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	400a      	ands	r2, r1
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	4618      	mov	r0, r3
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	3b41      	subs	r3, #65	; 0x41
 80026f6:	fa00 f203 	lsl.w	r2, r0, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002702:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <HAL_ADC_ConfigChannel+0x250>)
 8002704:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a28      	ldr	r2, [pc, #160]	; (80027ac <HAL_ADC_ConfigChannel+0x254>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d10f      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x1d8>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b12      	cmp	r3, #18
 8002716:	d10b      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1d      	ldr	r2, [pc, #116]	; (80027ac <HAL_ADC_ConfigChannel+0x254>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d12b      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x23a>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1c      	ldr	r2, [pc, #112]	; (80027b0 <HAL_ADC_ConfigChannel+0x258>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d003      	beq.n	800274c <HAL_ADC_ConfigChannel+0x1f4>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b11      	cmp	r3, #17
 800274a:	d122      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <HAL_ADC_ConfigChannel+0x258>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d111      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800276e:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <HAL_ADC_ConfigChannel+0x25c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a11      	ldr	r2, [pc, #68]	; (80027b8 <HAL_ADC_ConfigChannel+0x260>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	0c9a      	lsrs	r2, r3, #18
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002784:	e002      	b.n	800278c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	3b01      	subs	r3, #1
 800278a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f9      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40012300 	.word	0x40012300
 80027ac:	40012000 	.word	0x40012000
 80027b0:	10000012 	.word	0x10000012
 80027b4:	20000004 	.word	0x20000004
 80027b8:	431bde83 	.word	0x431bde83

080027bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027c4:	4b79      	ldr	r3, [pc, #484]	; (80029ac <ADC_Init+0x1f0>)
 80027c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	431a      	orrs	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	021a      	lsls	r2, r3, #8
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002814:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002836:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6899      	ldr	r1, [r3, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	4a58      	ldr	r2, [pc, #352]	; (80029b0 <ADC_Init+0x1f4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d022      	beq.n	800289a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002862:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6899      	ldr	r1, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002884:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6899      	ldr	r1, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	e00f      	b.n	80028ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0202 	bic.w	r2, r2, #2
 80028c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6899      	ldr	r1, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7e1b      	ldrb	r3, [r3, #24]
 80028d4:	005a      	lsls	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d01b      	beq.n	8002920 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002906:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6859      	ldr	r1, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	3b01      	subs	r3, #1
 8002914:	035a      	lsls	r2, r3, #13
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	e007      	b.n	8002930 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800292e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800293e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	3b01      	subs	r3, #1
 800294c:	051a      	lsls	r2, r3, #20
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002964:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6899      	ldr	r1, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002972:	025a      	lsls	r2, r3, #9
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800298a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6899      	ldr	r1, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	029a      	lsls	r2, r3, #10
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	609a      	str	r2, [r3, #8]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	40012300 	.word	0x40012300
 80029b0:	0f000001 	.word	0x0f000001

080029b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <__NVIC_SetPriorityGrouping+0x44>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029e4:	4013      	ands	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029fa:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <__NVIC_SetPriorityGrouping+0x44>)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	60d3      	str	r3, [r2, #12]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <__NVIC_GetPriorityGrouping+0x18>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	0a1b      	lsrs	r3, r3, #8
 8002a1a:	f003 0307 	and.w	r3, r3, #7
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	db0b      	blt.n	8002a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	f003 021f 	and.w	r2, r3, #31
 8002a44:	4907      	ldr	r1, [pc, #28]	; (8002a64 <__NVIC_EnableIRQ+0x38>)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	e000e100 	.word	0xe000e100

08002a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	6039      	str	r1, [r7, #0]
 8002a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	db0a      	blt.n	8002a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	490c      	ldr	r1, [pc, #48]	; (8002ab4 <__NVIC_SetPriority+0x4c>)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	0112      	lsls	r2, r2, #4
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a90:	e00a      	b.n	8002aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4908      	ldr	r1, [pc, #32]	; (8002ab8 <__NVIC_SetPriority+0x50>)
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	3b04      	subs	r3, #4
 8002aa0:	0112      	lsls	r2, r2, #4
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	761a      	strb	r2, [r3, #24]
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000e100 	.word	0xe000e100
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f1c3 0307 	rsb	r3, r3, #7
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	bf28      	it	cs
 8002ada:	2304      	movcs	r3, #4
 8002adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d902      	bls.n	8002aec <NVIC_EncodePriority+0x30>
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3b03      	subs	r3, #3
 8002aea:	e000      	b.n	8002aee <NVIC_EncodePriority+0x32>
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	f04f 32ff 	mov.w	r2, #4294967295
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43da      	mvns	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	401a      	ands	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b04:	f04f 31ff 	mov.w	r1, #4294967295
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	43d9      	mvns	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b14:	4313      	orrs	r3, r2
         );
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3724      	adds	r7, #36	; 0x24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b34:	d301      	bcc.n	8002b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b36:	2301      	movs	r3, #1
 8002b38:	e00f      	b.n	8002b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <SysTick_Config+0x40>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b42:	210f      	movs	r1, #15
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295
 8002b48:	f7ff ff8e 	bl	8002a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <SysTick_Config+0x40>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b52:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <SysTick_Config+0x40>)
 8002b54:	2207      	movs	r2, #7
 8002b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	e000e010 	.word	0xe000e010

08002b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ff29 	bl	80029c8 <__NVIC_SetPriorityGrouping>
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b086      	sub	sp, #24
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	4603      	mov	r3, r0
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b90:	f7ff ff3e 	bl	8002a10 <__NVIC_GetPriorityGrouping>
 8002b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	6978      	ldr	r0, [r7, #20]
 8002b9c:	f7ff ff8e 	bl	8002abc <NVIC_EncodePriority>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff5d 	bl	8002a68 <__NVIC_SetPriority>
}
 8002bae:	bf00      	nop
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff31 	bl	8002a2c <__NVIC_EnableIRQ>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff ffa2 	bl	8002b24 <SysTick_Config>
 8002be0:	4603      	mov	r3, r0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bf8:	f7ff f9bc 	bl	8001f74 <HAL_GetTick>
 8002bfc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d008      	beq.n	8002c1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2280      	movs	r2, #128	; 0x80
 8002c0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e052      	b.n	8002cc2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0216 	bic.w	r2, r2, #22
 8002c2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d103      	bne.n	8002c4c <HAL_DMA_Abort+0x62>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d007      	beq.n	8002c5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0208 	bic.w	r2, r2, #8
 8002c5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c6c:	e013      	b.n	8002c96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c6e:	f7ff f981 	bl	8001f74 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b05      	cmp	r3, #5
 8002c7a:	d90c      	bls.n	8002c96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e015      	b.n	8002cc2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1e4      	bne.n	8002c6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca8:	223f      	movs	r2, #63	; 0x3f
 8002caa:	409a      	lsls	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d004      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2280      	movs	r2, #128	; 0x80
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e00c      	b.n	8002d02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2205      	movs	r2, #5
 8002cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	; 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	e165      	b.n	8002ff8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	f040 8154 	bne.w	8002ff2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d005      	beq.n	8002d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d130      	bne.n	8002dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d98:	2201      	movs	r2, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 0201 	and.w	r2, r3, #1
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d017      	beq.n	8002e00 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d123      	bne.n	8002e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	08da      	lsrs	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3208      	adds	r2, #8
 8002e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	220f      	movs	r2, #15
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	08da      	lsrs	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3208      	adds	r2, #8
 8002e4e:	69b9      	ldr	r1, [r7, #24]
 8002e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0203 	and.w	r2, r3, #3
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80ae 	beq.w	8002ff2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4b5d      	ldr	r3, [pc, #372]	; (8003010 <HAL_GPIO_Init+0x300>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	4a5c      	ldr	r2, [pc, #368]	; (8003010 <HAL_GPIO_Init+0x300>)
 8002ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea6:	4b5a      	ldr	r3, [pc, #360]	; (8003010 <HAL_GPIO_Init+0x300>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eb2:	4a58      	ldr	r2, [pc, #352]	; (8003014 <HAL_GPIO_Init+0x304>)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3302      	adds	r3, #2
 8002eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	220f      	movs	r2, #15
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a4f      	ldr	r2, [pc, #316]	; (8003018 <HAL_GPIO_Init+0x308>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d025      	beq.n	8002f2a <HAL_GPIO_Init+0x21a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a4e      	ldr	r2, [pc, #312]	; (800301c <HAL_GPIO_Init+0x30c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d01f      	beq.n	8002f26 <HAL_GPIO_Init+0x216>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a4d      	ldr	r2, [pc, #308]	; (8003020 <HAL_GPIO_Init+0x310>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d019      	beq.n	8002f22 <HAL_GPIO_Init+0x212>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a4c      	ldr	r2, [pc, #304]	; (8003024 <HAL_GPIO_Init+0x314>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_GPIO_Init+0x20e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a4b      	ldr	r2, [pc, #300]	; (8003028 <HAL_GPIO_Init+0x318>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00d      	beq.n	8002f1a <HAL_GPIO_Init+0x20a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4a      	ldr	r2, [pc, #296]	; (800302c <HAL_GPIO_Init+0x31c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d007      	beq.n	8002f16 <HAL_GPIO_Init+0x206>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a49      	ldr	r2, [pc, #292]	; (8003030 <HAL_GPIO_Init+0x320>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d101      	bne.n	8002f12 <HAL_GPIO_Init+0x202>
 8002f0e:	2306      	movs	r3, #6
 8002f10:	e00c      	b.n	8002f2c <HAL_GPIO_Init+0x21c>
 8002f12:	2307      	movs	r3, #7
 8002f14:	e00a      	b.n	8002f2c <HAL_GPIO_Init+0x21c>
 8002f16:	2305      	movs	r3, #5
 8002f18:	e008      	b.n	8002f2c <HAL_GPIO_Init+0x21c>
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	e006      	b.n	8002f2c <HAL_GPIO_Init+0x21c>
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e004      	b.n	8002f2c <HAL_GPIO_Init+0x21c>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e002      	b.n	8002f2c <HAL_GPIO_Init+0x21c>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_GPIO_Init+0x21c>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	69fa      	ldr	r2, [r7, #28]
 8002f2e:	f002 0203 	and.w	r2, r2, #3
 8002f32:	0092      	lsls	r2, r2, #2
 8002f34:	4093      	lsls	r3, r2
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f3c:	4935      	ldr	r1, [pc, #212]	; (8003014 <HAL_GPIO_Init+0x304>)
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	3302      	adds	r3, #2
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f4a:	4b3a      	ldr	r3, [pc, #232]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f6e:	4a31      	ldr	r2, [pc, #196]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f74:	4b2f      	ldr	r3, [pc, #188]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f98:	4a26      	ldr	r2, [pc, #152]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f9e:	4b25      	ldr	r3, [pc, #148]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4013      	ands	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fc2:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fec:	4a11      	ldr	r2, [pc, #68]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	61fb      	str	r3, [r7, #28]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	2b0f      	cmp	r3, #15
 8002ffc:	f67f ae96 	bls.w	8002d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	3724      	adds	r7, #36	; 0x24
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800
 8003014:	40013800 	.word	0x40013800
 8003018:	40020000 	.word	0x40020000
 800301c:	40020400 	.word	0x40020400
 8003020:	40020800 	.word	0x40020800
 8003024:	40020c00 	.word	0x40020c00
 8003028:	40021000 	.word	0x40021000
 800302c:	40021400 	.word	0x40021400
 8003030:	40021800 	.word	0x40021800
 8003034:	40013c00 	.word	0x40013c00

08003038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	807b      	strh	r3, [r7, #2]
 8003044:	4613      	mov	r3, r2
 8003046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003048:	787b      	ldrb	r3, [r7, #1]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800304e:	887a      	ldrh	r2, [r7, #2]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003054:	e003      	b.n	800305e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003056:	887b      	ldrh	r3, [r7, #2]
 8003058:	041a      	lsls	r2, r3, #16
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	619a      	str	r2, [r3, #24]
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800307c:	887a      	ldrh	r2, [r7, #2]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4013      	ands	r3, r2
 8003082:	041a      	lsls	r2, r3, #16
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	43d9      	mvns	r1, r3
 8003088:	887b      	ldrh	r3, [r7, #2]
 800308a:	400b      	ands	r3, r1
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	619a      	str	r2, [r3, #24]
}
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
	...

080030a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d006      	beq.n	80030c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030b6:	4a05      	ldr	r2, [pc, #20]	; (80030cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe fbd6 	bl	8001870 <HAL_GPIO_EXTI_Callback>
  }
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40013c00 	.word	0x40013c00

080030d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e12b      	b.n	800333a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fe fc5a 	bl	80019b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2224      	movs	r2, #36	; 0x24
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003134:	f000 fe38 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8003138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4a81      	ldr	r2, [pc, #516]	; (8003344 <HAL_I2C_Init+0x274>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d807      	bhi.n	8003154 <HAL_I2C_Init+0x84>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4a80      	ldr	r2, [pc, #512]	; (8003348 <HAL_I2C_Init+0x278>)
 8003148:	4293      	cmp	r3, r2
 800314a:	bf94      	ite	ls
 800314c:	2301      	movls	r3, #1
 800314e:	2300      	movhi	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e006      	b.n	8003162 <HAL_I2C_Init+0x92>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a7d      	ldr	r2, [pc, #500]	; (800334c <HAL_I2C_Init+0x27c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	bf94      	ite	ls
 800315c:	2301      	movls	r3, #1
 800315e:	2300      	movhi	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e0e7      	b.n	800333a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a78      	ldr	r2, [pc, #480]	; (8003350 <HAL_I2C_Init+0x280>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0c9b      	lsrs	r3, r3, #18
 8003174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a6a      	ldr	r2, [pc, #424]	; (8003344 <HAL_I2C_Init+0x274>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d802      	bhi.n	80031a4 <HAL_I2C_Init+0xd4>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	3301      	adds	r3, #1
 80031a2:	e009      	b.n	80031b8 <HAL_I2C_Init+0xe8>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	4a69      	ldr	r2, [pc, #420]	; (8003354 <HAL_I2C_Init+0x284>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	3301      	adds	r3, #1
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	430b      	orrs	r3, r1
 80031be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	495c      	ldr	r1, [pc, #368]	; (8003344 <HAL_I2C_Init+0x274>)
 80031d4:	428b      	cmp	r3, r1
 80031d6:	d819      	bhi.n	800320c <HAL_I2C_Init+0x13c>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1e59      	subs	r1, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e6:	1c59      	adds	r1, r3, #1
 80031e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031ec:	400b      	ands	r3, r1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_I2C_Init+0x138>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1e59      	subs	r1, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003200:	3301      	adds	r3, #1
 8003202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003206:	e051      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 8003208:	2304      	movs	r3, #4
 800320a:	e04f      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d111      	bne.n	8003238 <HAL_I2C_Init+0x168>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e58      	subs	r0, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	440b      	add	r3, r1
 8003222:	fbb0 f3f3 	udiv	r3, r0, r3
 8003226:	3301      	adds	r3, #1
 8003228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e012      	b.n	800325e <HAL_I2C_Init+0x18e>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e58      	subs	r0, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	0099      	lsls	r1, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	fbb0 f3f3 	udiv	r3, r0, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Init+0x196>
 8003262:	2301      	movs	r3, #1
 8003264:	e022      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10e      	bne.n	800328c <HAL_I2C_Init+0x1bc>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1e58      	subs	r0, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6859      	ldr	r1, [r3, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	440b      	add	r3, r1
 800327c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003280:	3301      	adds	r3, #1
 8003282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328a:	e00f      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e58      	subs	r0, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	0099      	lsls	r1, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a2:	3301      	adds	r3, #1
 80032a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	6809      	ldr	r1, [r1, #0]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6911      	ldr	r1, [r2, #16]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68d2      	ldr	r2, [r2, #12]
 80032e6:	4311      	orrs	r1, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	000186a0 	.word	0x000186a0
 8003348:	001e847f 	.word	0x001e847f
 800334c:	003d08ff 	.word	0x003d08ff
 8003350:	431bde83 	.word	0x431bde83
 8003354:	10624dd3 	.word	0x10624dd3

08003358 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	461a      	mov	r2, r3
 8003364:	460b      	mov	r3, r1
 8003366:	817b      	strh	r3, [r7, #10]
 8003368:	4613      	mov	r3, r2
 800336a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800336c:	f7fe fe02 	bl	8001f74 <HAL_GetTick>
 8003370:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b20      	cmp	r3, #32
 800337c:	f040 80e0 	bne.w	8003540 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	2319      	movs	r3, #25
 8003386:	2201      	movs	r2, #1
 8003388:	4970      	ldr	r1, [pc, #448]	; (800354c <HAL_I2C_Master_Transmit+0x1f4>)
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fa92 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003396:	2302      	movs	r3, #2
 8003398:	e0d3      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_I2C_Master_Transmit+0x50>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e0cc      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d007      	beq.n	80033ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0201 	orr.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2221      	movs	r2, #33	; 0x21
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2210      	movs	r2, #16
 80033ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	893a      	ldrh	r2, [r7, #8]
 80033fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a50      	ldr	r2, [pc, #320]	; (8003550 <HAL_I2C_Master_Transmit+0x1f8>)
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003410:	8979      	ldrh	r1, [r7, #10]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	6a3a      	ldr	r2, [r7, #32]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f9ca 	bl	80037b0 <I2C_MasterRequestWrite>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e08d      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800343c:	e066      	b.n	800350c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	6a39      	ldr	r1, [r7, #32]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fb0c 	bl	8003a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	2b04      	cmp	r3, #4
 8003454:	d107      	bne.n	8003466 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003464:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e06b      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d11b      	bne.n	80034e0 <HAL_I2C_Master_Transmit+0x188>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d017      	beq.n	80034e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	781a      	ldrb	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	6a39      	ldr	r1, [r7, #32]
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fafc 	bl	8003ae2 <I2C_WaitOnBTFFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00d      	beq.n	800350c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d107      	bne.n	8003508 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003506:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e01a      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003510:	2b00      	cmp	r3, #0
 8003512:	d194      	bne.n	800343e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	e000      	b.n	8003542 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003540:	2302      	movs	r3, #2
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	00100002 	.word	0x00100002
 8003550:	ffff0000 	.word	0xffff0000

08003554 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	; 0x28
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	460b      	mov	r3, r1
 8003562:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003564:	f7fe fd06 	bl	8001f74 <HAL_GetTick>
 8003568:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800356a:	2301      	movs	r3, #1
 800356c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b20      	cmp	r3, #32
 8003578:	f040 8111 	bne.w	800379e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	2319      	movs	r3, #25
 8003582:	2201      	movs	r2, #1
 8003584:	4988      	ldr	r1, [pc, #544]	; (80037a8 <HAL_I2C_IsDeviceReady+0x254>)
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f994 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003592:	2302      	movs	r3, #2
 8003594:	e104      	b.n	80037a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_I2C_IsDeviceReady+0x50>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e0fd      	b.n	80037a0 <HAL_I2C_IsDeviceReady+0x24c>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d007      	beq.n	80035ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2224      	movs	r2, #36	; 0x24
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4a70      	ldr	r2, [pc, #448]	; (80037ac <HAL_I2C_IsDeviceReady+0x258>)
 80035ec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2200      	movs	r2, #0
 8003606:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f952 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00d      	beq.n	8003632 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003624:	d103      	bne.n	800362e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e0b6      	b.n	80037a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003632:	897b      	ldrh	r3, [r7, #10]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003640:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003642:	f7fe fc97 	bl	8001f74 <HAL_GetTick>
 8003646:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b02      	cmp	r3, #2
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800366c:	bf0c      	ite	eq
 800366e:	2301      	moveq	r3, #1
 8003670:	2300      	movne	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003676:	e025      	b.n	80036c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003678:	f7fe fc7c 	bl	8001f74 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d302      	bcc.n	800368e <HAL_I2C_IsDeviceReady+0x13a>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	22a0      	movs	r2, #160	; 0xa0
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2ba0      	cmp	r3, #160	; 0xa0
 80036ce:	d005      	beq.n	80036dc <HAL_I2C_IsDeviceReady+0x188>
 80036d0:	7dfb      	ldrb	r3, [r7, #23]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <HAL_I2C_IsDeviceReady+0x188>
 80036d6:	7dbb      	ldrb	r3, [r7, #22]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0cd      	beq.n	8003678 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d129      	bne.n	8003746 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003700:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003702:	2300      	movs	r3, #0
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	2319      	movs	r3, #25
 800371e:	2201      	movs	r2, #1
 8003720:	4921      	ldr	r1, [pc, #132]	; (80037a8 <HAL_I2C_IsDeviceReady+0x254>)
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f8c6 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e036      	b.n	80037a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e02c      	b.n	80037a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003754:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800375e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	2319      	movs	r3, #25
 8003766:	2201      	movs	r2, #1
 8003768:	490f      	ldr	r1, [pc, #60]	; (80037a8 <HAL_I2C_IsDeviceReady+0x254>)
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f8a2 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e012      	b.n	80037a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	3301      	adds	r3, #1
 800377e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	429a      	cmp	r2, r3
 8003786:	f4ff af32 	bcc.w	80035ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800379e:	2302      	movs	r3, #2
  }
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3720      	adds	r7, #32
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	00100002 	.word	0x00100002
 80037ac:	ffff0000 	.word	0xffff0000

080037b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	460b      	mov	r3, r1
 80037be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d006      	beq.n	80037da <I2C_MasterRequestWrite+0x2a>
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d003      	beq.n	80037da <I2C_MasterRequestWrite+0x2a>
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037d8:	d108      	bne.n	80037ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e00b      	b.n	8003804 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	2b12      	cmp	r3, #18
 80037f2:	d107      	bne.n	8003804 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003802:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 f84f 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00d      	beq.n	8003838 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382a:	d103      	bne.n	8003834 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003832:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e035      	b.n	80038a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003840:	d108      	bne.n	8003854 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003842:	897b      	ldrh	r3, [r7, #10]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	461a      	mov	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003850:	611a      	str	r2, [r3, #16]
 8003852:	e01b      	b.n	800388c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003854:	897b      	ldrh	r3, [r7, #10]
 8003856:	11db      	asrs	r3, r3, #7
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f003 0306 	and.w	r3, r3, #6
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f063 030f 	orn	r3, r3, #15
 8003864:	b2da      	uxtb	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	490e      	ldr	r1, [pc, #56]	; (80038ac <I2C_MasterRequestWrite+0xfc>)
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f875 	bl	8003962 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e010      	b.n	80038a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003882:	897b      	ldrh	r3, [r7, #10]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4907      	ldr	r1, [pc, #28]	; (80038b0 <I2C_MasterRequestWrite+0x100>)
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f865 	bl	8003962 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	00010008 	.word	0x00010008
 80038b0:	00010002 	.word	0x00010002

080038b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c4:	e025      	b.n	8003912 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d021      	beq.n	8003912 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ce:	f7fe fb51 	bl	8001f74 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d302      	bcc.n	80038e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d116      	bne.n	8003912 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f043 0220 	orr.w	r2, r3, #32
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e023      	b.n	800395a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	0c1b      	lsrs	r3, r3, #16
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	d10d      	bne.n	8003938 <I2C_WaitOnFlagUntilTimeout+0x84>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	43da      	mvns	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4013      	ands	r3, r2
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	bf0c      	ite	eq
 800392e:	2301      	moveq	r3, #1
 8003930:	2300      	movne	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	e00c      	b.n	8003952 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	43da      	mvns	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4013      	ands	r3, r2
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	429a      	cmp	r2, r3
 8003956:	d0b6      	beq.n	80038c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003970:	e051      	b.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003980:	d123      	bne.n	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003990:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800399a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f043 0204 	orr.w	r2, r3, #4
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e046      	b.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d021      	beq.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d2:	f7fe facf 	bl	8001f74 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d302      	bcc.n	80039e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d116      	bne.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e020      	b.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	0c1b      	lsrs	r3, r3, #16
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d10c      	bne.n	8003a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	43da      	mvns	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf14      	ite	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	2300      	moveq	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	e00b      	b.n	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	43da      	mvns	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	4013      	ands	r3, r2
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf14      	ite	ne
 8003a4c:	2301      	movne	r3, #1
 8003a4e:	2300      	moveq	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d18d      	bne.n	8003972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a6c:	e02d      	b.n	8003aca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f878 	bl	8003b64 <I2C_IsAcknowledgeFailed>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e02d      	b.n	8003ada <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d021      	beq.n	8003aca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a86:	f7fe fa75 	bl	8001f74 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d302      	bcc.n	8003a9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d116      	bne.n	8003aca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f043 0220 	orr.w	r2, r3, #32
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e007      	b.n	8003ada <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d1ca      	bne.n	8003a6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aee:	e02d      	b.n	8003b4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f837 	bl	8003b64 <I2C_IsAcknowledgeFailed>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e02d      	b.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b06:	d021      	beq.n	8003b4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b08:	f7fe fa34 	bl	8001f74 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d302      	bcc.n	8003b1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d116      	bne.n	8003b4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f043 0220 	orr.w	r2, r3, #32
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e007      	b.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d1ca      	bne.n	8003af0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b7a:	d11b      	bne.n	8003bb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f043 0204 	orr.w	r2, r3, #4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0cc      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd8:	4b68      	ldr	r3, [pc, #416]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d90c      	bls.n	8003c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be6:	4b65      	ldr	r3, [pc, #404]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bee:	4b63      	ldr	r3, [pc, #396]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0b8      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d020      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c18:	4b59      	ldr	r3, [pc, #356]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4a58      	ldr	r2, [pc, #352]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c30:	4b53      	ldr	r3, [pc, #332]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4a52      	ldr	r2, [pc, #328]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	494d      	ldr	r1, [pc, #308]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d044      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d119      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e07f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d003      	beq.n	8003c82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d107      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c82:	4b3f      	ldr	r3, [pc, #252]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e06f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c92:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e067      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ca2:	4b37      	ldr	r3, [pc, #220]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f023 0203 	bic.w	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	4934      	ldr	r1, [pc, #208]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb4:	f7fe f95e 	bl	8001f74 <HAL_GetTick>
 8003cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cba:	e00a      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cbc:	f7fe f95a 	bl	8001f74 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e04f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 020c 	and.w	r2, r3, #12
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d1eb      	bne.n	8003cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce4:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d20c      	bcs.n	8003d0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf2:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e032      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d18:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4916      	ldr	r1, [pc, #88]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	490e      	ldr	r1, [pc, #56]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d4a:	f000 f855 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	490a      	ldr	r1, [pc, #40]	; (8003d84 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5c:	5ccb      	ldrb	r3, [r1, r3]
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe f8be 	bl	8001eec <HAL_InitTick>

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023c00 	.word	0x40023c00
 8003d80:	40023800 	.word	0x40023800
 8003d84:	08008720 	.word	0x08008720
 8003d88:	20000004 	.word	0x20000004
 8003d8c:	20000008 	.word	0x20000008

08003d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d94:	4b03      	ldr	r3, [pc, #12]	; (8003da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d96:	681b      	ldr	r3, [r3, #0]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000004 	.word	0x20000004

08003da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dac:	f7ff fff0 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	0a9b      	lsrs	r3, r3, #10
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	4903      	ldr	r1, [pc, #12]	; (8003dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	08008730 	.word	0x08008730

08003dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dd4:	f7ff ffdc 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	0b5b      	lsrs	r3, r3, #13
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4903      	ldr	r1, [pc, #12]	; (8003df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40023800 	.word	0x40023800
 8003df4:	08008730 	.word	0x08008730

08003df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dfc:	b088      	sub	sp, #32
 8003dfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e14:	4bce      	ldr	r3, [pc, #824]	; (8004150 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 030c 	and.w	r3, r3, #12
 8003e1c:	2b0c      	cmp	r3, #12
 8003e1e:	f200 818d 	bhi.w	800413c <HAL_RCC_GetSysClockFreq+0x344>
 8003e22:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <HAL_RCC_GetSysClockFreq+0x30>)
 8003e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e28:	08003e5d 	.word	0x08003e5d
 8003e2c:	0800413d 	.word	0x0800413d
 8003e30:	0800413d 	.word	0x0800413d
 8003e34:	0800413d 	.word	0x0800413d
 8003e38:	08003e63 	.word	0x08003e63
 8003e3c:	0800413d 	.word	0x0800413d
 8003e40:	0800413d 	.word	0x0800413d
 8003e44:	0800413d 	.word	0x0800413d
 8003e48:	08003e69 	.word	0x08003e69
 8003e4c:	0800413d 	.word	0x0800413d
 8003e50:	0800413d 	.word	0x0800413d
 8003e54:	0800413d 	.word	0x0800413d
 8003e58:	08003fdd 	.word	0x08003fdd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e5c:	4bbd      	ldr	r3, [pc, #756]	; (8004154 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e5e:	61bb      	str	r3, [r7, #24]
       break;
 8003e60:	e16f      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e62:	4bbd      	ldr	r3, [pc, #756]	; (8004158 <HAL_RCC_GetSysClockFreq+0x360>)
 8003e64:	61bb      	str	r3, [r7, #24]
      break;
 8003e66:	e16c      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e68:	4bb9      	ldr	r3, [pc, #740]	; (8004150 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e70:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e72:	4bb7      	ldr	r3, [pc, #732]	; (8004150 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d053      	beq.n	8003f26 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7e:	4bb4      	ldr	r3, [pc, #720]	; (8004150 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	099b      	lsrs	r3, r3, #6
 8003e84:	461a      	mov	r2, r3
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e8e:	f04f 0100 	mov.w	r1, #0
 8003e92:	ea02 0400 	and.w	r4, r2, r0
 8003e96:	603c      	str	r4, [r7, #0]
 8003e98:	400b      	ands	r3, r1
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	014b      	lsls	r3, r1, #5
 8003eae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003eb2:	0142      	lsls	r2, r0, #5
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4623      	mov	r3, r4
 8003eba:	1ac0      	subs	r0, r0, r3
 8003ebc:	462b      	mov	r3, r5
 8003ebe:	eb61 0103 	sbc.w	r1, r1, r3
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	018b      	lsls	r3, r1, #6
 8003ecc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ed0:	0182      	lsls	r2, r0, #6
 8003ed2:	1a12      	subs	r2, r2, r0
 8003ed4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed8:	f04f 0000 	mov.w	r0, #0
 8003edc:	f04f 0100 	mov.w	r1, #0
 8003ee0:	00d9      	lsls	r1, r3, #3
 8003ee2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ee6:	00d0      	lsls	r0, r2, #3
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4621      	mov	r1, r4
 8003eee:	1852      	adds	r2, r2, r1
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	eb43 0101 	adc.w	r1, r3, r1
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	f04f 0000 	mov.w	r0, #0
 8003efc:	f04f 0100 	mov.w	r1, #0
 8003f00:	0259      	lsls	r1, r3, #9
 8003f02:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f06:	0250      	lsls	r0, r2, #9
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	4619      	mov	r1, r3
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	461a      	mov	r2, r3
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	f7fc fe66 	bl	8000be8 <__aeabi_uldivmod>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4613      	mov	r3, r2
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	e04c      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f26:	4b8a      	ldr	r3, [pc, #552]	; (8004150 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	099b      	lsrs	r3, r3, #6
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f36:	f04f 0100 	mov.w	r1, #0
 8003f3a:	ea02 0a00 	and.w	sl, r2, r0
 8003f3e:	ea03 0b01 	and.w	fp, r3, r1
 8003f42:	4650      	mov	r0, sl
 8003f44:	4659      	mov	r1, fp
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	014b      	lsls	r3, r1, #5
 8003f50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f54:	0142      	lsls	r2, r0, #5
 8003f56:	4610      	mov	r0, r2
 8003f58:	4619      	mov	r1, r3
 8003f5a:	ebb0 000a 	subs.w	r0, r0, sl
 8003f5e:	eb61 010b 	sbc.w	r1, r1, fp
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	018b      	lsls	r3, r1, #6
 8003f6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f70:	0182      	lsls	r2, r0, #6
 8003f72:	1a12      	subs	r2, r2, r0
 8003f74:	eb63 0301 	sbc.w	r3, r3, r1
 8003f78:	f04f 0000 	mov.w	r0, #0
 8003f7c:	f04f 0100 	mov.w	r1, #0
 8003f80:	00d9      	lsls	r1, r3, #3
 8003f82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f86:	00d0      	lsls	r0, r2, #3
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	eb12 020a 	adds.w	r2, r2, sl
 8003f90:	eb43 030b 	adc.w	r3, r3, fp
 8003f94:	f04f 0000 	mov.w	r0, #0
 8003f98:	f04f 0100 	mov.w	r1, #0
 8003f9c:	0299      	lsls	r1, r3, #10
 8003f9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003fa2:	0290      	lsls	r0, r2, #10
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4610      	mov	r0, r2
 8003faa:	4619      	mov	r1, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	f7fc fe18 	bl	8000be8 <__aeabi_uldivmod>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fc0:	4b63      	ldr	r3, [pc, #396]	; (8004150 <HAL_RCC_GetSysClockFreq+0x358>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	3301      	adds	r3, #1
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd8:	61bb      	str	r3, [r7, #24]
      break;
 8003fda:	e0b2      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fdc:	4b5c      	ldr	r3, [pc, #368]	; (8004150 <HAL_RCC_GetSysClockFreq+0x358>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fe6:	4b5a      	ldr	r3, [pc, #360]	; (8004150 <HAL_RCC_GetSysClockFreq+0x358>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d04d      	beq.n	800408e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ff2:	4b57      	ldr	r3, [pc, #348]	; (8004150 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	099b      	lsrs	r3, r3, #6
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004002:	f04f 0100 	mov.w	r1, #0
 8004006:	ea02 0800 	and.w	r8, r2, r0
 800400a:	ea03 0901 	and.w	r9, r3, r1
 800400e:	4640      	mov	r0, r8
 8004010:	4649      	mov	r1, r9
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	014b      	lsls	r3, r1, #5
 800401c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004020:	0142      	lsls	r2, r0, #5
 8004022:	4610      	mov	r0, r2
 8004024:	4619      	mov	r1, r3
 8004026:	ebb0 0008 	subs.w	r0, r0, r8
 800402a:	eb61 0109 	sbc.w	r1, r1, r9
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	018b      	lsls	r3, r1, #6
 8004038:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800403c:	0182      	lsls	r2, r0, #6
 800403e:	1a12      	subs	r2, r2, r0
 8004040:	eb63 0301 	sbc.w	r3, r3, r1
 8004044:	f04f 0000 	mov.w	r0, #0
 8004048:	f04f 0100 	mov.w	r1, #0
 800404c:	00d9      	lsls	r1, r3, #3
 800404e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004052:	00d0      	lsls	r0, r2, #3
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	eb12 0208 	adds.w	r2, r2, r8
 800405c:	eb43 0309 	adc.w	r3, r3, r9
 8004060:	f04f 0000 	mov.w	r0, #0
 8004064:	f04f 0100 	mov.w	r1, #0
 8004068:	0259      	lsls	r1, r3, #9
 800406a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800406e:	0250      	lsls	r0, r2, #9
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4610      	mov	r0, r2
 8004076:	4619      	mov	r1, r3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	461a      	mov	r2, r3
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	f7fc fdb2 	bl	8000be8 <__aeabi_uldivmod>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4613      	mov	r3, r2
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	e04a      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800408e:	4b30      	ldr	r3, [pc, #192]	; (8004150 <HAL_RCC_GetSysClockFreq+0x358>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	099b      	lsrs	r3, r3, #6
 8004094:	461a      	mov	r2, r3
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800409e:	f04f 0100 	mov.w	r1, #0
 80040a2:	ea02 0400 	and.w	r4, r2, r0
 80040a6:	ea03 0501 	and.w	r5, r3, r1
 80040aa:	4620      	mov	r0, r4
 80040ac:	4629      	mov	r1, r5
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	014b      	lsls	r3, r1, #5
 80040b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040bc:	0142      	lsls	r2, r0, #5
 80040be:	4610      	mov	r0, r2
 80040c0:	4619      	mov	r1, r3
 80040c2:	1b00      	subs	r0, r0, r4
 80040c4:	eb61 0105 	sbc.w	r1, r1, r5
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	018b      	lsls	r3, r1, #6
 80040d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040d6:	0182      	lsls	r2, r0, #6
 80040d8:	1a12      	subs	r2, r2, r0
 80040da:	eb63 0301 	sbc.w	r3, r3, r1
 80040de:	f04f 0000 	mov.w	r0, #0
 80040e2:	f04f 0100 	mov.w	r1, #0
 80040e6:	00d9      	lsls	r1, r3, #3
 80040e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040ec:	00d0      	lsls	r0, r2, #3
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	1912      	adds	r2, r2, r4
 80040f4:	eb45 0303 	adc.w	r3, r5, r3
 80040f8:	f04f 0000 	mov.w	r0, #0
 80040fc:	f04f 0100 	mov.w	r1, #0
 8004100:	0299      	lsls	r1, r3, #10
 8004102:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004106:	0290      	lsls	r0, r2, #10
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4610      	mov	r0, r2
 800410e:	4619      	mov	r1, r3
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	461a      	mov	r2, r3
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	f7fc fd66 	bl	8000be8 <__aeabi_uldivmod>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4613      	mov	r3, r2
 8004122:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004124:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <HAL_RCC_GetSysClockFreq+0x358>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	0f1b      	lsrs	r3, r3, #28
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	fbb2 f3f3 	udiv	r3, r2, r3
 8004138:	61bb      	str	r3, [r7, #24]
      break;
 800413a:	e002      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <HAL_RCC_GetSysClockFreq+0x35c>)
 800413e:	61bb      	str	r3, [r7, #24]
      break;
 8004140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004142:	69bb      	ldr	r3, [r7, #24]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3720      	adds	r7, #32
 8004148:	46bd      	mov	sp, r7
 800414a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800
 8004154:	00f42400 	.word	0x00f42400
 8004158:	007a1200 	.word	0x007a1200

0800415c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e28d      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 8083 	beq.w	8004282 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800417c:	4b94      	ldr	r3, [pc, #592]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 030c 	and.w	r3, r3, #12
 8004184:	2b04      	cmp	r3, #4
 8004186:	d019      	beq.n	80041bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004188:	4b91      	ldr	r3, [pc, #580]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004190:	2b08      	cmp	r3, #8
 8004192:	d106      	bne.n	80041a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004194:	4b8e      	ldr	r3, [pc, #568]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a0:	d00c      	beq.n	80041bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041a2:	4b8b      	ldr	r3, [pc, #556]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041aa:	2b0c      	cmp	r3, #12
 80041ac:	d112      	bne.n	80041d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ae:	4b88      	ldr	r3, [pc, #544]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ba:	d10b      	bne.n	80041d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041bc:	4b84      	ldr	r3, [pc, #528]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d05b      	beq.n	8004280 <HAL_RCC_OscConfig+0x124>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d157      	bne.n	8004280 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e25a      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041dc:	d106      	bne.n	80041ec <HAL_RCC_OscConfig+0x90>
 80041de:	4b7c      	ldr	r3, [pc, #496]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a7b      	ldr	r2, [pc, #492]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	e01d      	b.n	8004228 <HAL_RCC_OscConfig+0xcc>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041f4:	d10c      	bne.n	8004210 <HAL_RCC_OscConfig+0xb4>
 80041f6:	4b76      	ldr	r3, [pc, #472]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a75      	ldr	r2, [pc, #468]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	4b73      	ldr	r3, [pc, #460]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a72      	ldr	r2, [pc, #456]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e00b      	b.n	8004228 <HAL_RCC_OscConfig+0xcc>
 8004210:	4b6f      	ldr	r3, [pc, #444]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a6e      	ldr	r2, [pc, #440]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	4b6c      	ldr	r3, [pc, #432]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a6b      	ldr	r2, [pc, #428]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d013      	beq.n	8004258 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fd fea0 	bl	8001f74 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004238:	f7fd fe9c 	bl	8001f74 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	; 0x64
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e21f      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424a:	4b61      	ldr	r3, [pc, #388]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0xdc>
 8004256:	e014      	b.n	8004282 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fd fe8c 	bl	8001f74 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004260:	f7fd fe88 	bl	8001f74 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b64      	cmp	r3, #100	; 0x64
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e20b      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004272:	4b57      	ldr	r3, [pc, #348]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x104>
 800427e:	e000      	b.n	8004282 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d06f      	beq.n	800436e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800428e:	4b50      	ldr	r3, [pc, #320]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b00      	cmp	r3, #0
 8004298:	d017      	beq.n	80042ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800429a:	4b4d      	ldr	r3, [pc, #308]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d105      	bne.n	80042b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042a6:	4b4a      	ldr	r3, [pc, #296]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042b2:	4b47      	ldr	r3, [pc, #284]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042ba:	2b0c      	cmp	r3, #12
 80042bc:	d11c      	bne.n	80042f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042be:	4b44      	ldr	r3, [pc, #272]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d116      	bne.n	80042f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ca:	4b41      	ldr	r3, [pc, #260]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d005      	beq.n	80042e2 <HAL_RCC_OscConfig+0x186>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d001      	beq.n	80042e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e1d3      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e2:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4937      	ldr	r1, [pc, #220]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f6:	e03a      	b.n	800436e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d020      	beq.n	8004342 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004300:	4b34      	ldr	r3, [pc, #208]	; (80043d4 <HAL_RCC_OscConfig+0x278>)
 8004302:	2201      	movs	r2, #1
 8004304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004306:	f7fd fe35 	bl	8001f74 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800430e:	f7fd fe31 	bl	8001f74 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e1b4      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004320:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0f0      	beq.n	800430e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432c:	4b28      	ldr	r3, [pc, #160]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4925      	ldr	r1, [pc, #148]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800433c:	4313      	orrs	r3, r2
 800433e:	600b      	str	r3, [r1, #0]
 8004340:	e015      	b.n	800436e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004342:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <HAL_RCC_OscConfig+0x278>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fd fe14 	bl	8001f74 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004350:	f7fd fe10 	bl	8001f74 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e193      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004362:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d036      	beq.n	80043e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d016      	beq.n	80043b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004382:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004384:	2201      	movs	r2, #1
 8004386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004388:	f7fd fdf4 	bl	8001f74 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004390:	f7fd fdf0 	bl	8001f74 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e173      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a2:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80043a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCC_OscConfig+0x234>
 80043ae:	e01b      	b.n	80043e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b6:	f7fd fddd 	bl	8001f74 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043bc:	e00e      	b.n	80043dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043be:	f7fd fdd9 	bl	8001f74 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d907      	bls.n	80043dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e15c      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
 80043d0:	40023800 	.word	0x40023800
 80043d4:	42470000 	.word	0x42470000
 80043d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043dc:	4b8a      	ldr	r3, [pc, #552]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 80043de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1ea      	bne.n	80043be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8097 	beq.w	8004524 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043f6:	2300      	movs	r3, #0
 80043f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fa:	4b83      	ldr	r3, [pc, #524]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10f      	bne.n	8004426 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	4b7f      	ldr	r3, [pc, #508]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	4a7e      	ldr	r2, [pc, #504]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004414:	6413      	str	r3, [r2, #64]	; 0x40
 8004416:	4b7c      	ldr	r3, [pc, #496]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004426:	4b79      	ldr	r3, [pc, #484]	; (800460c <HAL_RCC_OscConfig+0x4b0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442e:	2b00      	cmp	r3, #0
 8004430:	d118      	bne.n	8004464 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004432:	4b76      	ldr	r3, [pc, #472]	; (800460c <HAL_RCC_OscConfig+0x4b0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a75      	ldr	r2, [pc, #468]	; (800460c <HAL_RCC_OscConfig+0x4b0>)
 8004438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800443e:	f7fd fd99 	bl	8001f74 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004446:	f7fd fd95 	bl	8001f74 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e118      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004458:	4b6c      	ldr	r3, [pc, #432]	; (800460c <HAL_RCC_OscConfig+0x4b0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d106      	bne.n	800447a <HAL_RCC_OscConfig+0x31e>
 800446c:	4b66      	ldr	r3, [pc, #408]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004470:	4a65      	ldr	r2, [pc, #404]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	6713      	str	r3, [r2, #112]	; 0x70
 8004478:	e01c      	b.n	80044b4 <HAL_RCC_OscConfig+0x358>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2b05      	cmp	r3, #5
 8004480:	d10c      	bne.n	800449c <HAL_RCC_OscConfig+0x340>
 8004482:	4b61      	ldr	r3, [pc, #388]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004486:	4a60      	ldr	r2, [pc, #384]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004488:	f043 0304 	orr.w	r3, r3, #4
 800448c:	6713      	str	r3, [r2, #112]	; 0x70
 800448e:	4b5e      	ldr	r3, [pc, #376]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	4a5d      	ldr	r2, [pc, #372]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	6713      	str	r3, [r2, #112]	; 0x70
 800449a:	e00b      	b.n	80044b4 <HAL_RCC_OscConfig+0x358>
 800449c:	4b5a      	ldr	r3, [pc, #360]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a0:	4a59      	ldr	r2, [pc, #356]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	6713      	str	r3, [r2, #112]	; 0x70
 80044a8:	4b57      	ldr	r3, [pc, #348]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	4a56      	ldr	r2, [pc, #344]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 80044ae:	f023 0304 	bic.w	r3, r3, #4
 80044b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d015      	beq.n	80044e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044bc:	f7fd fd5a 	bl	8001f74 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c2:	e00a      	b.n	80044da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c4:	f7fd fd56 	bl	8001f74 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e0d7      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044da:	4b4b      	ldr	r3, [pc, #300]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 80044dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0ee      	beq.n	80044c4 <HAL_RCC_OscConfig+0x368>
 80044e6:	e014      	b.n	8004512 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e8:	f7fd fd44 	bl	8001f74 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f0:	f7fd fd40 	bl	8001f74 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e0c1      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004506:	4b40      	ldr	r3, [pc, #256]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1ee      	bne.n	80044f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004512:	7dfb      	ldrb	r3, [r7, #23]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d105      	bne.n	8004524 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004518:	4b3b      	ldr	r3, [pc, #236]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	4a3a      	ldr	r2, [pc, #232]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 800451e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004522:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80ad 	beq.w	8004688 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800452e:	4b36      	ldr	r3, [pc, #216]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
 8004536:	2b08      	cmp	r3, #8
 8004538:	d060      	beq.n	80045fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d145      	bne.n	80045ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004542:	4b33      	ldr	r3, [pc, #204]	; (8004610 <HAL_RCC_OscConfig+0x4b4>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fd fd14 	bl	8001f74 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004550:	f7fd fd10 	bl	8001f74 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e093      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004562:	4b29      	ldr	r3, [pc, #164]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69da      	ldr	r2, [r3, #28]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	019b      	lsls	r3, r3, #6
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004584:	085b      	lsrs	r3, r3, #1
 8004586:	3b01      	subs	r3, #1
 8004588:	041b      	lsls	r3, r3, #16
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	061b      	lsls	r3, r3, #24
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	071b      	lsls	r3, r3, #28
 800459a:	491b      	ldr	r1, [pc, #108]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 800459c:	4313      	orrs	r3, r2
 800459e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a0:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <HAL_RCC_OscConfig+0x4b4>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fd fce5 	bl	8001f74 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ae:	f7fd fce1 	bl	8001f74 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e064      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c0:	4b11      	ldr	r3, [pc, #68]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0x452>
 80045cc:	e05c      	b.n	8004688 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ce:	4b10      	ldr	r3, [pc, #64]	; (8004610 <HAL_RCC_OscConfig+0x4b4>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fd fcce 	bl	8001f74 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045dc:	f7fd fcca 	bl	8001f74 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e04d      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ee:	4b06      	ldr	r3, [pc, #24]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x480>
 80045fa:	e045      	b.n	8004688 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d107      	bne.n	8004614 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e040      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
 8004608:	40023800 	.word	0x40023800
 800460c:	40007000 	.word	0x40007000
 8004610:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004614:	4b1f      	ldr	r3, [pc, #124]	; (8004694 <HAL_RCC_OscConfig+0x538>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d030      	beq.n	8004684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462c:	429a      	cmp	r2, r3
 800462e:	d129      	bne.n	8004684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d122      	bne.n	8004684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004644:	4013      	ands	r3, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800464a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800464c:	4293      	cmp	r3, r2
 800464e:	d119      	bne.n	8004684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	085b      	lsrs	r3, r3, #1
 800465c:	3b01      	subs	r3, #1
 800465e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d10f      	bne.n	8004684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d107      	bne.n	8004684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40023800 	.word	0x40023800

08004698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e041      	b.n	800472e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fd f9be 	bl	8001a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3304      	adds	r3, #4
 80046d4:	4619      	mov	r1, r3
 80046d6:	4610      	mov	r0, r2
 80046d8:	f000 f9ce 	bl	8004a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d001      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e04e      	b.n	80047ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a23      	ldr	r2, [pc, #140]	; (80047fc <HAL_TIM_Base_Start_IT+0xc4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d022      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0x80>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477a:	d01d      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0x80>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1f      	ldr	r2, [pc, #124]	; (8004800 <HAL_TIM_Base_Start_IT+0xc8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d018      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0x80>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1e      	ldr	r2, [pc, #120]	; (8004804 <HAL_TIM_Base_Start_IT+0xcc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d013      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0x80>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a1c      	ldr	r2, [pc, #112]	; (8004808 <HAL_TIM_Base_Start_IT+0xd0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00e      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0x80>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1b      	ldr	r2, [pc, #108]	; (800480c <HAL_TIM_Base_Start_IT+0xd4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d009      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0x80>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a19      	ldr	r2, [pc, #100]	; (8004810 <HAL_TIM_Base_Start_IT+0xd8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d004      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0x80>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a18      	ldr	r2, [pc, #96]	; (8004814 <HAL_TIM_Base_Start_IT+0xdc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d111      	bne.n	80047dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b06      	cmp	r3, #6
 80047c8:	d010      	beq.n	80047ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0201 	orr.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047da:	e007      	b.n	80047ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40010000 	.word	0x40010000
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800
 8004808:	40000c00 	.word	0x40000c00
 800480c:	40010400 	.word	0x40010400
 8004810:	40014000 	.word	0x40014000
 8004814:	40001800 	.word	0x40001800

08004818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b02      	cmp	r3, #2
 800482c:	d122      	bne.n	8004874 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b02      	cmp	r3, #2
 800483a:	d11b      	bne.n	8004874 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0202 	mvn.w	r2, #2
 8004844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f8ee 	bl	8004a3c <HAL_TIM_IC_CaptureCallback>
 8004860:	e005      	b.n	800486e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f8e0 	bl	8004a28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f8f1 	bl	8004a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b04      	cmp	r3, #4
 8004880:	d122      	bne.n	80048c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b04      	cmp	r3, #4
 800488e:	d11b      	bne.n	80048c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0204 	mvn.w	r2, #4
 8004898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2202      	movs	r2, #2
 800489e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f8c4 	bl	8004a3c <HAL_TIM_IC_CaptureCallback>
 80048b4:	e005      	b.n	80048c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f8b6 	bl	8004a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f8c7 	bl	8004a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d122      	bne.n	800491c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d11b      	bne.n	800491c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0208 	mvn.w	r2, #8
 80048ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2204      	movs	r2, #4
 80048f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f89a 	bl	8004a3c <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f88c 	bl	8004a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f89d 	bl	8004a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0310 	and.w	r3, r3, #16
 8004926:	2b10      	cmp	r3, #16
 8004928:	d122      	bne.n	8004970 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b10      	cmp	r3, #16
 8004936:	d11b      	bne.n	8004970 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0210 	mvn.w	r2, #16
 8004940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2208      	movs	r2, #8
 8004946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f870 	bl	8004a3c <HAL_TIM_IC_CaptureCallback>
 800495c:	e005      	b.n	800496a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f862 	bl	8004a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f873 	bl	8004a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b01      	cmp	r3, #1
 800497c:	d10e      	bne.n	800499c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b01      	cmp	r3, #1
 800498a:	d107      	bne.n	800499c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0201 	mvn.w	r2, #1
 8004994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fc ff04 	bl	80017a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a6:	2b80      	cmp	r3, #128	; 0x80
 80049a8:	d10e      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b4:	2b80      	cmp	r3, #128	; 0x80
 80049b6:	d107      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f97e 	bl	8004cc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	2b40      	cmp	r3, #64	; 0x40
 80049d4:	d10e      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e0:	2b40      	cmp	r3, #64	; 0x40
 80049e2:	d107      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f838 	bl	8004a64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d10e      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d107      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0220 	mvn.w	r2, #32
 8004a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f948 	bl	8004cb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a40      	ldr	r2, [pc, #256]	; (8004b8c <TIM_Base_SetConfig+0x114>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d013      	beq.n	8004ab8 <TIM_Base_SetConfig+0x40>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a96:	d00f      	beq.n	8004ab8 <TIM_Base_SetConfig+0x40>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a3d      	ldr	r2, [pc, #244]	; (8004b90 <TIM_Base_SetConfig+0x118>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00b      	beq.n	8004ab8 <TIM_Base_SetConfig+0x40>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a3c      	ldr	r2, [pc, #240]	; (8004b94 <TIM_Base_SetConfig+0x11c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d007      	beq.n	8004ab8 <TIM_Base_SetConfig+0x40>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a3b      	ldr	r2, [pc, #236]	; (8004b98 <TIM_Base_SetConfig+0x120>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d003      	beq.n	8004ab8 <TIM_Base_SetConfig+0x40>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a3a      	ldr	r2, [pc, #232]	; (8004b9c <TIM_Base_SetConfig+0x124>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d108      	bne.n	8004aca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a2f      	ldr	r2, [pc, #188]	; (8004b8c <TIM_Base_SetConfig+0x114>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d02b      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad8:	d027      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a2c      	ldr	r2, [pc, #176]	; (8004b90 <TIM_Base_SetConfig+0x118>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d023      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a2b      	ldr	r2, [pc, #172]	; (8004b94 <TIM_Base_SetConfig+0x11c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d01f      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a2a      	ldr	r2, [pc, #168]	; (8004b98 <TIM_Base_SetConfig+0x120>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d01b      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a29      	ldr	r2, [pc, #164]	; (8004b9c <TIM_Base_SetConfig+0x124>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d017      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a28      	ldr	r2, [pc, #160]	; (8004ba0 <TIM_Base_SetConfig+0x128>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a27      	ldr	r2, [pc, #156]	; (8004ba4 <TIM_Base_SetConfig+0x12c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00f      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a26      	ldr	r2, [pc, #152]	; (8004ba8 <TIM_Base_SetConfig+0x130>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00b      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a25      	ldr	r2, [pc, #148]	; (8004bac <TIM_Base_SetConfig+0x134>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d007      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a24      	ldr	r2, [pc, #144]	; (8004bb0 <TIM_Base_SetConfig+0x138>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d003      	beq.n	8004b2a <TIM_Base_SetConfig+0xb2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a23      	ldr	r2, [pc, #140]	; (8004bb4 <TIM_Base_SetConfig+0x13c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d108      	bne.n	8004b3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a0a      	ldr	r2, [pc, #40]	; (8004b8c <TIM_Base_SetConfig+0x114>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d003      	beq.n	8004b70 <TIM_Base_SetConfig+0xf8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a0c      	ldr	r2, [pc, #48]	; (8004b9c <TIM_Base_SetConfig+0x124>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d103      	bne.n	8004b78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	615a      	str	r2, [r3, #20]
}
 8004b7e:	bf00      	nop
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	40000400 	.word	0x40000400
 8004b94:	40000800 	.word	0x40000800
 8004b98:	40000c00 	.word	0x40000c00
 8004b9c:	40010400 	.word	0x40010400
 8004ba0:	40014000 	.word	0x40014000
 8004ba4:	40014400 	.word	0x40014400
 8004ba8:	40014800 	.word	0x40014800
 8004bac:	40001800 	.word	0x40001800
 8004bb0:	40001c00 	.word	0x40001c00
 8004bb4:	40002000 	.word	0x40002000

08004bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e05a      	b.n	8004c86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a21      	ldr	r2, [pc, #132]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d022      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1c:	d01d      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a1d      	ldr	r2, [pc, #116]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d018      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1b      	ldr	r2, [pc, #108]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d013      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1a      	ldr	r2, [pc, #104]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00e      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d009      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d004      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a15      	ldr	r2, [pc, #84]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d10c      	bne.n	8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800
 8004ca0:	40000c00 	.word	0x40000c00
 8004ca4:	40010400 	.word	0x40010400
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40001800 	.word	0x40001800

08004cb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e03f      	b.n	8004d6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fc ff00 	bl	8001b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2224      	movs	r2, #36	; 0x24
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fc1b 	bl	8005558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695a      	ldr	r2, [r3, #20]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b08a      	sub	sp, #40	; 0x28
 8004d76:	af02      	add	r7, sp, #8
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	603b      	str	r3, [r7, #0]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d17c      	bne.n	8004e8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <HAL_UART_Transmit+0x2c>
 8004d98:	88fb      	ldrh	r3, [r7, #6]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e075      	b.n	8004e8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_UART_Transmit+0x3e>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e06e      	b.n	8004e8e <HAL_UART_Transmit+0x11c>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2221      	movs	r2, #33	; 0x21
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dc6:	f7fd f8d5 	bl	8001f74 <HAL_GetTick>
 8004dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	88fa      	ldrh	r2, [r7, #6]
 8004dd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	88fa      	ldrh	r2, [r7, #6]
 8004dd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de0:	d108      	bne.n	8004df4 <HAL_UART_Transmit+0x82>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d104      	bne.n	8004df4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	e003      	b.n	8004dfc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e04:	e02a      	b.n	8004e5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2180      	movs	r1, #128	; 0x80
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 fa17 	bl	8005244 <UART_WaitOnFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e036      	b.n	8004e8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10b      	bne.n	8004e3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	3302      	adds	r3, #2
 8004e3a:	61bb      	str	r3, [r7, #24]
 8004e3c:	e007      	b.n	8004e4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	781a      	ldrb	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1cf      	bne.n	8004e06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2140      	movs	r1, #64	; 0x40
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f9e7 	bl	8005244 <UART_WaitOnFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e006      	b.n	8004e8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e000      	b.n	8004e8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
  }
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	; 0x28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10d      	bne.n	8004eea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d008      	beq.n	8004eea <HAL_UART_IRQHandler+0x52>
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 faa1 	bl	800542a <UART_Receive_IT>
      return;
 8004ee8:	e17c      	b.n	80051e4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80b1 	beq.w	8005054 <HAL_UART_IRQHandler+0x1bc>
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d105      	bne.n	8004f08 <HAL_UART_IRQHandler+0x70>
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 80a6 	beq.w	8005054 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <HAL_UART_IRQHandler+0x90>
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	f043 0201 	orr.w	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <HAL_UART_IRQHandler+0xb0>
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	f043 0202 	orr.w	r2, r3, #2
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_UART_IRQHandler+0xd0>
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	f043 0204 	orr.w	r2, r3, #4
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00f      	beq.n	8004f92 <HAL_UART_IRQHandler+0xfa>
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	f003 0320 	and.w	r3, r3, #32
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d104      	bne.n	8004f86 <HAL_UART_IRQHandler+0xee>
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	f043 0208 	orr.w	r2, r3, #8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 811f 	beq.w	80051da <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d007      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x11e>
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fa3a 	bl	800542a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d102      	bne.n	8004fde <HAL_UART_IRQHandler+0x146>
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d031      	beq.n	8005042 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f97a 	bl	80052d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d123      	bne.n	800503a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695a      	ldr	r2, [r3, #20]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005000:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	2b00      	cmp	r3, #0
 8005008:	d013      	beq.n	8005032 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	4a77      	ldr	r2, [pc, #476]	; (80051ec <HAL_UART_IRQHandler+0x354>)
 8005010:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	4618      	mov	r0, r3
 8005018:	f7fd fe57 	bl	8002cca <HAL_DMA_Abort_IT>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d016      	beq.n	8005050 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800502c:	4610      	mov	r0, r2
 800502e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005030:	e00e      	b.n	8005050 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f8f0 	bl	8005218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005038:	e00a      	b.n	8005050 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f8ec 	bl	8005218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005040:	e006      	b.n	8005050 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f8e8 	bl	8005218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800504e:	e0c4      	b.n	80051da <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005050:	bf00      	nop
    return;
 8005052:	e0c2      	b.n	80051da <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	2b01      	cmp	r3, #1
 800505a:	f040 80a2 	bne.w	80051a2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 809c 	beq.w	80051a2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 8096 	beq.w	80051a2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b40      	cmp	r3, #64	; 0x40
 8005098:	d14f      	bne.n	800513a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80050a4:	8a3b      	ldrh	r3, [r7, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8099 	beq.w	80051de <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050b0:	8a3a      	ldrh	r2, [r7, #16]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	f080 8093 	bcs.w	80051de <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	8a3a      	ldrh	r2, [r7, #16]
 80050bc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c8:	d02b      	beq.n	8005122 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050d8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695a      	ldr	r2, [r3, #20]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0201 	bic.w	r2, r2, #1
 80050e8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695a      	ldr	r2, [r3, #20]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0210 	bic.w	r2, r2, #16
 8005116:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511c:	4618      	mov	r0, r3
 800511e:	f7fd fd64 	bl	8002bea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800512a:	b29b      	uxth	r3, r3
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	b29b      	uxth	r3, r3
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f87a 	bl	800522c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005138:	e051      	b.n	80051de <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005142:	b29b      	uxth	r3, r3
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d047      	beq.n	80051e2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005152:	8a7b      	ldrh	r3, [r7, #18]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d044      	beq.n	80051e2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005166:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695a      	ldr	r2, [r3, #20]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0210 	bic.w	r2, r2, #16
 8005194:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005196:	8a7b      	ldrh	r3, [r7, #18]
 8005198:	4619      	mov	r1, r3
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f846 	bl	800522c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80051a0:	e01f      	b.n	80051e2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d008      	beq.n	80051be <HAL_UART_IRQHandler+0x326>
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f8cf 	bl	800535a <UART_Transmit_IT>
    return;
 80051bc:	e012      	b.n	80051e4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00d      	beq.n	80051e4 <HAL_UART_IRQHandler+0x34c>
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d008      	beq.n	80051e4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f911 	bl	80053fa <UART_EndTransmit_IT>
    return;
 80051d8:	e004      	b.n	80051e4 <HAL_UART_IRQHandler+0x34c>
    return;
 80051da:	bf00      	nop
 80051dc:	e002      	b.n	80051e4 <HAL_UART_IRQHandler+0x34c>
      return;
 80051de:	bf00      	nop
 80051e0:	e000      	b.n	80051e4 <HAL_UART_IRQHandler+0x34c>
      return;
 80051e2:	bf00      	nop
  }
}
 80051e4:	3728      	adds	r7, #40	; 0x28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	08005333 	.word	0x08005333

080051f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	460b      	mov	r3, r1
 8005236:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	4613      	mov	r3, r2
 8005252:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005254:	e02c      	b.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d028      	beq.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d007      	beq.n	8005274 <UART_WaitOnFlagUntilTimeout+0x30>
 8005264:	f7fc fe86 	bl	8001f74 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	429a      	cmp	r2, r3
 8005272:	d21d      	bcs.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005282:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695a      	ldr	r2, [r3, #20]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0201 	bic.w	r2, r2, #1
 8005292:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e00f      	b.n	80052d0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	4013      	ands	r3, r2
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	429a      	cmp	r2, r3
 80052be:	bf0c      	ite	eq
 80052c0:	2301      	moveq	r3, #1
 80052c2:	2300      	movne	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	79fb      	ldrb	r3, [r7, #7]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d0c3      	beq.n	8005256 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695a      	ldr	r2, [r3, #20]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	2b01      	cmp	r3, #1
 8005306:	d107      	bne.n	8005318 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0210 	bic.w	r2, r2, #16
 8005316:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f7ff ff63 	bl	8005218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005352:	bf00      	nop
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b21      	cmp	r3, #33	; 0x21
 800536c:	d13e      	bne.n	80053ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005376:	d114      	bne.n	80053a2 <UART_Transmit_IT+0x48>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d110      	bne.n	80053a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005394:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	1c9a      	adds	r2, r3, #2
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	621a      	str	r2, [r3, #32]
 80053a0:	e008      	b.n	80053b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	1c59      	adds	r1, r3, #1
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6211      	str	r1, [r2, #32]
 80053ac:	781a      	ldrb	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b29b      	uxth	r3, r3
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	4619      	mov	r1, r3
 80053c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10f      	bne.n	80053e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	e000      	b.n	80053ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053ec:	2302      	movs	r3, #2
  }
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005410:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff fee8 	bl	80051f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b22      	cmp	r3, #34	; 0x22
 800543c:	f040 8087 	bne.w	800554e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005448:	d117      	bne.n	800547a <UART_Receive_IT+0x50>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d113      	bne.n	800547a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	b29b      	uxth	r3, r3
 8005464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005468:	b29a      	uxth	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005472:	1c9a      	adds	r2, r3, #2
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	629a      	str	r2, [r3, #40]	; 0x28
 8005478:	e026      	b.n	80054c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005480:	2300      	movs	r3, #0
 8005482:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548c:	d007      	beq.n	800549e <UART_Receive_IT+0x74>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10a      	bne.n	80054ac <UART_Receive_IT+0x82>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	e008      	b.n	80054be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	4619      	mov	r1, r3
 80054d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d136      	bne.n	800554a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0220 	bic.w	r2, r2, #32
 80054ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695a      	ldr	r2, [r3, #20]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0201 	bic.w	r2, r2, #1
 800550a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005518:	2b01      	cmp	r3, #1
 800551a:	d10e      	bne.n	800553a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0210 	bic.w	r2, r2, #16
 800552a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff fe7a 	bl	800522c <HAL_UARTEx_RxEventCallback>
 8005538:	e002      	b.n	8005540 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff fe62 	bl	8005204 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	e002      	b.n	8005550 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	e000      	b.n	8005550 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800554e:	2302      	movs	r3, #2
  }
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555c:	b09f      	sub	sp, #124	; 0x7c
 800555e:	af00      	add	r7, sp, #0
 8005560:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800556c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556e:	68d9      	ldr	r1, [r3, #12]
 8005570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	ea40 0301 	orr.w	r3, r0, r1
 8005578:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800557a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	431a      	orrs	r2, r3
 8005584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	431a      	orrs	r2, r3
 800558a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	4313      	orrs	r3, r2
 8005590:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800559c:	f021 010c 	bic.w	r1, r1, #12
 80055a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055a6:	430b      	orrs	r3, r1
 80055a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b6:	6999      	ldr	r1, [r3, #24]
 80055b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	ea40 0301 	orr.w	r3, r0, r1
 80055c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4bc5      	ldr	r3, [pc, #788]	; (80058dc <UART_SetConfig+0x384>)
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d004      	beq.n	80055d6 <UART_SetConfig+0x7e>
 80055cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	4bc3      	ldr	r3, [pc, #780]	; (80058e0 <UART_SetConfig+0x388>)
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d103      	bne.n	80055de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055d6:	f7fe fbfb 	bl	8003dd0 <HAL_RCC_GetPCLK2Freq>
 80055da:	6778      	str	r0, [r7, #116]	; 0x74
 80055dc:	e002      	b.n	80055e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055de:	f7fe fbe3 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 80055e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ec:	f040 80b6 	bne.w	800575c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f2:	461c      	mov	r4, r3
 80055f4:	f04f 0500 	mov.w	r5, #0
 80055f8:	4622      	mov	r2, r4
 80055fa:	462b      	mov	r3, r5
 80055fc:	1891      	adds	r1, r2, r2
 80055fe:	6439      	str	r1, [r7, #64]	; 0x40
 8005600:	415b      	adcs	r3, r3
 8005602:	647b      	str	r3, [r7, #68]	; 0x44
 8005604:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005608:	1912      	adds	r2, r2, r4
 800560a:	eb45 0303 	adc.w	r3, r5, r3
 800560e:	f04f 0000 	mov.w	r0, #0
 8005612:	f04f 0100 	mov.w	r1, #0
 8005616:	00d9      	lsls	r1, r3, #3
 8005618:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800561c:	00d0      	lsls	r0, r2, #3
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	1911      	adds	r1, r2, r4
 8005624:	6639      	str	r1, [r7, #96]	; 0x60
 8005626:	416b      	adcs	r3, r5
 8005628:	667b      	str	r3, [r7, #100]	; 0x64
 800562a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	461a      	mov	r2, r3
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	1891      	adds	r1, r2, r2
 8005636:	63b9      	str	r1, [r7, #56]	; 0x38
 8005638:	415b      	adcs	r3, r3
 800563a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800563c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005640:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005644:	f7fb fad0 	bl	8000be8 <__aeabi_uldivmod>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4ba5      	ldr	r3, [pc, #660]	; (80058e4 <UART_SetConfig+0x38c>)
 800564e:	fba3 2302 	umull	r2, r3, r3, r2
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	011e      	lsls	r6, r3, #4
 8005656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005658:	461c      	mov	r4, r3
 800565a:	f04f 0500 	mov.w	r5, #0
 800565e:	4622      	mov	r2, r4
 8005660:	462b      	mov	r3, r5
 8005662:	1891      	adds	r1, r2, r2
 8005664:	6339      	str	r1, [r7, #48]	; 0x30
 8005666:	415b      	adcs	r3, r3
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
 800566a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800566e:	1912      	adds	r2, r2, r4
 8005670:	eb45 0303 	adc.w	r3, r5, r3
 8005674:	f04f 0000 	mov.w	r0, #0
 8005678:	f04f 0100 	mov.w	r1, #0
 800567c:	00d9      	lsls	r1, r3, #3
 800567e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005682:	00d0      	lsls	r0, r2, #3
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	1911      	adds	r1, r2, r4
 800568a:	65b9      	str	r1, [r7, #88]	; 0x58
 800568c:	416b      	adcs	r3, r5
 800568e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	461a      	mov	r2, r3
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	1891      	adds	r1, r2, r2
 800569c:	62b9      	str	r1, [r7, #40]	; 0x28
 800569e:	415b      	adcs	r3, r3
 80056a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80056aa:	f7fb fa9d 	bl	8000be8 <__aeabi_uldivmod>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4b8c      	ldr	r3, [pc, #560]	; (80058e4 <UART_SetConfig+0x38c>)
 80056b4:	fba3 1302 	umull	r1, r3, r3, r2
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	2164      	movs	r1, #100	; 0x64
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	3332      	adds	r3, #50	; 0x32
 80056c6:	4a87      	ldr	r2, [pc, #540]	; (80058e4 <UART_SetConfig+0x38c>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056d4:	441e      	add	r6, r3
 80056d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056d8:	4618      	mov	r0, r3
 80056da:	f04f 0100 	mov.w	r1, #0
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	1894      	adds	r4, r2, r2
 80056e4:	623c      	str	r4, [r7, #32]
 80056e6:	415b      	adcs	r3, r3
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056ee:	1812      	adds	r2, r2, r0
 80056f0:	eb41 0303 	adc.w	r3, r1, r3
 80056f4:	f04f 0400 	mov.w	r4, #0
 80056f8:	f04f 0500 	mov.w	r5, #0
 80056fc:	00dd      	lsls	r5, r3, #3
 80056fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005702:	00d4      	lsls	r4, r2, #3
 8005704:	4622      	mov	r2, r4
 8005706:	462b      	mov	r3, r5
 8005708:	1814      	adds	r4, r2, r0
 800570a:	653c      	str	r4, [r7, #80]	; 0x50
 800570c:	414b      	adcs	r3, r1
 800570e:	657b      	str	r3, [r7, #84]	; 0x54
 8005710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	461a      	mov	r2, r3
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	1891      	adds	r1, r2, r2
 800571c:	61b9      	str	r1, [r7, #24]
 800571e:	415b      	adcs	r3, r3
 8005720:	61fb      	str	r3, [r7, #28]
 8005722:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005726:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800572a:	f7fb fa5d 	bl	8000be8 <__aeabi_uldivmod>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4b6c      	ldr	r3, [pc, #432]	; (80058e4 <UART_SetConfig+0x38c>)
 8005734:	fba3 1302 	umull	r1, r3, r3, r2
 8005738:	095b      	lsrs	r3, r3, #5
 800573a:	2164      	movs	r1, #100	; 0x64
 800573c:	fb01 f303 	mul.w	r3, r1, r3
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	3332      	adds	r3, #50	; 0x32
 8005746:	4a67      	ldr	r2, [pc, #412]	; (80058e4 <UART_SetConfig+0x38c>)
 8005748:	fba2 2303 	umull	r2, r3, r2, r3
 800574c:	095b      	lsrs	r3, r3, #5
 800574e:	f003 0207 	and.w	r2, r3, #7
 8005752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4432      	add	r2, r6
 8005758:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800575a:	e0b9      	b.n	80058d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800575c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800575e:	461c      	mov	r4, r3
 8005760:	f04f 0500 	mov.w	r5, #0
 8005764:	4622      	mov	r2, r4
 8005766:	462b      	mov	r3, r5
 8005768:	1891      	adds	r1, r2, r2
 800576a:	6139      	str	r1, [r7, #16]
 800576c:	415b      	adcs	r3, r3
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005774:	1912      	adds	r2, r2, r4
 8005776:	eb45 0303 	adc.w	r3, r5, r3
 800577a:	f04f 0000 	mov.w	r0, #0
 800577e:	f04f 0100 	mov.w	r1, #0
 8005782:	00d9      	lsls	r1, r3, #3
 8005784:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005788:	00d0      	lsls	r0, r2, #3
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	eb12 0804 	adds.w	r8, r2, r4
 8005792:	eb43 0905 	adc.w	r9, r3, r5
 8005796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	4618      	mov	r0, r3
 800579c:	f04f 0100 	mov.w	r1, #0
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	008b      	lsls	r3, r1, #2
 80057aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057ae:	0082      	lsls	r2, r0, #2
 80057b0:	4640      	mov	r0, r8
 80057b2:	4649      	mov	r1, r9
 80057b4:	f7fb fa18 	bl	8000be8 <__aeabi_uldivmod>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4b49      	ldr	r3, [pc, #292]	; (80058e4 <UART_SetConfig+0x38c>)
 80057be:	fba3 2302 	umull	r2, r3, r3, r2
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	011e      	lsls	r6, r3, #4
 80057c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057c8:	4618      	mov	r0, r3
 80057ca:	f04f 0100 	mov.w	r1, #0
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	1894      	adds	r4, r2, r2
 80057d4:	60bc      	str	r4, [r7, #8]
 80057d6:	415b      	adcs	r3, r3
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057de:	1812      	adds	r2, r2, r0
 80057e0:	eb41 0303 	adc.w	r3, r1, r3
 80057e4:	f04f 0400 	mov.w	r4, #0
 80057e8:	f04f 0500 	mov.w	r5, #0
 80057ec:	00dd      	lsls	r5, r3, #3
 80057ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80057f2:	00d4      	lsls	r4, r2, #3
 80057f4:	4622      	mov	r2, r4
 80057f6:	462b      	mov	r3, r5
 80057f8:	1814      	adds	r4, r2, r0
 80057fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80057fc:	414b      	adcs	r3, r1
 80057fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	4618      	mov	r0, r3
 8005806:	f04f 0100 	mov.w	r1, #0
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	008b      	lsls	r3, r1, #2
 8005814:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005818:	0082      	lsls	r2, r0, #2
 800581a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800581e:	f7fb f9e3 	bl	8000be8 <__aeabi_uldivmod>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4b2f      	ldr	r3, [pc, #188]	; (80058e4 <UART_SetConfig+0x38c>)
 8005828:	fba3 1302 	umull	r1, r3, r3, r2
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	2164      	movs	r1, #100	; 0x64
 8005830:	fb01 f303 	mul.w	r3, r1, r3
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	3332      	adds	r3, #50	; 0x32
 800583a:	4a2a      	ldr	r2, [pc, #168]	; (80058e4 <UART_SetConfig+0x38c>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005846:	441e      	add	r6, r3
 8005848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800584a:	4618      	mov	r0, r3
 800584c:	f04f 0100 	mov.w	r1, #0
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	1894      	adds	r4, r2, r2
 8005856:	603c      	str	r4, [r7, #0]
 8005858:	415b      	adcs	r3, r3
 800585a:	607b      	str	r3, [r7, #4]
 800585c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005860:	1812      	adds	r2, r2, r0
 8005862:	eb41 0303 	adc.w	r3, r1, r3
 8005866:	f04f 0400 	mov.w	r4, #0
 800586a:	f04f 0500 	mov.w	r5, #0
 800586e:	00dd      	lsls	r5, r3, #3
 8005870:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005874:	00d4      	lsls	r4, r2, #3
 8005876:	4622      	mov	r2, r4
 8005878:	462b      	mov	r3, r5
 800587a:	eb12 0a00 	adds.w	sl, r2, r0
 800587e:	eb43 0b01 	adc.w	fp, r3, r1
 8005882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	4618      	mov	r0, r3
 8005888:	f04f 0100 	mov.w	r1, #0
 800588c:	f04f 0200 	mov.w	r2, #0
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	008b      	lsls	r3, r1, #2
 8005896:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800589a:	0082      	lsls	r2, r0, #2
 800589c:	4650      	mov	r0, sl
 800589e:	4659      	mov	r1, fp
 80058a0:	f7fb f9a2 	bl	8000be8 <__aeabi_uldivmod>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4b0e      	ldr	r3, [pc, #56]	; (80058e4 <UART_SetConfig+0x38c>)
 80058aa:	fba3 1302 	umull	r1, r3, r3, r2
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	2164      	movs	r1, #100	; 0x64
 80058b2:	fb01 f303 	mul.w	r3, r1, r3
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	3332      	adds	r3, #50	; 0x32
 80058bc:	4a09      	ldr	r2, [pc, #36]	; (80058e4 <UART_SetConfig+0x38c>)
 80058be:	fba2 2303 	umull	r2, r3, r2, r3
 80058c2:	095b      	lsrs	r3, r3, #5
 80058c4:	f003 020f 	and.w	r2, r3, #15
 80058c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4432      	add	r2, r6
 80058ce:	609a      	str	r2, [r3, #8]
}
 80058d0:	bf00      	nop
 80058d2:	377c      	adds	r7, #124	; 0x7c
 80058d4:	46bd      	mov	sp, r7
 80058d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058da:	bf00      	nop
 80058dc:	40011000 	.word	0x40011000
 80058e0:	40011400 	.word	0x40011400
 80058e4:	51eb851f 	.word	0x51eb851f

080058e8 <__errno>:
 80058e8:	4b01      	ldr	r3, [pc, #4]	; (80058f0 <__errno+0x8>)
 80058ea:	6818      	ldr	r0, [r3, #0]
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	20000010 	.word	0x20000010

080058f4 <__libc_init_array>:
 80058f4:	b570      	push	{r4, r5, r6, lr}
 80058f6:	4d0d      	ldr	r5, [pc, #52]	; (800592c <__libc_init_array+0x38>)
 80058f8:	4c0d      	ldr	r4, [pc, #52]	; (8005930 <__libc_init_array+0x3c>)
 80058fa:	1b64      	subs	r4, r4, r5
 80058fc:	10a4      	asrs	r4, r4, #2
 80058fe:	2600      	movs	r6, #0
 8005900:	42a6      	cmp	r6, r4
 8005902:	d109      	bne.n	8005918 <__libc_init_array+0x24>
 8005904:	4d0b      	ldr	r5, [pc, #44]	; (8005934 <__libc_init_array+0x40>)
 8005906:	4c0c      	ldr	r4, [pc, #48]	; (8005938 <__libc_init_array+0x44>)
 8005908:	f002 fed4 	bl	80086b4 <_init>
 800590c:	1b64      	subs	r4, r4, r5
 800590e:	10a4      	asrs	r4, r4, #2
 8005910:	2600      	movs	r6, #0
 8005912:	42a6      	cmp	r6, r4
 8005914:	d105      	bne.n	8005922 <__libc_init_array+0x2e>
 8005916:	bd70      	pop	{r4, r5, r6, pc}
 8005918:	f855 3b04 	ldr.w	r3, [r5], #4
 800591c:	4798      	blx	r3
 800591e:	3601      	adds	r6, #1
 8005920:	e7ee      	b.n	8005900 <__libc_init_array+0xc>
 8005922:	f855 3b04 	ldr.w	r3, [r5], #4
 8005926:	4798      	blx	r3
 8005928:	3601      	adds	r6, #1
 800592a:	e7f2      	b.n	8005912 <__libc_init_array+0x1e>
 800592c:	08008b24 	.word	0x08008b24
 8005930:	08008b24 	.word	0x08008b24
 8005934:	08008b24 	.word	0x08008b24
 8005938:	08008b28 	.word	0x08008b28

0800593c <memset>:
 800593c:	4402      	add	r2, r0
 800593e:	4603      	mov	r3, r0
 8005940:	4293      	cmp	r3, r2
 8005942:	d100      	bne.n	8005946 <memset+0xa>
 8005944:	4770      	bx	lr
 8005946:	f803 1b01 	strb.w	r1, [r3], #1
 800594a:	e7f9      	b.n	8005940 <memset+0x4>

0800594c <__cvt>:
 800594c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005950:	ec55 4b10 	vmov	r4, r5, d0
 8005954:	2d00      	cmp	r5, #0
 8005956:	460e      	mov	r6, r1
 8005958:	4619      	mov	r1, r3
 800595a:	462b      	mov	r3, r5
 800595c:	bfbb      	ittet	lt
 800595e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005962:	461d      	movlt	r5, r3
 8005964:	2300      	movge	r3, #0
 8005966:	232d      	movlt	r3, #45	; 0x2d
 8005968:	700b      	strb	r3, [r1, #0]
 800596a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800596c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005970:	4691      	mov	r9, r2
 8005972:	f023 0820 	bic.w	r8, r3, #32
 8005976:	bfbc      	itt	lt
 8005978:	4622      	movlt	r2, r4
 800597a:	4614      	movlt	r4, r2
 800597c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005980:	d005      	beq.n	800598e <__cvt+0x42>
 8005982:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005986:	d100      	bne.n	800598a <__cvt+0x3e>
 8005988:	3601      	adds	r6, #1
 800598a:	2102      	movs	r1, #2
 800598c:	e000      	b.n	8005990 <__cvt+0x44>
 800598e:	2103      	movs	r1, #3
 8005990:	ab03      	add	r3, sp, #12
 8005992:	9301      	str	r3, [sp, #4]
 8005994:	ab02      	add	r3, sp, #8
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	ec45 4b10 	vmov	d0, r4, r5
 800599c:	4653      	mov	r3, sl
 800599e:	4632      	mov	r2, r6
 80059a0:	f000 fd0a 	bl	80063b8 <_dtoa_r>
 80059a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059a8:	4607      	mov	r7, r0
 80059aa:	d102      	bne.n	80059b2 <__cvt+0x66>
 80059ac:	f019 0f01 	tst.w	r9, #1
 80059b0:	d022      	beq.n	80059f8 <__cvt+0xac>
 80059b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059b6:	eb07 0906 	add.w	r9, r7, r6
 80059ba:	d110      	bne.n	80059de <__cvt+0x92>
 80059bc:	783b      	ldrb	r3, [r7, #0]
 80059be:	2b30      	cmp	r3, #48	; 0x30
 80059c0:	d10a      	bne.n	80059d8 <__cvt+0x8c>
 80059c2:	2200      	movs	r2, #0
 80059c4:	2300      	movs	r3, #0
 80059c6:	4620      	mov	r0, r4
 80059c8:	4629      	mov	r1, r5
 80059ca:	f7fb f89d 	bl	8000b08 <__aeabi_dcmpeq>
 80059ce:	b918      	cbnz	r0, 80059d8 <__cvt+0x8c>
 80059d0:	f1c6 0601 	rsb	r6, r6, #1
 80059d4:	f8ca 6000 	str.w	r6, [sl]
 80059d8:	f8da 3000 	ldr.w	r3, [sl]
 80059dc:	4499      	add	r9, r3
 80059de:	2200      	movs	r2, #0
 80059e0:	2300      	movs	r3, #0
 80059e2:	4620      	mov	r0, r4
 80059e4:	4629      	mov	r1, r5
 80059e6:	f7fb f88f 	bl	8000b08 <__aeabi_dcmpeq>
 80059ea:	b108      	cbz	r0, 80059f0 <__cvt+0xa4>
 80059ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80059f0:	2230      	movs	r2, #48	; 0x30
 80059f2:	9b03      	ldr	r3, [sp, #12]
 80059f4:	454b      	cmp	r3, r9
 80059f6:	d307      	bcc.n	8005a08 <__cvt+0xbc>
 80059f8:	9b03      	ldr	r3, [sp, #12]
 80059fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059fc:	1bdb      	subs	r3, r3, r7
 80059fe:	4638      	mov	r0, r7
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	b004      	add	sp, #16
 8005a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a08:	1c59      	adds	r1, r3, #1
 8005a0a:	9103      	str	r1, [sp, #12]
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	e7f0      	b.n	80059f2 <__cvt+0xa6>

08005a10 <__exponent>:
 8005a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a12:	4603      	mov	r3, r0
 8005a14:	2900      	cmp	r1, #0
 8005a16:	bfb8      	it	lt
 8005a18:	4249      	neglt	r1, r1
 8005a1a:	f803 2b02 	strb.w	r2, [r3], #2
 8005a1e:	bfb4      	ite	lt
 8005a20:	222d      	movlt	r2, #45	; 0x2d
 8005a22:	222b      	movge	r2, #43	; 0x2b
 8005a24:	2909      	cmp	r1, #9
 8005a26:	7042      	strb	r2, [r0, #1]
 8005a28:	dd2a      	ble.n	8005a80 <__exponent+0x70>
 8005a2a:	f10d 0407 	add.w	r4, sp, #7
 8005a2e:	46a4      	mov	ip, r4
 8005a30:	270a      	movs	r7, #10
 8005a32:	46a6      	mov	lr, r4
 8005a34:	460a      	mov	r2, r1
 8005a36:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a3a:	fb07 1516 	mls	r5, r7, r6, r1
 8005a3e:	3530      	adds	r5, #48	; 0x30
 8005a40:	2a63      	cmp	r2, #99	; 0x63
 8005a42:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a4a:	4631      	mov	r1, r6
 8005a4c:	dcf1      	bgt.n	8005a32 <__exponent+0x22>
 8005a4e:	3130      	adds	r1, #48	; 0x30
 8005a50:	f1ae 0502 	sub.w	r5, lr, #2
 8005a54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a58:	1c44      	adds	r4, r0, #1
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	4561      	cmp	r1, ip
 8005a5e:	d30a      	bcc.n	8005a76 <__exponent+0x66>
 8005a60:	f10d 0209 	add.w	r2, sp, #9
 8005a64:	eba2 020e 	sub.w	r2, r2, lr
 8005a68:	4565      	cmp	r5, ip
 8005a6a:	bf88      	it	hi
 8005a6c:	2200      	movhi	r2, #0
 8005a6e:	4413      	add	r3, r2
 8005a70:	1a18      	subs	r0, r3, r0
 8005a72:	b003      	add	sp, #12
 8005a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a7e:	e7ed      	b.n	8005a5c <__exponent+0x4c>
 8005a80:	2330      	movs	r3, #48	; 0x30
 8005a82:	3130      	adds	r1, #48	; 0x30
 8005a84:	7083      	strb	r3, [r0, #2]
 8005a86:	70c1      	strb	r1, [r0, #3]
 8005a88:	1d03      	adds	r3, r0, #4
 8005a8a:	e7f1      	b.n	8005a70 <__exponent+0x60>

08005a8c <_printf_float>:
 8005a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a90:	ed2d 8b02 	vpush	{d8}
 8005a94:	b08d      	sub	sp, #52	; 0x34
 8005a96:	460c      	mov	r4, r1
 8005a98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005a9c:	4616      	mov	r6, r2
 8005a9e:	461f      	mov	r7, r3
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	f001 fa75 	bl	8006f90 <_localeconv_r>
 8005aa6:	f8d0 a000 	ldr.w	sl, [r0]
 8005aaa:	4650      	mov	r0, sl
 8005aac:	f7fa fbb0 	bl	8000210 <strlen>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	9305      	str	r3, [sp, #20]
 8005ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8005abc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ac0:	3307      	adds	r3, #7
 8005ac2:	f023 0307 	bic.w	r3, r3, #7
 8005ac6:	f103 0208 	add.w	r2, r3, #8
 8005aca:	f8c8 2000 	str.w	r2, [r8]
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005ad6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005ada:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ade:	9307      	str	r3, [sp, #28]
 8005ae0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ae4:	ee08 0a10 	vmov	s16, r0
 8005ae8:	4b9f      	ldr	r3, [pc, #636]	; (8005d68 <_printf_float+0x2dc>)
 8005aea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aee:	f04f 32ff 	mov.w	r2, #4294967295
 8005af2:	f7fb f83b 	bl	8000b6c <__aeabi_dcmpun>
 8005af6:	bb88      	cbnz	r0, 8005b5c <_printf_float+0xd0>
 8005af8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005afc:	4b9a      	ldr	r3, [pc, #616]	; (8005d68 <_printf_float+0x2dc>)
 8005afe:	f04f 32ff 	mov.w	r2, #4294967295
 8005b02:	f7fb f815 	bl	8000b30 <__aeabi_dcmple>
 8005b06:	bb48      	cbnz	r0, 8005b5c <_printf_float+0xd0>
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	4640      	mov	r0, r8
 8005b0e:	4649      	mov	r1, r9
 8005b10:	f7fb f804 	bl	8000b1c <__aeabi_dcmplt>
 8005b14:	b110      	cbz	r0, 8005b1c <_printf_float+0x90>
 8005b16:	232d      	movs	r3, #45	; 0x2d
 8005b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b1c:	4b93      	ldr	r3, [pc, #588]	; (8005d6c <_printf_float+0x2e0>)
 8005b1e:	4894      	ldr	r0, [pc, #592]	; (8005d70 <_printf_float+0x2e4>)
 8005b20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b24:	bf94      	ite	ls
 8005b26:	4698      	movls	r8, r3
 8005b28:	4680      	movhi	r8, r0
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	6123      	str	r3, [r4, #16]
 8005b2e:	9b05      	ldr	r3, [sp, #20]
 8005b30:	f023 0204 	bic.w	r2, r3, #4
 8005b34:	6022      	str	r2, [r4, #0]
 8005b36:	f04f 0900 	mov.w	r9, #0
 8005b3a:	9700      	str	r7, [sp, #0]
 8005b3c:	4633      	mov	r3, r6
 8005b3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b40:	4621      	mov	r1, r4
 8005b42:	4628      	mov	r0, r5
 8005b44:	f000 f9d8 	bl	8005ef8 <_printf_common>
 8005b48:	3001      	adds	r0, #1
 8005b4a:	f040 8090 	bne.w	8005c6e <_printf_float+0x1e2>
 8005b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b52:	b00d      	add	sp, #52	; 0x34
 8005b54:	ecbd 8b02 	vpop	{d8}
 8005b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5c:	4642      	mov	r2, r8
 8005b5e:	464b      	mov	r3, r9
 8005b60:	4640      	mov	r0, r8
 8005b62:	4649      	mov	r1, r9
 8005b64:	f7fb f802 	bl	8000b6c <__aeabi_dcmpun>
 8005b68:	b140      	cbz	r0, 8005b7c <_printf_float+0xf0>
 8005b6a:	464b      	mov	r3, r9
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	bfbc      	itt	lt
 8005b70:	232d      	movlt	r3, #45	; 0x2d
 8005b72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b76:	487f      	ldr	r0, [pc, #508]	; (8005d74 <_printf_float+0x2e8>)
 8005b78:	4b7f      	ldr	r3, [pc, #508]	; (8005d78 <_printf_float+0x2ec>)
 8005b7a:	e7d1      	b.n	8005b20 <_printf_float+0x94>
 8005b7c:	6863      	ldr	r3, [r4, #4]
 8005b7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b82:	9206      	str	r2, [sp, #24]
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	d13f      	bne.n	8005c08 <_printf_float+0x17c>
 8005b88:	2306      	movs	r3, #6
 8005b8a:	6063      	str	r3, [r4, #4]
 8005b8c:	9b05      	ldr	r3, [sp, #20]
 8005b8e:	6861      	ldr	r1, [r4, #4]
 8005b90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b94:	2300      	movs	r3, #0
 8005b96:	9303      	str	r3, [sp, #12]
 8005b98:	ab0a      	add	r3, sp, #40	; 0x28
 8005b9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005b9e:	ab09      	add	r3, sp, #36	; 0x24
 8005ba0:	ec49 8b10 	vmov	d0, r8, r9
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	6022      	str	r2, [r4, #0]
 8005ba8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005bac:	4628      	mov	r0, r5
 8005bae:	f7ff fecd 	bl	800594c <__cvt>
 8005bb2:	9b06      	ldr	r3, [sp, #24]
 8005bb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bb6:	2b47      	cmp	r3, #71	; 0x47
 8005bb8:	4680      	mov	r8, r0
 8005bba:	d108      	bne.n	8005bce <_printf_float+0x142>
 8005bbc:	1cc8      	adds	r0, r1, #3
 8005bbe:	db02      	blt.n	8005bc6 <_printf_float+0x13a>
 8005bc0:	6863      	ldr	r3, [r4, #4]
 8005bc2:	4299      	cmp	r1, r3
 8005bc4:	dd41      	ble.n	8005c4a <_printf_float+0x1be>
 8005bc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8005bca:	fa5f fb8b 	uxtb.w	fp, fp
 8005bce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bd2:	d820      	bhi.n	8005c16 <_printf_float+0x18a>
 8005bd4:	3901      	subs	r1, #1
 8005bd6:	465a      	mov	r2, fp
 8005bd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005bdc:	9109      	str	r1, [sp, #36]	; 0x24
 8005bde:	f7ff ff17 	bl	8005a10 <__exponent>
 8005be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005be4:	1813      	adds	r3, r2, r0
 8005be6:	2a01      	cmp	r2, #1
 8005be8:	4681      	mov	r9, r0
 8005bea:	6123      	str	r3, [r4, #16]
 8005bec:	dc02      	bgt.n	8005bf4 <_printf_float+0x168>
 8005bee:	6822      	ldr	r2, [r4, #0]
 8005bf0:	07d2      	lsls	r2, r2, #31
 8005bf2:	d501      	bpl.n	8005bf8 <_printf_float+0x16c>
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	6123      	str	r3, [r4, #16]
 8005bf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d09c      	beq.n	8005b3a <_printf_float+0xae>
 8005c00:	232d      	movs	r3, #45	; 0x2d
 8005c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c06:	e798      	b.n	8005b3a <_printf_float+0xae>
 8005c08:	9a06      	ldr	r2, [sp, #24]
 8005c0a:	2a47      	cmp	r2, #71	; 0x47
 8005c0c:	d1be      	bne.n	8005b8c <_printf_float+0x100>
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1bc      	bne.n	8005b8c <_printf_float+0x100>
 8005c12:	2301      	movs	r3, #1
 8005c14:	e7b9      	b.n	8005b8a <_printf_float+0xfe>
 8005c16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c1a:	d118      	bne.n	8005c4e <_printf_float+0x1c2>
 8005c1c:	2900      	cmp	r1, #0
 8005c1e:	6863      	ldr	r3, [r4, #4]
 8005c20:	dd0b      	ble.n	8005c3a <_printf_float+0x1ae>
 8005c22:	6121      	str	r1, [r4, #16]
 8005c24:	b913      	cbnz	r3, 8005c2c <_printf_float+0x1a0>
 8005c26:	6822      	ldr	r2, [r4, #0]
 8005c28:	07d0      	lsls	r0, r2, #31
 8005c2a:	d502      	bpl.n	8005c32 <_printf_float+0x1a6>
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	440b      	add	r3, r1
 8005c30:	6123      	str	r3, [r4, #16]
 8005c32:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c34:	f04f 0900 	mov.w	r9, #0
 8005c38:	e7de      	b.n	8005bf8 <_printf_float+0x16c>
 8005c3a:	b913      	cbnz	r3, 8005c42 <_printf_float+0x1b6>
 8005c3c:	6822      	ldr	r2, [r4, #0]
 8005c3e:	07d2      	lsls	r2, r2, #31
 8005c40:	d501      	bpl.n	8005c46 <_printf_float+0x1ba>
 8005c42:	3302      	adds	r3, #2
 8005c44:	e7f4      	b.n	8005c30 <_printf_float+0x1a4>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e7f2      	b.n	8005c30 <_printf_float+0x1a4>
 8005c4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c50:	4299      	cmp	r1, r3
 8005c52:	db05      	blt.n	8005c60 <_printf_float+0x1d4>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	6121      	str	r1, [r4, #16]
 8005c58:	07d8      	lsls	r0, r3, #31
 8005c5a:	d5ea      	bpl.n	8005c32 <_printf_float+0x1a6>
 8005c5c:	1c4b      	adds	r3, r1, #1
 8005c5e:	e7e7      	b.n	8005c30 <_printf_float+0x1a4>
 8005c60:	2900      	cmp	r1, #0
 8005c62:	bfd4      	ite	le
 8005c64:	f1c1 0202 	rsble	r2, r1, #2
 8005c68:	2201      	movgt	r2, #1
 8005c6a:	4413      	add	r3, r2
 8005c6c:	e7e0      	b.n	8005c30 <_printf_float+0x1a4>
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	055a      	lsls	r2, r3, #21
 8005c72:	d407      	bmi.n	8005c84 <_printf_float+0x1f8>
 8005c74:	6923      	ldr	r3, [r4, #16]
 8005c76:	4642      	mov	r2, r8
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	47b8      	blx	r7
 8005c7e:	3001      	adds	r0, #1
 8005c80:	d12c      	bne.n	8005cdc <_printf_float+0x250>
 8005c82:	e764      	b.n	8005b4e <_printf_float+0xc2>
 8005c84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c88:	f240 80e0 	bls.w	8005e4c <_printf_float+0x3c0>
 8005c8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c90:	2200      	movs	r2, #0
 8005c92:	2300      	movs	r3, #0
 8005c94:	f7fa ff38 	bl	8000b08 <__aeabi_dcmpeq>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d034      	beq.n	8005d06 <_printf_float+0x27a>
 8005c9c:	4a37      	ldr	r2, [pc, #220]	; (8005d7c <_printf_float+0x2f0>)
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	47b8      	blx	r7
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	f43f af51 	beq.w	8005b4e <_printf_float+0xc2>
 8005cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	db02      	blt.n	8005cba <_printf_float+0x22e>
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	07d8      	lsls	r0, r3, #31
 8005cb8:	d510      	bpl.n	8005cdc <_printf_float+0x250>
 8005cba:	ee18 3a10 	vmov	r3, s16
 8005cbe:	4652      	mov	r2, sl
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	47b8      	blx	r7
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	f43f af41 	beq.w	8005b4e <_printf_float+0xc2>
 8005ccc:	f04f 0800 	mov.w	r8, #0
 8005cd0:	f104 091a 	add.w	r9, r4, #26
 8005cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	4543      	cmp	r3, r8
 8005cda:	dc09      	bgt.n	8005cf0 <_printf_float+0x264>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	079b      	lsls	r3, r3, #30
 8005ce0:	f100 8105 	bmi.w	8005eee <_printf_float+0x462>
 8005ce4:	68e0      	ldr	r0, [r4, #12]
 8005ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ce8:	4298      	cmp	r0, r3
 8005cea:	bfb8      	it	lt
 8005cec:	4618      	movlt	r0, r3
 8005cee:	e730      	b.n	8005b52 <_printf_float+0xc6>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	464a      	mov	r2, r9
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	47b8      	blx	r7
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	f43f af27 	beq.w	8005b4e <_printf_float+0xc2>
 8005d00:	f108 0801 	add.w	r8, r8, #1
 8005d04:	e7e6      	b.n	8005cd4 <_printf_float+0x248>
 8005d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	dc39      	bgt.n	8005d80 <_printf_float+0x2f4>
 8005d0c:	4a1b      	ldr	r2, [pc, #108]	; (8005d7c <_printf_float+0x2f0>)
 8005d0e:	2301      	movs	r3, #1
 8005d10:	4631      	mov	r1, r6
 8005d12:	4628      	mov	r0, r5
 8005d14:	47b8      	blx	r7
 8005d16:	3001      	adds	r0, #1
 8005d18:	f43f af19 	beq.w	8005b4e <_printf_float+0xc2>
 8005d1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d20:	4313      	orrs	r3, r2
 8005d22:	d102      	bne.n	8005d2a <_printf_float+0x29e>
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	07d9      	lsls	r1, r3, #31
 8005d28:	d5d8      	bpl.n	8005cdc <_printf_float+0x250>
 8005d2a:	ee18 3a10 	vmov	r3, s16
 8005d2e:	4652      	mov	r2, sl
 8005d30:	4631      	mov	r1, r6
 8005d32:	4628      	mov	r0, r5
 8005d34:	47b8      	blx	r7
 8005d36:	3001      	adds	r0, #1
 8005d38:	f43f af09 	beq.w	8005b4e <_printf_float+0xc2>
 8005d3c:	f04f 0900 	mov.w	r9, #0
 8005d40:	f104 0a1a 	add.w	sl, r4, #26
 8005d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d46:	425b      	negs	r3, r3
 8005d48:	454b      	cmp	r3, r9
 8005d4a:	dc01      	bgt.n	8005d50 <_printf_float+0x2c4>
 8005d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d4e:	e792      	b.n	8005c76 <_printf_float+0x1ea>
 8005d50:	2301      	movs	r3, #1
 8005d52:	4652      	mov	r2, sl
 8005d54:	4631      	mov	r1, r6
 8005d56:	4628      	mov	r0, r5
 8005d58:	47b8      	blx	r7
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	f43f aef7 	beq.w	8005b4e <_printf_float+0xc2>
 8005d60:	f109 0901 	add.w	r9, r9, #1
 8005d64:	e7ee      	b.n	8005d44 <_printf_float+0x2b8>
 8005d66:	bf00      	nop
 8005d68:	7fefffff 	.word	0x7fefffff
 8005d6c:	0800873c 	.word	0x0800873c
 8005d70:	08008740 	.word	0x08008740
 8005d74:	08008748 	.word	0x08008748
 8005d78:	08008744 	.word	0x08008744
 8005d7c:	0800874c 	.word	0x0800874c
 8005d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d84:	429a      	cmp	r2, r3
 8005d86:	bfa8      	it	ge
 8005d88:	461a      	movge	r2, r3
 8005d8a:	2a00      	cmp	r2, #0
 8005d8c:	4691      	mov	r9, r2
 8005d8e:	dc37      	bgt.n	8005e00 <_printf_float+0x374>
 8005d90:	f04f 0b00 	mov.w	fp, #0
 8005d94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d98:	f104 021a 	add.w	r2, r4, #26
 8005d9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d9e:	9305      	str	r3, [sp, #20]
 8005da0:	eba3 0309 	sub.w	r3, r3, r9
 8005da4:	455b      	cmp	r3, fp
 8005da6:	dc33      	bgt.n	8005e10 <_printf_float+0x384>
 8005da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dac:	429a      	cmp	r2, r3
 8005dae:	db3b      	blt.n	8005e28 <_printf_float+0x39c>
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	07da      	lsls	r2, r3, #31
 8005db4:	d438      	bmi.n	8005e28 <_printf_float+0x39c>
 8005db6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005db8:	9b05      	ldr	r3, [sp, #20]
 8005dba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	eba2 0901 	sub.w	r9, r2, r1
 8005dc2:	4599      	cmp	r9, r3
 8005dc4:	bfa8      	it	ge
 8005dc6:	4699      	movge	r9, r3
 8005dc8:	f1b9 0f00 	cmp.w	r9, #0
 8005dcc:	dc35      	bgt.n	8005e3a <_printf_float+0x3ae>
 8005dce:	f04f 0800 	mov.w	r8, #0
 8005dd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dd6:	f104 0a1a 	add.w	sl, r4, #26
 8005dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dde:	1a9b      	subs	r3, r3, r2
 8005de0:	eba3 0309 	sub.w	r3, r3, r9
 8005de4:	4543      	cmp	r3, r8
 8005de6:	f77f af79 	ble.w	8005cdc <_printf_float+0x250>
 8005dea:	2301      	movs	r3, #1
 8005dec:	4652      	mov	r2, sl
 8005dee:	4631      	mov	r1, r6
 8005df0:	4628      	mov	r0, r5
 8005df2:	47b8      	blx	r7
 8005df4:	3001      	adds	r0, #1
 8005df6:	f43f aeaa 	beq.w	8005b4e <_printf_float+0xc2>
 8005dfa:	f108 0801 	add.w	r8, r8, #1
 8005dfe:	e7ec      	b.n	8005dda <_printf_float+0x34e>
 8005e00:	4613      	mov	r3, r2
 8005e02:	4631      	mov	r1, r6
 8005e04:	4642      	mov	r2, r8
 8005e06:	4628      	mov	r0, r5
 8005e08:	47b8      	blx	r7
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d1c0      	bne.n	8005d90 <_printf_float+0x304>
 8005e0e:	e69e      	b.n	8005b4e <_printf_float+0xc2>
 8005e10:	2301      	movs	r3, #1
 8005e12:	4631      	mov	r1, r6
 8005e14:	4628      	mov	r0, r5
 8005e16:	9205      	str	r2, [sp, #20]
 8005e18:	47b8      	blx	r7
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	f43f ae97 	beq.w	8005b4e <_printf_float+0xc2>
 8005e20:	9a05      	ldr	r2, [sp, #20]
 8005e22:	f10b 0b01 	add.w	fp, fp, #1
 8005e26:	e7b9      	b.n	8005d9c <_printf_float+0x310>
 8005e28:	ee18 3a10 	vmov	r3, s16
 8005e2c:	4652      	mov	r2, sl
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4628      	mov	r0, r5
 8005e32:	47b8      	blx	r7
 8005e34:	3001      	adds	r0, #1
 8005e36:	d1be      	bne.n	8005db6 <_printf_float+0x32a>
 8005e38:	e689      	b.n	8005b4e <_printf_float+0xc2>
 8005e3a:	9a05      	ldr	r2, [sp, #20]
 8005e3c:	464b      	mov	r3, r9
 8005e3e:	4442      	add	r2, r8
 8005e40:	4631      	mov	r1, r6
 8005e42:	4628      	mov	r0, r5
 8005e44:	47b8      	blx	r7
 8005e46:	3001      	adds	r0, #1
 8005e48:	d1c1      	bne.n	8005dce <_printf_float+0x342>
 8005e4a:	e680      	b.n	8005b4e <_printf_float+0xc2>
 8005e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e4e:	2a01      	cmp	r2, #1
 8005e50:	dc01      	bgt.n	8005e56 <_printf_float+0x3ca>
 8005e52:	07db      	lsls	r3, r3, #31
 8005e54:	d538      	bpl.n	8005ec8 <_printf_float+0x43c>
 8005e56:	2301      	movs	r3, #1
 8005e58:	4642      	mov	r2, r8
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	47b8      	blx	r7
 8005e60:	3001      	adds	r0, #1
 8005e62:	f43f ae74 	beq.w	8005b4e <_printf_float+0xc2>
 8005e66:	ee18 3a10 	vmov	r3, s16
 8005e6a:	4652      	mov	r2, sl
 8005e6c:	4631      	mov	r1, r6
 8005e6e:	4628      	mov	r0, r5
 8005e70:	47b8      	blx	r7
 8005e72:	3001      	adds	r0, #1
 8005e74:	f43f ae6b 	beq.w	8005b4e <_printf_float+0xc2>
 8005e78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f7fa fe42 	bl	8000b08 <__aeabi_dcmpeq>
 8005e84:	b9d8      	cbnz	r0, 8005ebe <_printf_float+0x432>
 8005e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e88:	f108 0201 	add.w	r2, r8, #1
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	4631      	mov	r1, r6
 8005e90:	4628      	mov	r0, r5
 8005e92:	47b8      	blx	r7
 8005e94:	3001      	adds	r0, #1
 8005e96:	d10e      	bne.n	8005eb6 <_printf_float+0x42a>
 8005e98:	e659      	b.n	8005b4e <_printf_float+0xc2>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	4652      	mov	r2, sl
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	47b8      	blx	r7
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	f43f ae52 	beq.w	8005b4e <_printf_float+0xc2>
 8005eaa:	f108 0801 	add.w	r8, r8, #1
 8005eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	4543      	cmp	r3, r8
 8005eb4:	dcf1      	bgt.n	8005e9a <_printf_float+0x40e>
 8005eb6:	464b      	mov	r3, r9
 8005eb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ebc:	e6dc      	b.n	8005c78 <_printf_float+0x1ec>
 8005ebe:	f04f 0800 	mov.w	r8, #0
 8005ec2:	f104 0a1a 	add.w	sl, r4, #26
 8005ec6:	e7f2      	b.n	8005eae <_printf_float+0x422>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	4642      	mov	r2, r8
 8005ecc:	e7df      	b.n	8005e8e <_printf_float+0x402>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	464a      	mov	r2, r9
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	47b8      	blx	r7
 8005ed8:	3001      	adds	r0, #1
 8005eda:	f43f ae38 	beq.w	8005b4e <_printf_float+0xc2>
 8005ede:	f108 0801 	add.w	r8, r8, #1
 8005ee2:	68e3      	ldr	r3, [r4, #12]
 8005ee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ee6:	1a5b      	subs	r3, r3, r1
 8005ee8:	4543      	cmp	r3, r8
 8005eea:	dcf0      	bgt.n	8005ece <_printf_float+0x442>
 8005eec:	e6fa      	b.n	8005ce4 <_printf_float+0x258>
 8005eee:	f04f 0800 	mov.w	r8, #0
 8005ef2:	f104 0919 	add.w	r9, r4, #25
 8005ef6:	e7f4      	b.n	8005ee2 <_printf_float+0x456>

08005ef8 <_printf_common>:
 8005ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005efc:	4616      	mov	r6, r2
 8005efe:	4699      	mov	r9, r3
 8005f00:	688a      	ldr	r2, [r1, #8]
 8005f02:	690b      	ldr	r3, [r1, #16]
 8005f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	bfb8      	it	lt
 8005f0c:	4613      	movlt	r3, r2
 8005f0e:	6033      	str	r3, [r6, #0]
 8005f10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f14:	4607      	mov	r7, r0
 8005f16:	460c      	mov	r4, r1
 8005f18:	b10a      	cbz	r2, 8005f1e <_printf_common+0x26>
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	6033      	str	r3, [r6, #0]
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	0699      	lsls	r1, r3, #26
 8005f22:	bf42      	ittt	mi
 8005f24:	6833      	ldrmi	r3, [r6, #0]
 8005f26:	3302      	addmi	r3, #2
 8005f28:	6033      	strmi	r3, [r6, #0]
 8005f2a:	6825      	ldr	r5, [r4, #0]
 8005f2c:	f015 0506 	ands.w	r5, r5, #6
 8005f30:	d106      	bne.n	8005f40 <_printf_common+0x48>
 8005f32:	f104 0a19 	add.w	sl, r4, #25
 8005f36:	68e3      	ldr	r3, [r4, #12]
 8005f38:	6832      	ldr	r2, [r6, #0]
 8005f3a:	1a9b      	subs	r3, r3, r2
 8005f3c:	42ab      	cmp	r3, r5
 8005f3e:	dc26      	bgt.n	8005f8e <_printf_common+0x96>
 8005f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f44:	1e13      	subs	r3, r2, #0
 8005f46:	6822      	ldr	r2, [r4, #0]
 8005f48:	bf18      	it	ne
 8005f4a:	2301      	movne	r3, #1
 8005f4c:	0692      	lsls	r2, r2, #26
 8005f4e:	d42b      	bmi.n	8005fa8 <_printf_common+0xb0>
 8005f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f54:	4649      	mov	r1, r9
 8005f56:	4638      	mov	r0, r7
 8005f58:	47c0      	blx	r8
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	d01e      	beq.n	8005f9c <_printf_common+0xa4>
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	68e5      	ldr	r5, [r4, #12]
 8005f62:	6832      	ldr	r2, [r6, #0]
 8005f64:	f003 0306 	and.w	r3, r3, #6
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	bf08      	it	eq
 8005f6c:	1aad      	subeq	r5, r5, r2
 8005f6e:	68a3      	ldr	r3, [r4, #8]
 8005f70:	6922      	ldr	r2, [r4, #16]
 8005f72:	bf0c      	ite	eq
 8005f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f78:	2500      	movne	r5, #0
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	bfc4      	itt	gt
 8005f7e:	1a9b      	subgt	r3, r3, r2
 8005f80:	18ed      	addgt	r5, r5, r3
 8005f82:	2600      	movs	r6, #0
 8005f84:	341a      	adds	r4, #26
 8005f86:	42b5      	cmp	r5, r6
 8005f88:	d11a      	bne.n	8005fc0 <_printf_common+0xc8>
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	e008      	b.n	8005fa0 <_printf_common+0xa8>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	4652      	mov	r2, sl
 8005f92:	4649      	mov	r1, r9
 8005f94:	4638      	mov	r0, r7
 8005f96:	47c0      	blx	r8
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d103      	bne.n	8005fa4 <_printf_common+0xac>
 8005f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa4:	3501      	adds	r5, #1
 8005fa6:	e7c6      	b.n	8005f36 <_printf_common+0x3e>
 8005fa8:	18e1      	adds	r1, r4, r3
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	2030      	movs	r0, #48	; 0x30
 8005fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fb2:	4422      	add	r2, r4
 8005fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fbc:	3302      	adds	r3, #2
 8005fbe:	e7c7      	b.n	8005f50 <_printf_common+0x58>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	4649      	mov	r1, r9
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	47c0      	blx	r8
 8005fca:	3001      	adds	r0, #1
 8005fcc:	d0e6      	beq.n	8005f9c <_printf_common+0xa4>
 8005fce:	3601      	adds	r6, #1
 8005fd0:	e7d9      	b.n	8005f86 <_printf_common+0x8e>
	...

08005fd4 <_printf_i>:
 8005fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd8:	460c      	mov	r4, r1
 8005fda:	4691      	mov	r9, r2
 8005fdc:	7e27      	ldrb	r7, [r4, #24]
 8005fde:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005fe0:	2f78      	cmp	r7, #120	; 0x78
 8005fe2:	4680      	mov	r8, r0
 8005fe4:	469a      	mov	sl, r3
 8005fe6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fea:	d807      	bhi.n	8005ffc <_printf_i+0x28>
 8005fec:	2f62      	cmp	r7, #98	; 0x62
 8005fee:	d80a      	bhi.n	8006006 <_printf_i+0x32>
 8005ff0:	2f00      	cmp	r7, #0
 8005ff2:	f000 80d8 	beq.w	80061a6 <_printf_i+0x1d2>
 8005ff6:	2f58      	cmp	r7, #88	; 0x58
 8005ff8:	f000 80a3 	beq.w	8006142 <_printf_i+0x16e>
 8005ffc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006004:	e03a      	b.n	800607c <_printf_i+0xa8>
 8006006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800600a:	2b15      	cmp	r3, #21
 800600c:	d8f6      	bhi.n	8005ffc <_printf_i+0x28>
 800600e:	a001      	add	r0, pc, #4	; (adr r0, 8006014 <_printf_i+0x40>)
 8006010:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006014:	0800606d 	.word	0x0800606d
 8006018:	08006081 	.word	0x08006081
 800601c:	08005ffd 	.word	0x08005ffd
 8006020:	08005ffd 	.word	0x08005ffd
 8006024:	08005ffd 	.word	0x08005ffd
 8006028:	08005ffd 	.word	0x08005ffd
 800602c:	08006081 	.word	0x08006081
 8006030:	08005ffd 	.word	0x08005ffd
 8006034:	08005ffd 	.word	0x08005ffd
 8006038:	08005ffd 	.word	0x08005ffd
 800603c:	08005ffd 	.word	0x08005ffd
 8006040:	0800618d 	.word	0x0800618d
 8006044:	080060b1 	.word	0x080060b1
 8006048:	0800616f 	.word	0x0800616f
 800604c:	08005ffd 	.word	0x08005ffd
 8006050:	08005ffd 	.word	0x08005ffd
 8006054:	080061af 	.word	0x080061af
 8006058:	08005ffd 	.word	0x08005ffd
 800605c:	080060b1 	.word	0x080060b1
 8006060:	08005ffd 	.word	0x08005ffd
 8006064:	08005ffd 	.word	0x08005ffd
 8006068:	08006177 	.word	0x08006177
 800606c:	680b      	ldr	r3, [r1, #0]
 800606e:	1d1a      	adds	r2, r3, #4
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	600a      	str	r2, [r1, #0]
 8006074:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800607c:	2301      	movs	r3, #1
 800607e:	e0a3      	b.n	80061c8 <_printf_i+0x1f4>
 8006080:	6825      	ldr	r5, [r4, #0]
 8006082:	6808      	ldr	r0, [r1, #0]
 8006084:	062e      	lsls	r6, r5, #24
 8006086:	f100 0304 	add.w	r3, r0, #4
 800608a:	d50a      	bpl.n	80060a2 <_printf_i+0xce>
 800608c:	6805      	ldr	r5, [r0, #0]
 800608e:	600b      	str	r3, [r1, #0]
 8006090:	2d00      	cmp	r5, #0
 8006092:	da03      	bge.n	800609c <_printf_i+0xc8>
 8006094:	232d      	movs	r3, #45	; 0x2d
 8006096:	426d      	negs	r5, r5
 8006098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800609c:	485e      	ldr	r0, [pc, #376]	; (8006218 <_printf_i+0x244>)
 800609e:	230a      	movs	r3, #10
 80060a0:	e019      	b.n	80060d6 <_printf_i+0x102>
 80060a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80060a6:	6805      	ldr	r5, [r0, #0]
 80060a8:	600b      	str	r3, [r1, #0]
 80060aa:	bf18      	it	ne
 80060ac:	b22d      	sxthne	r5, r5
 80060ae:	e7ef      	b.n	8006090 <_printf_i+0xbc>
 80060b0:	680b      	ldr	r3, [r1, #0]
 80060b2:	6825      	ldr	r5, [r4, #0]
 80060b4:	1d18      	adds	r0, r3, #4
 80060b6:	6008      	str	r0, [r1, #0]
 80060b8:	0628      	lsls	r0, r5, #24
 80060ba:	d501      	bpl.n	80060c0 <_printf_i+0xec>
 80060bc:	681d      	ldr	r5, [r3, #0]
 80060be:	e002      	b.n	80060c6 <_printf_i+0xf2>
 80060c0:	0669      	lsls	r1, r5, #25
 80060c2:	d5fb      	bpl.n	80060bc <_printf_i+0xe8>
 80060c4:	881d      	ldrh	r5, [r3, #0]
 80060c6:	4854      	ldr	r0, [pc, #336]	; (8006218 <_printf_i+0x244>)
 80060c8:	2f6f      	cmp	r7, #111	; 0x6f
 80060ca:	bf0c      	ite	eq
 80060cc:	2308      	moveq	r3, #8
 80060ce:	230a      	movne	r3, #10
 80060d0:	2100      	movs	r1, #0
 80060d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060d6:	6866      	ldr	r6, [r4, #4]
 80060d8:	60a6      	str	r6, [r4, #8]
 80060da:	2e00      	cmp	r6, #0
 80060dc:	bfa2      	ittt	ge
 80060de:	6821      	ldrge	r1, [r4, #0]
 80060e0:	f021 0104 	bicge.w	r1, r1, #4
 80060e4:	6021      	strge	r1, [r4, #0]
 80060e6:	b90d      	cbnz	r5, 80060ec <_printf_i+0x118>
 80060e8:	2e00      	cmp	r6, #0
 80060ea:	d04d      	beq.n	8006188 <_printf_i+0x1b4>
 80060ec:	4616      	mov	r6, r2
 80060ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80060f2:	fb03 5711 	mls	r7, r3, r1, r5
 80060f6:	5dc7      	ldrb	r7, [r0, r7]
 80060f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060fc:	462f      	mov	r7, r5
 80060fe:	42bb      	cmp	r3, r7
 8006100:	460d      	mov	r5, r1
 8006102:	d9f4      	bls.n	80060ee <_printf_i+0x11a>
 8006104:	2b08      	cmp	r3, #8
 8006106:	d10b      	bne.n	8006120 <_printf_i+0x14c>
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	07df      	lsls	r7, r3, #31
 800610c:	d508      	bpl.n	8006120 <_printf_i+0x14c>
 800610e:	6923      	ldr	r3, [r4, #16]
 8006110:	6861      	ldr	r1, [r4, #4]
 8006112:	4299      	cmp	r1, r3
 8006114:	bfde      	ittt	le
 8006116:	2330      	movle	r3, #48	; 0x30
 8006118:	f806 3c01 	strble.w	r3, [r6, #-1]
 800611c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006120:	1b92      	subs	r2, r2, r6
 8006122:	6122      	str	r2, [r4, #16]
 8006124:	f8cd a000 	str.w	sl, [sp]
 8006128:	464b      	mov	r3, r9
 800612a:	aa03      	add	r2, sp, #12
 800612c:	4621      	mov	r1, r4
 800612e:	4640      	mov	r0, r8
 8006130:	f7ff fee2 	bl	8005ef8 <_printf_common>
 8006134:	3001      	adds	r0, #1
 8006136:	d14c      	bne.n	80061d2 <_printf_i+0x1fe>
 8006138:	f04f 30ff 	mov.w	r0, #4294967295
 800613c:	b004      	add	sp, #16
 800613e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006142:	4835      	ldr	r0, [pc, #212]	; (8006218 <_printf_i+0x244>)
 8006144:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	680e      	ldr	r6, [r1, #0]
 800614c:	061f      	lsls	r7, r3, #24
 800614e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006152:	600e      	str	r6, [r1, #0]
 8006154:	d514      	bpl.n	8006180 <_printf_i+0x1ac>
 8006156:	07d9      	lsls	r1, r3, #31
 8006158:	bf44      	itt	mi
 800615a:	f043 0320 	orrmi.w	r3, r3, #32
 800615e:	6023      	strmi	r3, [r4, #0]
 8006160:	b91d      	cbnz	r5, 800616a <_printf_i+0x196>
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	f023 0320 	bic.w	r3, r3, #32
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	2310      	movs	r3, #16
 800616c:	e7b0      	b.n	80060d0 <_printf_i+0xfc>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	f043 0320 	orr.w	r3, r3, #32
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	2378      	movs	r3, #120	; 0x78
 8006178:	4828      	ldr	r0, [pc, #160]	; (800621c <_printf_i+0x248>)
 800617a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800617e:	e7e3      	b.n	8006148 <_printf_i+0x174>
 8006180:	065e      	lsls	r6, r3, #25
 8006182:	bf48      	it	mi
 8006184:	b2ad      	uxthmi	r5, r5
 8006186:	e7e6      	b.n	8006156 <_printf_i+0x182>
 8006188:	4616      	mov	r6, r2
 800618a:	e7bb      	b.n	8006104 <_printf_i+0x130>
 800618c:	680b      	ldr	r3, [r1, #0]
 800618e:	6826      	ldr	r6, [r4, #0]
 8006190:	6960      	ldr	r0, [r4, #20]
 8006192:	1d1d      	adds	r5, r3, #4
 8006194:	600d      	str	r5, [r1, #0]
 8006196:	0635      	lsls	r5, r6, #24
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	d501      	bpl.n	80061a0 <_printf_i+0x1cc>
 800619c:	6018      	str	r0, [r3, #0]
 800619e:	e002      	b.n	80061a6 <_printf_i+0x1d2>
 80061a0:	0671      	lsls	r1, r6, #25
 80061a2:	d5fb      	bpl.n	800619c <_printf_i+0x1c8>
 80061a4:	8018      	strh	r0, [r3, #0]
 80061a6:	2300      	movs	r3, #0
 80061a8:	6123      	str	r3, [r4, #16]
 80061aa:	4616      	mov	r6, r2
 80061ac:	e7ba      	b.n	8006124 <_printf_i+0x150>
 80061ae:	680b      	ldr	r3, [r1, #0]
 80061b0:	1d1a      	adds	r2, r3, #4
 80061b2:	600a      	str	r2, [r1, #0]
 80061b4:	681e      	ldr	r6, [r3, #0]
 80061b6:	6862      	ldr	r2, [r4, #4]
 80061b8:	2100      	movs	r1, #0
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7fa f830 	bl	8000220 <memchr>
 80061c0:	b108      	cbz	r0, 80061c6 <_printf_i+0x1f2>
 80061c2:	1b80      	subs	r0, r0, r6
 80061c4:	6060      	str	r0, [r4, #4]
 80061c6:	6863      	ldr	r3, [r4, #4]
 80061c8:	6123      	str	r3, [r4, #16]
 80061ca:	2300      	movs	r3, #0
 80061cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d0:	e7a8      	b.n	8006124 <_printf_i+0x150>
 80061d2:	6923      	ldr	r3, [r4, #16]
 80061d4:	4632      	mov	r2, r6
 80061d6:	4649      	mov	r1, r9
 80061d8:	4640      	mov	r0, r8
 80061da:	47d0      	blx	sl
 80061dc:	3001      	adds	r0, #1
 80061de:	d0ab      	beq.n	8006138 <_printf_i+0x164>
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	079b      	lsls	r3, r3, #30
 80061e4:	d413      	bmi.n	800620e <_printf_i+0x23a>
 80061e6:	68e0      	ldr	r0, [r4, #12]
 80061e8:	9b03      	ldr	r3, [sp, #12]
 80061ea:	4298      	cmp	r0, r3
 80061ec:	bfb8      	it	lt
 80061ee:	4618      	movlt	r0, r3
 80061f0:	e7a4      	b.n	800613c <_printf_i+0x168>
 80061f2:	2301      	movs	r3, #1
 80061f4:	4632      	mov	r2, r6
 80061f6:	4649      	mov	r1, r9
 80061f8:	4640      	mov	r0, r8
 80061fa:	47d0      	blx	sl
 80061fc:	3001      	adds	r0, #1
 80061fe:	d09b      	beq.n	8006138 <_printf_i+0x164>
 8006200:	3501      	adds	r5, #1
 8006202:	68e3      	ldr	r3, [r4, #12]
 8006204:	9903      	ldr	r1, [sp, #12]
 8006206:	1a5b      	subs	r3, r3, r1
 8006208:	42ab      	cmp	r3, r5
 800620a:	dcf2      	bgt.n	80061f2 <_printf_i+0x21e>
 800620c:	e7eb      	b.n	80061e6 <_printf_i+0x212>
 800620e:	2500      	movs	r5, #0
 8006210:	f104 0619 	add.w	r6, r4, #25
 8006214:	e7f5      	b.n	8006202 <_printf_i+0x22e>
 8006216:	bf00      	nop
 8006218:	0800874e 	.word	0x0800874e
 800621c:	0800875f 	.word	0x0800875f

08006220 <siprintf>:
 8006220:	b40e      	push	{r1, r2, r3}
 8006222:	b500      	push	{lr}
 8006224:	b09c      	sub	sp, #112	; 0x70
 8006226:	ab1d      	add	r3, sp, #116	; 0x74
 8006228:	9002      	str	r0, [sp, #8]
 800622a:	9006      	str	r0, [sp, #24]
 800622c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006230:	4809      	ldr	r0, [pc, #36]	; (8006258 <siprintf+0x38>)
 8006232:	9107      	str	r1, [sp, #28]
 8006234:	9104      	str	r1, [sp, #16]
 8006236:	4909      	ldr	r1, [pc, #36]	; (800625c <siprintf+0x3c>)
 8006238:	f853 2b04 	ldr.w	r2, [r3], #4
 800623c:	9105      	str	r1, [sp, #20]
 800623e:	6800      	ldr	r0, [r0, #0]
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	a902      	add	r1, sp, #8
 8006244:	f001 fb52 	bl	80078ec <_svfiprintf_r>
 8006248:	9b02      	ldr	r3, [sp, #8]
 800624a:	2200      	movs	r2, #0
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	b01c      	add	sp, #112	; 0x70
 8006250:	f85d eb04 	ldr.w	lr, [sp], #4
 8006254:	b003      	add	sp, #12
 8006256:	4770      	bx	lr
 8006258:	20000010 	.word	0x20000010
 800625c:	ffff0208 	.word	0xffff0208

08006260 <_vsiprintf_r>:
 8006260:	b500      	push	{lr}
 8006262:	b09b      	sub	sp, #108	; 0x6c
 8006264:	9100      	str	r1, [sp, #0]
 8006266:	9104      	str	r1, [sp, #16]
 8006268:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800626c:	9105      	str	r1, [sp, #20]
 800626e:	9102      	str	r1, [sp, #8]
 8006270:	4905      	ldr	r1, [pc, #20]	; (8006288 <_vsiprintf_r+0x28>)
 8006272:	9103      	str	r1, [sp, #12]
 8006274:	4669      	mov	r1, sp
 8006276:	f001 fb39 	bl	80078ec <_svfiprintf_r>
 800627a:	9b00      	ldr	r3, [sp, #0]
 800627c:	2200      	movs	r2, #0
 800627e:	701a      	strb	r2, [r3, #0]
 8006280:	b01b      	add	sp, #108	; 0x6c
 8006282:	f85d fb04 	ldr.w	pc, [sp], #4
 8006286:	bf00      	nop
 8006288:	ffff0208 	.word	0xffff0208

0800628c <vsiprintf>:
 800628c:	4613      	mov	r3, r2
 800628e:	460a      	mov	r2, r1
 8006290:	4601      	mov	r1, r0
 8006292:	4802      	ldr	r0, [pc, #8]	; (800629c <vsiprintf+0x10>)
 8006294:	6800      	ldr	r0, [r0, #0]
 8006296:	f7ff bfe3 	b.w	8006260 <_vsiprintf_r>
 800629a:	bf00      	nop
 800629c:	20000010 	.word	0x20000010

080062a0 <quorem>:
 80062a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	6903      	ldr	r3, [r0, #16]
 80062a6:	690c      	ldr	r4, [r1, #16]
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	4607      	mov	r7, r0
 80062ac:	f2c0 8081 	blt.w	80063b2 <quorem+0x112>
 80062b0:	3c01      	subs	r4, #1
 80062b2:	f101 0814 	add.w	r8, r1, #20
 80062b6:	f100 0514 	add.w	r5, r0, #20
 80062ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062be:	9301      	str	r3, [sp, #4]
 80062c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062c8:	3301      	adds	r3, #1
 80062ca:	429a      	cmp	r2, r3
 80062cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80062d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80062d8:	d331      	bcc.n	800633e <quorem+0x9e>
 80062da:	f04f 0e00 	mov.w	lr, #0
 80062de:	4640      	mov	r0, r8
 80062e0:	46ac      	mov	ip, r5
 80062e2:	46f2      	mov	sl, lr
 80062e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80062e8:	b293      	uxth	r3, r2
 80062ea:	fb06 e303 	mla	r3, r6, r3, lr
 80062ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	ebaa 0303 	sub.w	r3, sl, r3
 80062f8:	0c12      	lsrs	r2, r2, #16
 80062fa:	f8dc a000 	ldr.w	sl, [ip]
 80062fe:	fb06 e202 	mla	r2, r6, r2, lr
 8006302:	fa13 f38a 	uxtah	r3, r3, sl
 8006306:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800630a:	fa1f fa82 	uxth.w	sl, r2
 800630e:	f8dc 2000 	ldr.w	r2, [ip]
 8006312:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006316:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800631a:	b29b      	uxth	r3, r3
 800631c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006320:	4581      	cmp	r9, r0
 8006322:	f84c 3b04 	str.w	r3, [ip], #4
 8006326:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800632a:	d2db      	bcs.n	80062e4 <quorem+0x44>
 800632c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006330:	b92b      	cbnz	r3, 800633e <quorem+0x9e>
 8006332:	9b01      	ldr	r3, [sp, #4]
 8006334:	3b04      	subs	r3, #4
 8006336:	429d      	cmp	r5, r3
 8006338:	461a      	mov	r2, r3
 800633a:	d32e      	bcc.n	800639a <quorem+0xfa>
 800633c:	613c      	str	r4, [r7, #16]
 800633e:	4638      	mov	r0, r7
 8006340:	f001 f8be 	bl	80074c0 <__mcmp>
 8006344:	2800      	cmp	r0, #0
 8006346:	db24      	blt.n	8006392 <quorem+0xf2>
 8006348:	3601      	adds	r6, #1
 800634a:	4628      	mov	r0, r5
 800634c:	f04f 0c00 	mov.w	ip, #0
 8006350:	f858 2b04 	ldr.w	r2, [r8], #4
 8006354:	f8d0 e000 	ldr.w	lr, [r0]
 8006358:	b293      	uxth	r3, r2
 800635a:	ebac 0303 	sub.w	r3, ip, r3
 800635e:	0c12      	lsrs	r2, r2, #16
 8006360:	fa13 f38e 	uxtah	r3, r3, lr
 8006364:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006368:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800636c:	b29b      	uxth	r3, r3
 800636e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006372:	45c1      	cmp	r9, r8
 8006374:	f840 3b04 	str.w	r3, [r0], #4
 8006378:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800637c:	d2e8      	bcs.n	8006350 <quorem+0xb0>
 800637e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006382:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006386:	b922      	cbnz	r2, 8006392 <quorem+0xf2>
 8006388:	3b04      	subs	r3, #4
 800638a:	429d      	cmp	r5, r3
 800638c:	461a      	mov	r2, r3
 800638e:	d30a      	bcc.n	80063a6 <quorem+0x106>
 8006390:	613c      	str	r4, [r7, #16]
 8006392:	4630      	mov	r0, r6
 8006394:	b003      	add	sp, #12
 8006396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639a:	6812      	ldr	r2, [r2, #0]
 800639c:	3b04      	subs	r3, #4
 800639e:	2a00      	cmp	r2, #0
 80063a0:	d1cc      	bne.n	800633c <quorem+0x9c>
 80063a2:	3c01      	subs	r4, #1
 80063a4:	e7c7      	b.n	8006336 <quorem+0x96>
 80063a6:	6812      	ldr	r2, [r2, #0]
 80063a8:	3b04      	subs	r3, #4
 80063aa:	2a00      	cmp	r2, #0
 80063ac:	d1f0      	bne.n	8006390 <quorem+0xf0>
 80063ae:	3c01      	subs	r4, #1
 80063b0:	e7eb      	b.n	800638a <quorem+0xea>
 80063b2:	2000      	movs	r0, #0
 80063b4:	e7ee      	b.n	8006394 <quorem+0xf4>
	...

080063b8 <_dtoa_r>:
 80063b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	ed2d 8b02 	vpush	{d8}
 80063c0:	ec57 6b10 	vmov	r6, r7, d0
 80063c4:	b095      	sub	sp, #84	; 0x54
 80063c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80063cc:	9105      	str	r1, [sp, #20]
 80063ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80063d2:	4604      	mov	r4, r0
 80063d4:	9209      	str	r2, [sp, #36]	; 0x24
 80063d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80063d8:	b975      	cbnz	r5, 80063f8 <_dtoa_r+0x40>
 80063da:	2010      	movs	r0, #16
 80063dc:	f000 fddc 	bl	8006f98 <malloc>
 80063e0:	4602      	mov	r2, r0
 80063e2:	6260      	str	r0, [r4, #36]	; 0x24
 80063e4:	b920      	cbnz	r0, 80063f0 <_dtoa_r+0x38>
 80063e6:	4bb2      	ldr	r3, [pc, #712]	; (80066b0 <_dtoa_r+0x2f8>)
 80063e8:	21ea      	movs	r1, #234	; 0xea
 80063ea:	48b2      	ldr	r0, [pc, #712]	; (80066b4 <_dtoa_r+0x2fc>)
 80063ec:	f001 fb8e 	bl	8007b0c <__assert_func>
 80063f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80063f4:	6005      	str	r5, [r0, #0]
 80063f6:	60c5      	str	r5, [r0, #12]
 80063f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063fa:	6819      	ldr	r1, [r3, #0]
 80063fc:	b151      	cbz	r1, 8006414 <_dtoa_r+0x5c>
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	604a      	str	r2, [r1, #4]
 8006402:	2301      	movs	r3, #1
 8006404:	4093      	lsls	r3, r2
 8006406:	608b      	str	r3, [r1, #8]
 8006408:	4620      	mov	r0, r4
 800640a:	f000 fe1b 	bl	8007044 <_Bfree>
 800640e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	1e3b      	subs	r3, r7, #0
 8006416:	bfb9      	ittee	lt
 8006418:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800641c:	9303      	strlt	r3, [sp, #12]
 800641e:	2300      	movge	r3, #0
 8006420:	f8c8 3000 	strge.w	r3, [r8]
 8006424:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006428:	4ba3      	ldr	r3, [pc, #652]	; (80066b8 <_dtoa_r+0x300>)
 800642a:	bfbc      	itt	lt
 800642c:	2201      	movlt	r2, #1
 800642e:	f8c8 2000 	strlt.w	r2, [r8]
 8006432:	ea33 0309 	bics.w	r3, r3, r9
 8006436:	d11b      	bne.n	8006470 <_dtoa_r+0xb8>
 8006438:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800643a:	f242 730f 	movw	r3, #9999	; 0x270f
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006444:	4333      	orrs	r3, r6
 8006446:	f000 857a 	beq.w	8006f3e <_dtoa_r+0xb86>
 800644a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800644c:	b963      	cbnz	r3, 8006468 <_dtoa_r+0xb0>
 800644e:	4b9b      	ldr	r3, [pc, #620]	; (80066bc <_dtoa_r+0x304>)
 8006450:	e024      	b.n	800649c <_dtoa_r+0xe4>
 8006452:	4b9b      	ldr	r3, [pc, #620]	; (80066c0 <_dtoa_r+0x308>)
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	3308      	adds	r3, #8
 8006458:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	9800      	ldr	r0, [sp, #0]
 800645e:	b015      	add	sp, #84	; 0x54
 8006460:	ecbd 8b02 	vpop	{d8}
 8006464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006468:	4b94      	ldr	r3, [pc, #592]	; (80066bc <_dtoa_r+0x304>)
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	3303      	adds	r3, #3
 800646e:	e7f3      	b.n	8006458 <_dtoa_r+0xa0>
 8006470:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006474:	2200      	movs	r2, #0
 8006476:	ec51 0b17 	vmov	r0, r1, d7
 800647a:	2300      	movs	r3, #0
 800647c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006480:	f7fa fb42 	bl	8000b08 <__aeabi_dcmpeq>
 8006484:	4680      	mov	r8, r0
 8006486:	b158      	cbz	r0, 80064a0 <_dtoa_r+0xe8>
 8006488:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800648a:	2301      	movs	r3, #1
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 8551 	beq.w	8006f38 <_dtoa_r+0xb80>
 8006496:	488b      	ldr	r0, [pc, #556]	; (80066c4 <_dtoa_r+0x30c>)
 8006498:	6018      	str	r0, [r3, #0]
 800649a:	1e43      	subs	r3, r0, #1
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	e7dd      	b.n	800645c <_dtoa_r+0xa4>
 80064a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80064a4:	aa12      	add	r2, sp, #72	; 0x48
 80064a6:	a913      	add	r1, sp, #76	; 0x4c
 80064a8:	4620      	mov	r0, r4
 80064aa:	f001 f8ad 	bl	8007608 <__d2b>
 80064ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80064b2:	4683      	mov	fp, r0
 80064b4:	2d00      	cmp	r5, #0
 80064b6:	d07c      	beq.n	80065b2 <_dtoa_r+0x1fa>
 80064b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80064be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80064c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80064ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80064ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80064d2:	4b7d      	ldr	r3, [pc, #500]	; (80066c8 <_dtoa_r+0x310>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	4630      	mov	r0, r6
 80064d8:	4639      	mov	r1, r7
 80064da:	f7f9 fef5 	bl	80002c8 <__aeabi_dsub>
 80064de:	a36e      	add	r3, pc, #440	; (adr r3, 8006698 <_dtoa_r+0x2e0>)
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f7fa f8a8 	bl	8000638 <__aeabi_dmul>
 80064e8:	a36d      	add	r3, pc, #436	; (adr r3, 80066a0 <_dtoa_r+0x2e8>)
 80064ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ee:	f7f9 feed 	bl	80002cc <__adddf3>
 80064f2:	4606      	mov	r6, r0
 80064f4:	4628      	mov	r0, r5
 80064f6:	460f      	mov	r7, r1
 80064f8:	f7fa f834 	bl	8000564 <__aeabi_i2d>
 80064fc:	a36a      	add	r3, pc, #424	; (adr r3, 80066a8 <_dtoa_r+0x2f0>)
 80064fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006502:	f7fa f899 	bl	8000638 <__aeabi_dmul>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4630      	mov	r0, r6
 800650c:	4639      	mov	r1, r7
 800650e:	f7f9 fedd 	bl	80002cc <__adddf3>
 8006512:	4606      	mov	r6, r0
 8006514:	460f      	mov	r7, r1
 8006516:	f7fa fb3f 	bl	8000b98 <__aeabi_d2iz>
 800651a:	2200      	movs	r2, #0
 800651c:	4682      	mov	sl, r0
 800651e:	2300      	movs	r3, #0
 8006520:	4630      	mov	r0, r6
 8006522:	4639      	mov	r1, r7
 8006524:	f7fa fafa 	bl	8000b1c <__aeabi_dcmplt>
 8006528:	b148      	cbz	r0, 800653e <_dtoa_r+0x186>
 800652a:	4650      	mov	r0, sl
 800652c:	f7fa f81a 	bl	8000564 <__aeabi_i2d>
 8006530:	4632      	mov	r2, r6
 8006532:	463b      	mov	r3, r7
 8006534:	f7fa fae8 	bl	8000b08 <__aeabi_dcmpeq>
 8006538:	b908      	cbnz	r0, 800653e <_dtoa_r+0x186>
 800653a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800653e:	f1ba 0f16 	cmp.w	sl, #22
 8006542:	d854      	bhi.n	80065ee <_dtoa_r+0x236>
 8006544:	4b61      	ldr	r3, [pc, #388]	; (80066cc <_dtoa_r+0x314>)
 8006546:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006552:	f7fa fae3 	bl	8000b1c <__aeabi_dcmplt>
 8006556:	2800      	cmp	r0, #0
 8006558:	d04b      	beq.n	80065f2 <_dtoa_r+0x23a>
 800655a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800655e:	2300      	movs	r3, #0
 8006560:	930e      	str	r3, [sp, #56]	; 0x38
 8006562:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006564:	1b5d      	subs	r5, r3, r5
 8006566:	1e6b      	subs	r3, r5, #1
 8006568:	9304      	str	r3, [sp, #16]
 800656a:	bf43      	ittte	mi
 800656c:	2300      	movmi	r3, #0
 800656e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006572:	9304      	strmi	r3, [sp, #16]
 8006574:	f04f 0800 	movpl.w	r8, #0
 8006578:	f1ba 0f00 	cmp.w	sl, #0
 800657c:	db3b      	blt.n	80065f6 <_dtoa_r+0x23e>
 800657e:	9b04      	ldr	r3, [sp, #16]
 8006580:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006584:	4453      	add	r3, sl
 8006586:	9304      	str	r3, [sp, #16]
 8006588:	2300      	movs	r3, #0
 800658a:	9306      	str	r3, [sp, #24]
 800658c:	9b05      	ldr	r3, [sp, #20]
 800658e:	2b09      	cmp	r3, #9
 8006590:	d869      	bhi.n	8006666 <_dtoa_r+0x2ae>
 8006592:	2b05      	cmp	r3, #5
 8006594:	bfc4      	itt	gt
 8006596:	3b04      	subgt	r3, #4
 8006598:	9305      	strgt	r3, [sp, #20]
 800659a:	9b05      	ldr	r3, [sp, #20]
 800659c:	f1a3 0302 	sub.w	r3, r3, #2
 80065a0:	bfcc      	ite	gt
 80065a2:	2500      	movgt	r5, #0
 80065a4:	2501      	movle	r5, #1
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d869      	bhi.n	800667e <_dtoa_r+0x2c6>
 80065aa:	e8df f003 	tbb	[pc, r3]
 80065ae:	4e2c      	.short	0x4e2c
 80065b0:	5a4c      	.short	0x5a4c
 80065b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80065b6:	441d      	add	r5, r3
 80065b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80065bc:	2b20      	cmp	r3, #32
 80065be:	bfc1      	itttt	gt
 80065c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80065c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80065c8:	fa09 f303 	lslgt.w	r3, r9, r3
 80065cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80065d0:	bfda      	itte	le
 80065d2:	f1c3 0320 	rsble	r3, r3, #32
 80065d6:	fa06 f003 	lslle.w	r0, r6, r3
 80065da:	4318      	orrgt	r0, r3
 80065dc:	f7f9 ffb2 	bl	8000544 <__aeabi_ui2d>
 80065e0:	2301      	movs	r3, #1
 80065e2:	4606      	mov	r6, r0
 80065e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80065e8:	3d01      	subs	r5, #1
 80065ea:	9310      	str	r3, [sp, #64]	; 0x40
 80065ec:	e771      	b.n	80064d2 <_dtoa_r+0x11a>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e7b6      	b.n	8006560 <_dtoa_r+0x1a8>
 80065f2:	900e      	str	r0, [sp, #56]	; 0x38
 80065f4:	e7b5      	b.n	8006562 <_dtoa_r+0x1aa>
 80065f6:	f1ca 0300 	rsb	r3, sl, #0
 80065fa:	9306      	str	r3, [sp, #24]
 80065fc:	2300      	movs	r3, #0
 80065fe:	eba8 080a 	sub.w	r8, r8, sl
 8006602:	930d      	str	r3, [sp, #52]	; 0x34
 8006604:	e7c2      	b.n	800658c <_dtoa_r+0x1d4>
 8006606:	2300      	movs	r3, #0
 8006608:	9308      	str	r3, [sp, #32]
 800660a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800660c:	2b00      	cmp	r3, #0
 800660e:	dc39      	bgt.n	8006684 <_dtoa_r+0x2cc>
 8006610:	f04f 0901 	mov.w	r9, #1
 8006614:	f8cd 9004 	str.w	r9, [sp, #4]
 8006618:	464b      	mov	r3, r9
 800661a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800661e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006620:	2200      	movs	r2, #0
 8006622:	6042      	str	r2, [r0, #4]
 8006624:	2204      	movs	r2, #4
 8006626:	f102 0614 	add.w	r6, r2, #20
 800662a:	429e      	cmp	r6, r3
 800662c:	6841      	ldr	r1, [r0, #4]
 800662e:	d92f      	bls.n	8006690 <_dtoa_r+0x2d8>
 8006630:	4620      	mov	r0, r4
 8006632:	f000 fcc7 	bl	8006fc4 <_Balloc>
 8006636:	9000      	str	r0, [sp, #0]
 8006638:	2800      	cmp	r0, #0
 800663a:	d14b      	bne.n	80066d4 <_dtoa_r+0x31c>
 800663c:	4b24      	ldr	r3, [pc, #144]	; (80066d0 <_dtoa_r+0x318>)
 800663e:	4602      	mov	r2, r0
 8006640:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006644:	e6d1      	b.n	80063ea <_dtoa_r+0x32>
 8006646:	2301      	movs	r3, #1
 8006648:	e7de      	b.n	8006608 <_dtoa_r+0x250>
 800664a:	2300      	movs	r3, #0
 800664c:	9308      	str	r3, [sp, #32]
 800664e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006650:	eb0a 0903 	add.w	r9, sl, r3
 8006654:	f109 0301 	add.w	r3, r9, #1
 8006658:	2b01      	cmp	r3, #1
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	bfb8      	it	lt
 800665e:	2301      	movlt	r3, #1
 8006660:	e7dd      	b.n	800661e <_dtoa_r+0x266>
 8006662:	2301      	movs	r3, #1
 8006664:	e7f2      	b.n	800664c <_dtoa_r+0x294>
 8006666:	2501      	movs	r5, #1
 8006668:	2300      	movs	r3, #0
 800666a:	9305      	str	r3, [sp, #20]
 800666c:	9508      	str	r5, [sp, #32]
 800666e:	f04f 39ff 	mov.w	r9, #4294967295
 8006672:	2200      	movs	r2, #0
 8006674:	f8cd 9004 	str.w	r9, [sp, #4]
 8006678:	2312      	movs	r3, #18
 800667a:	9209      	str	r2, [sp, #36]	; 0x24
 800667c:	e7cf      	b.n	800661e <_dtoa_r+0x266>
 800667e:	2301      	movs	r3, #1
 8006680:	9308      	str	r3, [sp, #32]
 8006682:	e7f4      	b.n	800666e <_dtoa_r+0x2b6>
 8006684:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006688:	f8cd 9004 	str.w	r9, [sp, #4]
 800668c:	464b      	mov	r3, r9
 800668e:	e7c6      	b.n	800661e <_dtoa_r+0x266>
 8006690:	3101      	adds	r1, #1
 8006692:	6041      	str	r1, [r0, #4]
 8006694:	0052      	lsls	r2, r2, #1
 8006696:	e7c6      	b.n	8006626 <_dtoa_r+0x26e>
 8006698:	636f4361 	.word	0x636f4361
 800669c:	3fd287a7 	.word	0x3fd287a7
 80066a0:	8b60c8b3 	.word	0x8b60c8b3
 80066a4:	3fc68a28 	.word	0x3fc68a28
 80066a8:	509f79fb 	.word	0x509f79fb
 80066ac:	3fd34413 	.word	0x3fd34413
 80066b0:	0800877d 	.word	0x0800877d
 80066b4:	08008794 	.word	0x08008794
 80066b8:	7ff00000 	.word	0x7ff00000
 80066bc:	08008779 	.word	0x08008779
 80066c0:	08008770 	.word	0x08008770
 80066c4:	0800874d 	.word	0x0800874d
 80066c8:	3ff80000 	.word	0x3ff80000
 80066cc:	08008890 	.word	0x08008890
 80066d0:	080087f3 	.word	0x080087f3
 80066d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066d6:	9a00      	ldr	r2, [sp, #0]
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	9b01      	ldr	r3, [sp, #4]
 80066dc:	2b0e      	cmp	r3, #14
 80066de:	f200 80ad 	bhi.w	800683c <_dtoa_r+0x484>
 80066e2:	2d00      	cmp	r5, #0
 80066e4:	f000 80aa 	beq.w	800683c <_dtoa_r+0x484>
 80066e8:	f1ba 0f00 	cmp.w	sl, #0
 80066ec:	dd36      	ble.n	800675c <_dtoa_r+0x3a4>
 80066ee:	4ac3      	ldr	r2, [pc, #780]	; (80069fc <_dtoa_r+0x644>)
 80066f0:	f00a 030f 	and.w	r3, sl, #15
 80066f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066f8:	ed93 7b00 	vldr	d7, [r3]
 80066fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006700:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006704:	eeb0 8a47 	vmov.f32	s16, s14
 8006708:	eef0 8a67 	vmov.f32	s17, s15
 800670c:	d016      	beq.n	800673c <_dtoa_r+0x384>
 800670e:	4bbc      	ldr	r3, [pc, #752]	; (8006a00 <_dtoa_r+0x648>)
 8006710:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006714:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006718:	f7fa f8b8 	bl	800088c <__aeabi_ddiv>
 800671c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006720:	f007 070f 	and.w	r7, r7, #15
 8006724:	2503      	movs	r5, #3
 8006726:	4eb6      	ldr	r6, [pc, #728]	; (8006a00 <_dtoa_r+0x648>)
 8006728:	b957      	cbnz	r7, 8006740 <_dtoa_r+0x388>
 800672a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800672e:	ec53 2b18 	vmov	r2, r3, d8
 8006732:	f7fa f8ab 	bl	800088c <__aeabi_ddiv>
 8006736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800673a:	e029      	b.n	8006790 <_dtoa_r+0x3d8>
 800673c:	2502      	movs	r5, #2
 800673e:	e7f2      	b.n	8006726 <_dtoa_r+0x36e>
 8006740:	07f9      	lsls	r1, r7, #31
 8006742:	d508      	bpl.n	8006756 <_dtoa_r+0x39e>
 8006744:	ec51 0b18 	vmov	r0, r1, d8
 8006748:	e9d6 2300 	ldrd	r2, r3, [r6]
 800674c:	f7f9 ff74 	bl	8000638 <__aeabi_dmul>
 8006750:	ec41 0b18 	vmov	d8, r0, r1
 8006754:	3501      	adds	r5, #1
 8006756:	107f      	asrs	r7, r7, #1
 8006758:	3608      	adds	r6, #8
 800675a:	e7e5      	b.n	8006728 <_dtoa_r+0x370>
 800675c:	f000 80a6 	beq.w	80068ac <_dtoa_r+0x4f4>
 8006760:	f1ca 0600 	rsb	r6, sl, #0
 8006764:	4ba5      	ldr	r3, [pc, #660]	; (80069fc <_dtoa_r+0x644>)
 8006766:	4fa6      	ldr	r7, [pc, #664]	; (8006a00 <_dtoa_r+0x648>)
 8006768:	f006 020f 	and.w	r2, r6, #15
 800676c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006778:	f7f9 ff5e 	bl	8000638 <__aeabi_dmul>
 800677c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006780:	1136      	asrs	r6, r6, #4
 8006782:	2300      	movs	r3, #0
 8006784:	2502      	movs	r5, #2
 8006786:	2e00      	cmp	r6, #0
 8006788:	f040 8085 	bne.w	8006896 <_dtoa_r+0x4de>
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1d2      	bne.n	8006736 <_dtoa_r+0x37e>
 8006790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 808c 	beq.w	80068b0 <_dtoa_r+0x4f8>
 8006798:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800679c:	4b99      	ldr	r3, [pc, #612]	; (8006a04 <_dtoa_r+0x64c>)
 800679e:	2200      	movs	r2, #0
 80067a0:	4630      	mov	r0, r6
 80067a2:	4639      	mov	r1, r7
 80067a4:	f7fa f9ba 	bl	8000b1c <__aeabi_dcmplt>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	f000 8081 	beq.w	80068b0 <_dtoa_r+0x4f8>
 80067ae:	9b01      	ldr	r3, [sp, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d07d      	beq.n	80068b0 <_dtoa_r+0x4f8>
 80067b4:	f1b9 0f00 	cmp.w	r9, #0
 80067b8:	dd3c      	ble.n	8006834 <_dtoa_r+0x47c>
 80067ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80067be:	9307      	str	r3, [sp, #28]
 80067c0:	2200      	movs	r2, #0
 80067c2:	4b91      	ldr	r3, [pc, #580]	; (8006a08 <_dtoa_r+0x650>)
 80067c4:	4630      	mov	r0, r6
 80067c6:	4639      	mov	r1, r7
 80067c8:	f7f9 ff36 	bl	8000638 <__aeabi_dmul>
 80067cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067d0:	3501      	adds	r5, #1
 80067d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80067d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067da:	4628      	mov	r0, r5
 80067dc:	f7f9 fec2 	bl	8000564 <__aeabi_i2d>
 80067e0:	4632      	mov	r2, r6
 80067e2:	463b      	mov	r3, r7
 80067e4:	f7f9 ff28 	bl	8000638 <__aeabi_dmul>
 80067e8:	4b88      	ldr	r3, [pc, #544]	; (8006a0c <_dtoa_r+0x654>)
 80067ea:	2200      	movs	r2, #0
 80067ec:	f7f9 fd6e 	bl	80002cc <__adddf3>
 80067f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80067f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067f8:	9303      	str	r3, [sp, #12]
 80067fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d15c      	bne.n	80068ba <_dtoa_r+0x502>
 8006800:	4b83      	ldr	r3, [pc, #524]	; (8006a10 <_dtoa_r+0x658>)
 8006802:	2200      	movs	r2, #0
 8006804:	4630      	mov	r0, r6
 8006806:	4639      	mov	r1, r7
 8006808:	f7f9 fd5e 	bl	80002c8 <__aeabi_dsub>
 800680c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006810:	4606      	mov	r6, r0
 8006812:	460f      	mov	r7, r1
 8006814:	f7fa f9a0 	bl	8000b58 <__aeabi_dcmpgt>
 8006818:	2800      	cmp	r0, #0
 800681a:	f040 8296 	bne.w	8006d4a <_dtoa_r+0x992>
 800681e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006822:	4630      	mov	r0, r6
 8006824:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006828:	4639      	mov	r1, r7
 800682a:	f7fa f977 	bl	8000b1c <__aeabi_dcmplt>
 800682e:	2800      	cmp	r0, #0
 8006830:	f040 8288 	bne.w	8006d44 <_dtoa_r+0x98c>
 8006834:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006838:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800683c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800683e:	2b00      	cmp	r3, #0
 8006840:	f2c0 8158 	blt.w	8006af4 <_dtoa_r+0x73c>
 8006844:	f1ba 0f0e 	cmp.w	sl, #14
 8006848:	f300 8154 	bgt.w	8006af4 <_dtoa_r+0x73c>
 800684c:	4b6b      	ldr	r3, [pc, #428]	; (80069fc <_dtoa_r+0x644>)
 800684e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006852:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006858:	2b00      	cmp	r3, #0
 800685a:	f280 80e3 	bge.w	8006a24 <_dtoa_r+0x66c>
 800685e:	9b01      	ldr	r3, [sp, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	f300 80df 	bgt.w	8006a24 <_dtoa_r+0x66c>
 8006866:	f040 826d 	bne.w	8006d44 <_dtoa_r+0x98c>
 800686a:	4b69      	ldr	r3, [pc, #420]	; (8006a10 <_dtoa_r+0x658>)
 800686c:	2200      	movs	r2, #0
 800686e:	4640      	mov	r0, r8
 8006870:	4649      	mov	r1, r9
 8006872:	f7f9 fee1 	bl	8000638 <__aeabi_dmul>
 8006876:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800687a:	f7fa f963 	bl	8000b44 <__aeabi_dcmpge>
 800687e:	9e01      	ldr	r6, [sp, #4]
 8006880:	4637      	mov	r7, r6
 8006882:	2800      	cmp	r0, #0
 8006884:	f040 8243 	bne.w	8006d0e <_dtoa_r+0x956>
 8006888:	9d00      	ldr	r5, [sp, #0]
 800688a:	2331      	movs	r3, #49	; 0x31
 800688c:	f805 3b01 	strb.w	r3, [r5], #1
 8006890:	f10a 0a01 	add.w	sl, sl, #1
 8006894:	e23f      	b.n	8006d16 <_dtoa_r+0x95e>
 8006896:	07f2      	lsls	r2, r6, #31
 8006898:	d505      	bpl.n	80068a6 <_dtoa_r+0x4ee>
 800689a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800689e:	f7f9 fecb 	bl	8000638 <__aeabi_dmul>
 80068a2:	3501      	adds	r5, #1
 80068a4:	2301      	movs	r3, #1
 80068a6:	1076      	asrs	r6, r6, #1
 80068a8:	3708      	adds	r7, #8
 80068aa:	e76c      	b.n	8006786 <_dtoa_r+0x3ce>
 80068ac:	2502      	movs	r5, #2
 80068ae:	e76f      	b.n	8006790 <_dtoa_r+0x3d8>
 80068b0:	9b01      	ldr	r3, [sp, #4]
 80068b2:	f8cd a01c 	str.w	sl, [sp, #28]
 80068b6:	930c      	str	r3, [sp, #48]	; 0x30
 80068b8:	e78d      	b.n	80067d6 <_dtoa_r+0x41e>
 80068ba:	9900      	ldr	r1, [sp, #0]
 80068bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80068be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068c0:	4b4e      	ldr	r3, [pc, #312]	; (80069fc <_dtoa_r+0x644>)
 80068c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80068c6:	4401      	add	r1, r0
 80068c8:	9102      	str	r1, [sp, #8]
 80068ca:	9908      	ldr	r1, [sp, #32]
 80068cc:	eeb0 8a47 	vmov.f32	s16, s14
 80068d0:	eef0 8a67 	vmov.f32	s17, s15
 80068d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068dc:	2900      	cmp	r1, #0
 80068de:	d045      	beq.n	800696c <_dtoa_r+0x5b4>
 80068e0:	494c      	ldr	r1, [pc, #304]	; (8006a14 <_dtoa_r+0x65c>)
 80068e2:	2000      	movs	r0, #0
 80068e4:	f7f9 ffd2 	bl	800088c <__aeabi_ddiv>
 80068e8:	ec53 2b18 	vmov	r2, r3, d8
 80068ec:	f7f9 fcec 	bl	80002c8 <__aeabi_dsub>
 80068f0:	9d00      	ldr	r5, [sp, #0]
 80068f2:	ec41 0b18 	vmov	d8, r0, r1
 80068f6:	4639      	mov	r1, r7
 80068f8:	4630      	mov	r0, r6
 80068fa:	f7fa f94d 	bl	8000b98 <__aeabi_d2iz>
 80068fe:	900c      	str	r0, [sp, #48]	; 0x30
 8006900:	f7f9 fe30 	bl	8000564 <__aeabi_i2d>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4630      	mov	r0, r6
 800690a:	4639      	mov	r1, r7
 800690c:	f7f9 fcdc 	bl	80002c8 <__aeabi_dsub>
 8006910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006912:	3330      	adds	r3, #48	; 0x30
 8006914:	f805 3b01 	strb.w	r3, [r5], #1
 8006918:	ec53 2b18 	vmov	r2, r3, d8
 800691c:	4606      	mov	r6, r0
 800691e:	460f      	mov	r7, r1
 8006920:	f7fa f8fc 	bl	8000b1c <__aeabi_dcmplt>
 8006924:	2800      	cmp	r0, #0
 8006926:	d165      	bne.n	80069f4 <_dtoa_r+0x63c>
 8006928:	4632      	mov	r2, r6
 800692a:	463b      	mov	r3, r7
 800692c:	4935      	ldr	r1, [pc, #212]	; (8006a04 <_dtoa_r+0x64c>)
 800692e:	2000      	movs	r0, #0
 8006930:	f7f9 fcca 	bl	80002c8 <__aeabi_dsub>
 8006934:	ec53 2b18 	vmov	r2, r3, d8
 8006938:	f7fa f8f0 	bl	8000b1c <__aeabi_dcmplt>
 800693c:	2800      	cmp	r0, #0
 800693e:	f040 80b9 	bne.w	8006ab4 <_dtoa_r+0x6fc>
 8006942:	9b02      	ldr	r3, [sp, #8]
 8006944:	429d      	cmp	r5, r3
 8006946:	f43f af75 	beq.w	8006834 <_dtoa_r+0x47c>
 800694a:	4b2f      	ldr	r3, [pc, #188]	; (8006a08 <_dtoa_r+0x650>)
 800694c:	ec51 0b18 	vmov	r0, r1, d8
 8006950:	2200      	movs	r2, #0
 8006952:	f7f9 fe71 	bl	8000638 <__aeabi_dmul>
 8006956:	4b2c      	ldr	r3, [pc, #176]	; (8006a08 <_dtoa_r+0x650>)
 8006958:	ec41 0b18 	vmov	d8, r0, r1
 800695c:	2200      	movs	r2, #0
 800695e:	4630      	mov	r0, r6
 8006960:	4639      	mov	r1, r7
 8006962:	f7f9 fe69 	bl	8000638 <__aeabi_dmul>
 8006966:	4606      	mov	r6, r0
 8006968:	460f      	mov	r7, r1
 800696a:	e7c4      	b.n	80068f6 <_dtoa_r+0x53e>
 800696c:	ec51 0b17 	vmov	r0, r1, d7
 8006970:	f7f9 fe62 	bl	8000638 <__aeabi_dmul>
 8006974:	9b02      	ldr	r3, [sp, #8]
 8006976:	9d00      	ldr	r5, [sp, #0]
 8006978:	930c      	str	r3, [sp, #48]	; 0x30
 800697a:	ec41 0b18 	vmov	d8, r0, r1
 800697e:	4639      	mov	r1, r7
 8006980:	4630      	mov	r0, r6
 8006982:	f7fa f909 	bl	8000b98 <__aeabi_d2iz>
 8006986:	9011      	str	r0, [sp, #68]	; 0x44
 8006988:	f7f9 fdec 	bl	8000564 <__aeabi_i2d>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4630      	mov	r0, r6
 8006992:	4639      	mov	r1, r7
 8006994:	f7f9 fc98 	bl	80002c8 <__aeabi_dsub>
 8006998:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800699a:	3330      	adds	r3, #48	; 0x30
 800699c:	f805 3b01 	strb.w	r3, [r5], #1
 80069a0:	9b02      	ldr	r3, [sp, #8]
 80069a2:	429d      	cmp	r5, r3
 80069a4:	4606      	mov	r6, r0
 80069a6:	460f      	mov	r7, r1
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	d134      	bne.n	8006a18 <_dtoa_r+0x660>
 80069ae:	4b19      	ldr	r3, [pc, #100]	; (8006a14 <_dtoa_r+0x65c>)
 80069b0:	ec51 0b18 	vmov	r0, r1, d8
 80069b4:	f7f9 fc8a 	bl	80002cc <__adddf3>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4630      	mov	r0, r6
 80069be:	4639      	mov	r1, r7
 80069c0:	f7fa f8ca 	bl	8000b58 <__aeabi_dcmpgt>
 80069c4:	2800      	cmp	r0, #0
 80069c6:	d175      	bne.n	8006ab4 <_dtoa_r+0x6fc>
 80069c8:	ec53 2b18 	vmov	r2, r3, d8
 80069cc:	4911      	ldr	r1, [pc, #68]	; (8006a14 <_dtoa_r+0x65c>)
 80069ce:	2000      	movs	r0, #0
 80069d0:	f7f9 fc7a 	bl	80002c8 <__aeabi_dsub>
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	4630      	mov	r0, r6
 80069da:	4639      	mov	r1, r7
 80069dc:	f7fa f89e 	bl	8000b1c <__aeabi_dcmplt>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	f43f af27 	beq.w	8006834 <_dtoa_r+0x47c>
 80069e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069e8:	1e6b      	subs	r3, r5, #1
 80069ea:	930c      	str	r3, [sp, #48]	; 0x30
 80069ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069f0:	2b30      	cmp	r3, #48	; 0x30
 80069f2:	d0f8      	beq.n	80069e6 <_dtoa_r+0x62e>
 80069f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80069f8:	e04a      	b.n	8006a90 <_dtoa_r+0x6d8>
 80069fa:	bf00      	nop
 80069fc:	08008890 	.word	0x08008890
 8006a00:	08008868 	.word	0x08008868
 8006a04:	3ff00000 	.word	0x3ff00000
 8006a08:	40240000 	.word	0x40240000
 8006a0c:	401c0000 	.word	0x401c0000
 8006a10:	40140000 	.word	0x40140000
 8006a14:	3fe00000 	.word	0x3fe00000
 8006a18:	4baf      	ldr	r3, [pc, #700]	; (8006cd8 <_dtoa_r+0x920>)
 8006a1a:	f7f9 fe0d 	bl	8000638 <__aeabi_dmul>
 8006a1e:	4606      	mov	r6, r0
 8006a20:	460f      	mov	r7, r1
 8006a22:	e7ac      	b.n	800697e <_dtoa_r+0x5c6>
 8006a24:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a28:	9d00      	ldr	r5, [sp, #0]
 8006a2a:	4642      	mov	r2, r8
 8006a2c:	464b      	mov	r3, r9
 8006a2e:	4630      	mov	r0, r6
 8006a30:	4639      	mov	r1, r7
 8006a32:	f7f9 ff2b 	bl	800088c <__aeabi_ddiv>
 8006a36:	f7fa f8af 	bl	8000b98 <__aeabi_d2iz>
 8006a3a:	9002      	str	r0, [sp, #8]
 8006a3c:	f7f9 fd92 	bl	8000564 <__aeabi_i2d>
 8006a40:	4642      	mov	r2, r8
 8006a42:	464b      	mov	r3, r9
 8006a44:	f7f9 fdf8 	bl	8000638 <__aeabi_dmul>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	4639      	mov	r1, r7
 8006a50:	f7f9 fc3a 	bl	80002c8 <__aeabi_dsub>
 8006a54:	9e02      	ldr	r6, [sp, #8]
 8006a56:	9f01      	ldr	r7, [sp, #4]
 8006a58:	3630      	adds	r6, #48	; 0x30
 8006a5a:	f805 6b01 	strb.w	r6, [r5], #1
 8006a5e:	9e00      	ldr	r6, [sp, #0]
 8006a60:	1bae      	subs	r6, r5, r6
 8006a62:	42b7      	cmp	r7, r6
 8006a64:	4602      	mov	r2, r0
 8006a66:	460b      	mov	r3, r1
 8006a68:	d137      	bne.n	8006ada <_dtoa_r+0x722>
 8006a6a:	f7f9 fc2f 	bl	80002cc <__adddf3>
 8006a6e:	4642      	mov	r2, r8
 8006a70:	464b      	mov	r3, r9
 8006a72:	4606      	mov	r6, r0
 8006a74:	460f      	mov	r7, r1
 8006a76:	f7fa f86f 	bl	8000b58 <__aeabi_dcmpgt>
 8006a7a:	b9c8      	cbnz	r0, 8006ab0 <_dtoa_r+0x6f8>
 8006a7c:	4642      	mov	r2, r8
 8006a7e:	464b      	mov	r3, r9
 8006a80:	4630      	mov	r0, r6
 8006a82:	4639      	mov	r1, r7
 8006a84:	f7fa f840 	bl	8000b08 <__aeabi_dcmpeq>
 8006a88:	b110      	cbz	r0, 8006a90 <_dtoa_r+0x6d8>
 8006a8a:	9b02      	ldr	r3, [sp, #8]
 8006a8c:	07d9      	lsls	r1, r3, #31
 8006a8e:	d40f      	bmi.n	8006ab0 <_dtoa_r+0x6f8>
 8006a90:	4620      	mov	r0, r4
 8006a92:	4659      	mov	r1, fp
 8006a94:	f000 fad6 	bl	8007044 <_Bfree>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	702b      	strb	r3, [r5, #0]
 8006a9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a9e:	f10a 0001 	add.w	r0, sl, #1
 8006aa2:	6018      	str	r0, [r3, #0]
 8006aa4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f43f acd8 	beq.w	800645c <_dtoa_r+0xa4>
 8006aac:	601d      	str	r5, [r3, #0]
 8006aae:	e4d5      	b.n	800645c <_dtoa_r+0xa4>
 8006ab0:	f8cd a01c 	str.w	sl, [sp, #28]
 8006ab4:	462b      	mov	r3, r5
 8006ab6:	461d      	mov	r5, r3
 8006ab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006abc:	2a39      	cmp	r2, #57	; 0x39
 8006abe:	d108      	bne.n	8006ad2 <_dtoa_r+0x71a>
 8006ac0:	9a00      	ldr	r2, [sp, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d1f7      	bne.n	8006ab6 <_dtoa_r+0x6fe>
 8006ac6:	9a07      	ldr	r2, [sp, #28]
 8006ac8:	9900      	ldr	r1, [sp, #0]
 8006aca:	3201      	adds	r2, #1
 8006acc:	9207      	str	r2, [sp, #28]
 8006ace:	2230      	movs	r2, #48	; 0x30
 8006ad0:	700a      	strb	r2, [r1, #0]
 8006ad2:	781a      	ldrb	r2, [r3, #0]
 8006ad4:	3201      	adds	r2, #1
 8006ad6:	701a      	strb	r2, [r3, #0]
 8006ad8:	e78c      	b.n	80069f4 <_dtoa_r+0x63c>
 8006ada:	4b7f      	ldr	r3, [pc, #508]	; (8006cd8 <_dtoa_r+0x920>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	f7f9 fdab 	bl	8000638 <__aeabi_dmul>
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	4606      	mov	r6, r0
 8006ae8:	460f      	mov	r7, r1
 8006aea:	f7fa f80d 	bl	8000b08 <__aeabi_dcmpeq>
 8006aee:	2800      	cmp	r0, #0
 8006af0:	d09b      	beq.n	8006a2a <_dtoa_r+0x672>
 8006af2:	e7cd      	b.n	8006a90 <_dtoa_r+0x6d8>
 8006af4:	9a08      	ldr	r2, [sp, #32]
 8006af6:	2a00      	cmp	r2, #0
 8006af8:	f000 80c4 	beq.w	8006c84 <_dtoa_r+0x8cc>
 8006afc:	9a05      	ldr	r2, [sp, #20]
 8006afe:	2a01      	cmp	r2, #1
 8006b00:	f300 80a8 	bgt.w	8006c54 <_dtoa_r+0x89c>
 8006b04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b06:	2a00      	cmp	r2, #0
 8006b08:	f000 80a0 	beq.w	8006c4c <_dtoa_r+0x894>
 8006b0c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b10:	9e06      	ldr	r6, [sp, #24]
 8006b12:	4645      	mov	r5, r8
 8006b14:	9a04      	ldr	r2, [sp, #16]
 8006b16:	2101      	movs	r1, #1
 8006b18:	441a      	add	r2, r3
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	4498      	add	r8, r3
 8006b1e:	9204      	str	r2, [sp, #16]
 8006b20:	f000 fb4c 	bl	80071bc <__i2b>
 8006b24:	4607      	mov	r7, r0
 8006b26:	2d00      	cmp	r5, #0
 8006b28:	dd0b      	ble.n	8006b42 <_dtoa_r+0x78a>
 8006b2a:	9b04      	ldr	r3, [sp, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dd08      	ble.n	8006b42 <_dtoa_r+0x78a>
 8006b30:	42ab      	cmp	r3, r5
 8006b32:	9a04      	ldr	r2, [sp, #16]
 8006b34:	bfa8      	it	ge
 8006b36:	462b      	movge	r3, r5
 8006b38:	eba8 0803 	sub.w	r8, r8, r3
 8006b3c:	1aed      	subs	r5, r5, r3
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	9304      	str	r3, [sp, #16]
 8006b42:	9b06      	ldr	r3, [sp, #24]
 8006b44:	b1fb      	cbz	r3, 8006b86 <_dtoa_r+0x7ce>
 8006b46:	9b08      	ldr	r3, [sp, #32]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 809f 	beq.w	8006c8c <_dtoa_r+0x8d4>
 8006b4e:	2e00      	cmp	r6, #0
 8006b50:	dd11      	ble.n	8006b76 <_dtoa_r+0x7be>
 8006b52:	4639      	mov	r1, r7
 8006b54:	4632      	mov	r2, r6
 8006b56:	4620      	mov	r0, r4
 8006b58:	f000 fbec 	bl	8007334 <__pow5mult>
 8006b5c:	465a      	mov	r2, fp
 8006b5e:	4601      	mov	r1, r0
 8006b60:	4607      	mov	r7, r0
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 fb40 	bl	80071e8 <__multiply>
 8006b68:	4659      	mov	r1, fp
 8006b6a:	9007      	str	r0, [sp, #28]
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f000 fa69 	bl	8007044 <_Bfree>
 8006b72:	9b07      	ldr	r3, [sp, #28]
 8006b74:	469b      	mov	fp, r3
 8006b76:	9b06      	ldr	r3, [sp, #24]
 8006b78:	1b9a      	subs	r2, r3, r6
 8006b7a:	d004      	beq.n	8006b86 <_dtoa_r+0x7ce>
 8006b7c:	4659      	mov	r1, fp
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f000 fbd8 	bl	8007334 <__pow5mult>
 8006b84:	4683      	mov	fp, r0
 8006b86:	2101      	movs	r1, #1
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 fb17 	bl	80071bc <__i2b>
 8006b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	4606      	mov	r6, r0
 8006b94:	dd7c      	ble.n	8006c90 <_dtoa_r+0x8d8>
 8006b96:	461a      	mov	r2, r3
 8006b98:	4601      	mov	r1, r0
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f000 fbca 	bl	8007334 <__pow5mult>
 8006ba0:	9b05      	ldr	r3, [sp, #20]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	dd76      	ble.n	8006c96 <_dtoa_r+0x8de>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	9306      	str	r3, [sp, #24]
 8006bac:	6933      	ldr	r3, [r6, #16]
 8006bae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006bb2:	6918      	ldr	r0, [r3, #16]
 8006bb4:	f000 fab2 	bl	800711c <__hi0bits>
 8006bb8:	f1c0 0020 	rsb	r0, r0, #32
 8006bbc:	9b04      	ldr	r3, [sp, #16]
 8006bbe:	4418      	add	r0, r3
 8006bc0:	f010 001f 	ands.w	r0, r0, #31
 8006bc4:	f000 8086 	beq.w	8006cd4 <_dtoa_r+0x91c>
 8006bc8:	f1c0 0320 	rsb	r3, r0, #32
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	dd7f      	ble.n	8006cd0 <_dtoa_r+0x918>
 8006bd0:	f1c0 001c 	rsb	r0, r0, #28
 8006bd4:	9b04      	ldr	r3, [sp, #16]
 8006bd6:	4403      	add	r3, r0
 8006bd8:	4480      	add	r8, r0
 8006bda:	4405      	add	r5, r0
 8006bdc:	9304      	str	r3, [sp, #16]
 8006bde:	f1b8 0f00 	cmp.w	r8, #0
 8006be2:	dd05      	ble.n	8006bf0 <_dtoa_r+0x838>
 8006be4:	4659      	mov	r1, fp
 8006be6:	4642      	mov	r2, r8
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 fbfd 	bl	80073e8 <__lshift>
 8006bee:	4683      	mov	fp, r0
 8006bf0:	9b04      	ldr	r3, [sp, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	dd05      	ble.n	8006c02 <_dtoa_r+0x84a>
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f000 fbf4 	bl	80073e8 <__lshift>
 8006c00:	4606      	mov	r6, r0
 8006c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d069      	beq.n	8006cdc <_dtoa_r+0x924>
 8006c08:	4631      	mov	r1, r6
 8006c0a:	4658      	mov	r0, fp
 8006c0c:	f000 fc58 	bl	80074c0 <__mcmp>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	da63      	bge.n	8006cdc <_dtoa_r+0x924>
 8006c14:	2300      	movs	r3, #0
 8006c16:	4659      	mov	r1, fp
 8006c18:	220a      	movs	r2, #10
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f000 fa34 	bl	8007088 <__multadd>
 8006c20:	9b08      	ldr	r3, [sp, #32]
 8006c22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c26:	4683      	mov	fp, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 818f 	beq.w	8006f4c <_dtoa_r+0xb94>
 8006c2e:	4639      	mov	r1, r7
 8006c30:	2300      	movs	r3, #0
 8006c32:	220a      	movs	r2, #10
 8006c34:	4620      	mov	r0, r4
 8006c36:	f000 fa27 	bl	8007088 <__multadd>
 8006c3a:	f1b9 0f00 	cmp.w	r9, #0
 8006c3e:	4607      	mov	r7, r0
 8006c40:	f300 808e 	bgt.w	8006d60 <_dtoa_r+0x9a8>
 8006c44:	9b05      	ldr	r3, [sp, #20]
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	dc50      	bgt.n	8006cec <_dtoa_r+0x934>
 8006c4a:	e089      	b.n	8006d60 <_dtoa_r+0x9a8>
 8006c4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c52:	e75d      	b.n	8006b10 <_dtoa_r+0x758>
 8006c54:	9b01      	ldr	r3, [sp, #4]
 8006c56:	1e5e      	subs	r6, r3, #1
 8006c58:	9b06      	ldr	r3, [sp, #24]
 8006c5a:	42b3      	cmp	r3, r6
 8006c5c:	bfbf      	itttt	lt
 8006c5e:	9b06      	ldrlt	r3, [sp, #24]
 8006c60:	9606      	strlt	r6, [sp, #24]
 8006c62:	1af2      	sublt	r2, r6, r3
 8006c64:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006c66:	bfb6      	itet	lt
 8006c68:	189b      	addlt	r3, r3, r2
 8006c6a:	1b9e      	subge	r6, r3, r6
 8006c6c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006c6e:	9b01      	ldr	r3, [sp, #4]
 8006c70:	bfb8      	it	lt
 8006c72:	2600      	movlt	r6, #0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bfb5      	itete	lt
 8006c78:	eba8 0503 	sublt.w	r5, r8, r3
 8006c7c:	9b01      	ldrge	r3, [sp, #4]
 8006c7e:	2300      	movlt	r3, #0
 8006c80:	4645      	movge	r5, r8
 8006c82:	e747      	b.n	8006b14 <_dtoa_r+0x75c>
 8006c84:	9e06      	ldr	r6, [sp, #24]
 8006c86:	9f08      	ldr	r7, [sp, #32]
 8006c88:	4645      	mov	r5, r8
 8006c8a:	e74c      	b.n	8006b26 <_dtoa_r+0x76e>
 8006c8c:	9a06      	ldr	r2, [sp, #24]
 8006c8e:	e775      	b.n	8006b7c <_dtoa_r+0x7c4>
 8006c90:	9b05      	ldr	r3, [sp, #20]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	dc18      	bgt.n	8006cc8 <_dtoa_r+0x910>
 8006c96:	9b02      	ldr	r3, [sp, #8]
 8006c98:	b9b3      	cbnz	r3, 8006cc8 <_dtoa_r+0x910>
 8006c9a:	9b03      	ldr	r3, [sp, #12]
 8006c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ca0:	b9a3      	cbnz	r3, 8006ccc <_dtoa_r+0x914>
 8006ca2:	9b03      	ldr	r3, [sp, #12]
 8006ca4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ca8:	0d1b      	lsrs	r3, r3, #20
 8006caa:	051b      	lsls	r3, r3, #20
 8006cac:	b12b      	cbz	r3, 8006cba <_dtoa_r+0x902>
 8006cae:	9b04      	ldr	r3, [sp, #16]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	9304      	str	r3, [sp, #16]
 8006cb4:	f108 0801 	add.w	r8, r8, #1
 8006cb8:	2301      	movs	r3, #1
 8006cba:	9306      	str	r3, [sp, #24]
 8006cbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f47f af74 	bne.w	8006bac <_dtoa_r+0x7f4>
 8006cc4:	2001      	movs	r0, #1
 8006cc6:	e779      	b.n	8006bbc <_dtoa_r+0x804>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	e7f6      	b.n	8006cba <_dtoa_r+0x902>
 8006ccc:	9b02      	ldr	r3, [sp, #8]
 8006cce:	e7f4      	b.n	8006cba <_dtoa_r+0x902>
 8006cd0:	d085      	beq.n	8006bde <_dtoa_r+0x826>
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	301c      	adds	r0, #28
 8006cd6:	e77d      	b.n	8006bd4 <_dtoa_r+0x81c>
 8006cd8:	40240000 	.word	0x40240000
 8006cdc:	9b01      	ldr	r3, [sp, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	dc38      	bgt.n	8006d54 <_dtoa_r+0x99c>
 8006ce2:	9b05      	ldr	r3, [sp, #20]
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	dd35      	ble.n	8006d54 <_dtoa_r+0x99c>
 8006ce8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006cec:	f1b9 0f00 	cmp.w	r9, #0
 8006cf0:	d10d      	bne.n	8006d0e <_dtoa_r+0x956>
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	464b      	mov	r3, r9
 8006cf6:	2205      	movs	r2, #5
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 f9c5 	bl	8007088 <__multadd>
 8006cfe:	4601      	mov	r1, r0
 8006d00:	4606      	mov	r6, r0
 8006d02:	4658      	mov	r0, fp
 8006d04:	f000 fbdc 	bl	80074c0 <__mcmp>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	f73f adbd 	bgt.w	8006888 <_dtoa_r+0x4d0>
 8006d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d10:	9d00      	ldr	r5, [sp, #0]
 8006d12:	ea6f 0a03 	mvn.w	sl, r3
 8006d16:	f04f 0800 	mov.w	r8, #0
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f000 f991 	bl	8007044 <_Bfree>
 8006d22:	2f00      	cmp	r7, #0
 8006d24:	f43f aeb4 	beq.w	8006a90 <_dtoa_r+0x6d8>
 8006d28:	f1b8 0f00 	cmp.w	r8, #0
 8006d2c:	d005      	beq.n	8006d3a <_dtoa_r+0x982>
 8006d2e:	45b8      	cmp	r8, r7
 8006d30:	d003      	beq.n	8006d3a <_dtoa_r+0x982>
 8006d32:	4641      	mov	r1, r8
 8006d34:	4620      	mov	r0, r4
 8006d36:	f000 f985 	bl	8007044 <_Bfree>
 8006d3a:	4639      	mov	r1, r7
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f000 f981 	bl	8007044 <_Bfree>
 8006d42:	e6a5      	b.n	8006a90 <_dtoa_r+0x6d8>
 8006d44:	2600      	movs	r6, #0
 8006d46:	4637      	mov	r7, r6
 8006d48:	e7e1      	b.n	8006d0e <_dtoa_r+0x956>
 8006d4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006d4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006d50:	4637      	mov	r7, r6
 8006d52:	e599      	b.n	8006888 <_dtoa_r+0x4d0>
 8006d54:	9b08      	ldr	r3, [sp, #32]
 8006d56:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 80fd 	beq.w	8006f5a <_dtoa_r+0xba2>
 8006d60:	2d00      	cmp	r5, #0
 8006d62:	dd05      	ble.n	8006d70 <_dtoa_r+0x9b8>
 8006d64:	4639      	mov	r1, r7
 8006d66:	462a      	mov	r2, r5
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f000 fb3d 	bl	80073e8 <__lshift>
 8006d6e:	4607      	mov	r7, r0
 8006d70:	9b06      	ldr	r3, [sp, #24]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d05c      	beq.n	8006e30 <_dtoa_r+0xa78>
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f000 f923 	bl	8006fc4 <_Balloc>
 8006d7e:	4605      	mov	r5, r0
 8006d80:	b928      	cbnz	r0, 8006d8e <_dtoa_r+0x9d6>
 8006d82:	4b80      	ldr	r3, [pc, #512]	; (8006f84 <_dtoa_r+0xbcc>)
 8006d84:	4602      	mov	r2, r0
 8006d86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d8a:	f7ff bb2e 	b.w	80063ea <_dtoa_r+0x32>
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	3202      	adds	r2, #2
 8006d92:	0092      	lsls	r2, r2, #2
 8006d94:	f107 010c 	add.w	r1, r7, #12
 8006d98:	300c      	adds	r0, #12
 8006d9a:	f000 f905 	bl	8006fa8 <memcpy>
 8006d9e:	2201      	movs	r2, #1
 8006da0:	4629      	mov	r1, r5
 8006da2:	4620      	mov	r0, r4
 8006da4:	f000 fb20 	bl	80073e8 <__lshift>
 8006da8:	9b00      	ldr	r3, [sp, #0]
 8006daa:	3301      	adds	r3, #1
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	9b00      	ldr	r3, [sp, #0]
 8006db0:	444b      	add	r3, r9
 8006db2:	9307      	str	r3, [sp, #28]
 8006db4:	9b02      	ldr	r3, [sp, #8]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	46b8      	mov	r8, r7
 8006dbc:	9306      	str	r3, [sp, #24]
 8006dbe:	4607      	mov	r7, r0
 8006dc0:	9b01      	ldr	r3, [sp, #4]
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	4658      	mov	r0, fp
 8006dc8:	9302      	str	r3, [sp, #8]
 8006dca:	f7ff fa69 	bl	80062a0 <quorem>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	3330      	adds	r3, #48	; 0x30
 8006dd2:	9004      	str	r0, [sp, #16]
 8006dd4:	4641      	mov	r1, r8
 8006dd6:	4658      	mov	r0, fp
 8006dd8:	9308      	str	r3, [sp, #32]
 8006dda:	f000 fb71 	bl	80074c0 <__mcmp>
 8006dde:	463a      	mov	r2, r7
 8006de0:	4681      	mov	r9, r0
 8006de2:	4631      	mov	r1, r6
 8006de4:	4620      	mov	r0, r4
 8006de6:	f000 fb87 	bl	80074f8 <__mdiff>
 8006dea:	68c2      	ldr	r2, [r0, #12]
 8006dec:	9b08      	ldr	r3, [sp, #32]
 8006dee:	4605      	mov	r5, r0
 8006df0:	bb02      	cbnz	r2, 8006e34 <_dtoa_r+0xa7c>
 8006df2:	4601      	mov	r1, r0
 8006df4:	4658      	mov	r0, fp
 8006df6:	f000 fb63 	bl	80074c0 <__mcmp>
 8006dfa:	9b08      	ldr	r3, [sp, #32]
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	4629      	mov	r1, r5
 8006e00:	4620      	mov	r0, r4
 8006e02:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006e06:	f000 f91d 	bl	8007044 <_Bfree>
 8006e0a:	9b05      	ldr	r3, [sp, #20]
 8006e0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e0e:	9d01      	ldr	r5, [sp, #4]
 8006e10:	ea43 0102 	orr.w	r1, r3, r2
 8006e14:	9b06      	ldr	r3, [sp, #24]
 8006e16:	430b      	orrs	r3, r1
 8006e18:	9b08      	ldr	r3, [sp, #32]
 8006e1a:	d10d      	bne.n	8006e38 <_dtoa_r+0xa80>
 8006e1c:	2b39      	cmp	r3, #57	; 0x39
 8006e1e:	d029      	beq.n	8006e74 <_dtoa_r+0xabc>
 8006e20:	f1b9 0f00 	cmp.w	r9, #0
 8006e24:	dd01      	ble.n	8006e2a <_dtoa_r+0xa72>
 8006e26:	9b04      	ldr	r3, [sp, #16]
 8006e28:	3331      	adds	r3, #49	; 0x31
 8006e2a:	9a02      	ldr	r2, [sp, #8]
 8006e2c:	7013      	strb	r3, [r2, #0]
 8006e2e:	e774      	b.n	8006d1a <_dtoa_r+0x962>
 8006e30:	4638      	mov	r0, r7
 8006e32:	e7b9      	b.n	8006da8 <_dtoa_r+0x9f0>
 8006e34:	2201      	movs	r2, #1
 8006e36:	e7e2      	b.n	8006dfe <_dtoa_r+0xa46>
 8006e38:	f1b9 0f00 	cmp.w	r9, #0
 8006e3c:	db06      	blt.n	8006e4c <_dtoa_r+0xa94>
 8006e3e:	9905      	ldr	r1, [sp, #20]
 8006e40:	ea41 0909 	orr.w	r9, r1, r9
 8006e44:	9906      	ldr	r1, [sp, #24]
 8006e46:	ea59 0101 	orrs.w	r1, r9, r1
 8006e4a:	d120      	bne.n	8006e8e <_dtoa_r+0xad6>
 8006e4c:	2a00      	cmp	r2, #0
 8006e4e:	ddec      	ble.n	8006e2a <_dtoa_r+0xa72>
 8006e50:	4659      	mov	r1, fp
 8006e52:	2201      	movs	r2, #1
 8006e54:	4620      	mov	r0, r4
 8006e56:	9301      	str	r3, [sp, #4]
 8006e58:	f000 fac6 	bl	80073e8 <__lshift>
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4683      	mov	fp, r0
 8006e60:	f000 fb2e 	bl	80074c0 <__mcmp>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	9b01      	ldr	r3, [sp, #4]
 8006e68:	dc02      	bgt.n	8006e70 <_dtoa_r+0xab8>
 8006e6a:	d1de      	bne.n	8006e2a <_dtoa_r+0xa72>
 8006e6c:	07da      	lsls	r2, r3, #31
 8006e6e:	d5dc      	bpl.n	8006e2a <_dtoa_r+0xa72>
 8006e70:	2b39      	cmp	r3, #57	; 0x39
 8006e72:	d1d8      	bne.n	8006e26 <_dtoa_r+0xa6e>
 8006e74:	9a02      	ldr	r2, [sp, #8]
 8006e76:	2339      	movs	r3, #57	; 0x39
 8006e78:	7013      	strb	r3, [r2, #0]
 8006e7a:	462b      	mov	r3, r5
 8006e7c:	461d      	mov	r5, r3
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e84:	2a39      	cmp	r2, #57	; 0x39
 8006e86:	d050      	beq.n	8006f2a <_dtoa_r+0xb72>
 8006e88:	3201      	adds	r2, #1
 8006e8a:	701a      	strb	r2, [r3, #0]
 8006e8c:	e745      	b.n	8006d1a <_dtoa_r+0x962>
 8006e8e:	2a00      	cmp	r2, #0
 8006e90:	dd03      	ble.n	8006e9a <_dtoa_r+0xae2>
 8006e92:	2b39      	cmp	r3, #57	; 0x39
 8006e94:	d0ee      	beq.n	8006e74 <_dtoa_r+0xabc>
 8006e96:	3301      	adds	r3, #1
 8006e98:	e7c7      	b.n	8006e2a <_dtoa_r+0xa72>
 8006e9a:	9a01      	ldr	r2, [sp, #4]
 8006e9c:	9907      	ldr	r1, [sp, #28]
 8006e9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006ea2:	428a      	cmp	r2, r1
 8006ea4:	d02a      	beq.n	8006efc <_dtoa_r+0xb44>
 8006ea6:	4659      	mov	r1, fp
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	220a      	movs	r2, #10
 8006eac:	4620      	mov	r0, r4
 8006eae:	f000 f8eb 	bl	8007088 <__multadd>
 8006eb2:	45b8      	cmp	r8, r7
 8006eb4:	4683      	mov	fp, r0
 8006eb6:	f04f 0300 	mov.w	r3, #0
 8006eba:	f04f 020a 	mov.w	r2, #10
 8006ebe:	4641      	mov	r1, r8
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	d107      	bne.n	8006ed4 <_dtoa_r+0xb1c>
 8006ec4:	f000 f8e0 	bl	8007088 <__multadd>
 8006ec8:	4680      	mov	r8, r0
 8006eca:	4607      	mov	r7, r0
 8006ecc:	9b01      	ldr	r3, [sp, #4]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	9301      	str	r3, [sp, #4]
 8006ed2:	e775      	b.n	8006dc0 <_dtoa_r+0xa08>
 8006ed4:	f000 f8d8 	bl	8007088 <__multadd>
 8006ed8:	4639      	mov	r1, r7
 8006eda:	4680      	mov	r8, r0
 8006edc:	2300      	movs	r3, #0
 8006ede:	220a      	movs	r2, #10
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f000 f8d1 	bl	8007088 <__multadd>
 8006ee6:	4607      	mov	r7, r0
 8006ee8:	e7f0      	b.n	8006ecc <_dtoa_r+0xb14>
 8006eea:	f1b9 0f00 	cmp.w	r9, #0
 8006eee:	9a00      	ldr	r2, [sp, #0]
 8006ef0:	bfcc      	ite	gt
 8006ef2:	464d      	movgt	r5, r9
 8006ef4:	2501      	movle	r5, #1
 8006ef6:	4415      	add	r5, r2
 8006ef8:	f04f 0800 	mov.w	r8, #0
 8006efc:	4659      	mov	r1, fp
 8006efe:	2201      	movs	r2, #1
 8006f00:	4620      	mov	r0, r4
 8006f02:	9301      	str	r3, [sp, #4]
 8006f04:	f000 fa70 	bl	80073e8 <__lshift>
 8006f08:	4631      	mov	r1, r6
 8006f0a:	4683      	mov	fp, r0
 8006f0c:	f000 fad8 	bl	80074c0 <__mcmp>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	dcb2      	bgt.n	8006e7a <_dtoa_r+0xac2>
 8006f14:	d102      	bne.n	8006f1c <_dtoa_r+0xb64>
 8006f16:	9b01      	ldr	r3, [sp, #4]
 8006f18:	07db      	lsls	r3, r3, #31
 8006f1a:	d4ae      	bmi.n	8006e7a <_dtoa_r+0xac2>
 8006f1c:	462b      	mov	r3, r5
 8006f1e:	461d      	mov	r5, r3
 8006f20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f24:	2a30      	cmp	r2, #48	; 0x30
 8006f26:	d0fa      	beq.n	8006f1e <_dtoa_r+0xb66>
 8006f28:	e6f7      	b.n	8006d1a <_dtoa_r+0x962>
 8006f2a:	9a00      	ldr	r2, [sp, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d1a5      	bne.n	8006e7c <_dtoa_r+0xac4>
 8006f30:	f10a 0a01 	add.w	sl, sl, #1
 8006f34:	2331      	movs	r3, #49	; 0x31
 8006f36:	e779      	b.n	8006e2c <_dtoa_r+0xa74>
 8006f38:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <_dtoa_r+0xbd0>)
 8006f3a:	f7ff baaf 	b.w	800649c <_dtoa_r+0xe4>
 8006f3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f47f aa86 	bne.w	8006452 <_dtoa_r+0x9a>
 8006f46:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <_dtoa_r+0xbd4>)
 8006f48:	f7ff baa8 	b.w	800649c <_dtoa_r+0xe4>
 8006f4c:	f1b9 0f00 	cmp.w	r9, #0
 8006f50:	dc03      	bgt.n	8006f5a <_dtoa_r+0xba2>
 8006f52:	9b05      	ldr	r3, [sp, #20]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	f73f aec9 	bgt.w	8006cec <_dtoa_r+0x934>
 8006f5a:	9d00      	ldr	r5, [sp, #0]
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4658      	mov	r0, fp
 8006f60:	f7ff f99e 	bl	80062a0 <quorem>
 8006f64:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006f68:	f805 3b01 	strb.w	r3, [r5], #1
 8006f6c:	9a00      	ldr	r2, [sp, #0]
 8006f6e:	1aaa      	subs	r2, r5, r2
 8006f70:	4591      	cmp	r9, r2
 8006f72:	ddba      	ble.n	8006eea <_dtoa_r+0xb32>
 8006f74:	4659      	mov	r1, fp
 8006f76:	2300      	movs	r3, #0
 8006f78:	220a      	movs	r2, #10
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 f884 	bl	8007088 <__multadd>
 8006f80:	4683      	mov	fp, r0
 8006f82:	e7eb      	b.n	8006f5c <_dtoa_r+0xba4>
 8006f84:	080087f3 	.word	0x080087f3
 8006f88:	0800874c 	.word	0x0800874c
 8006f8c:	08008770 	.word	0x08008770

08006f90 <_localeconv_r>:
 8006f90:	4800      	ldr	r0, [pc, #0]	; (8006f94 <_localeconv_r+0x4>)
 8006f92:	4770      	bx	lr
 8006f94:	20000164 	.word	0x20000164

08006f98 <malloc>:
 8006f98:	4b02      	ldr	r3, [pc, #8]	; (8006fa4 <malloc+0xc>)
 8006f9a:	4601      	mov	r1, r0
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	f000 bbef 	b.w	8007780 <_malloc_r>
 8006fa2:	bf00      	nop
 8006fa4:	20000010 	.word	0x20000010

08006fa8 <memcpy>:
 8006fa8:	440a      	add	r2, r1
 8006faa:	4291      	cmp	r1, r2
 8006fac:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fb0:	d100      	bne.n	8006fb4 <memcpy+0xc>
 8006fb2:	4770      	bx	lr
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fbe:	4291      	cmp	r1, r2
 8006fc0:	d1f9      	bne.n	8006fb6 <memcpy+0xe>
 8006fc2:	bd10      	pop	{r4, pc}

08006fc4 <_Balloc>:
 8006fc4:	b570      	push	{r4, r5, r6, lr}
 8006fc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fc8:	4604      	mov	r4, r0
 8006fca:	460d      	mov	r5, r1
 8006fcc:	b976      	cbnz	r6, 8006fec <_Balloc+0x28>
 8006fce:	2010      	movs	r0, #16
 8006fd0:	f7ff ffe2 	bl	8006f98 <malloc>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	6260      	str	r0, [r4, #36]	; 0x24
 8006fd8:	b920      	cbnz	r0, 8006fe4 <_Balloc+0x20>
 8006fda:	4b18      	ldr	r3, [pc, #96]	; (800703c <_Balloc+0x78>)
 8006fdc:	4818      	ldr	r0, [pc, #96]	; (8007040 <_Balloc+0x7c>)
 8006fde:	2166      	movs	r1, #102	; 0x66
 8006fe0:	f000 fd94 	bl	8007b0c <__assert_func>
 8006fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fe8:	6006      	str	r6, [r0, #0]
 8006fea:	60c6      	str	r6, [r0, #12]
 8006fec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006fee:	68f3      	ldr	r3, [r6, #12]
 8006ff0:	b183      	cbz	r3, 8007014 <_Balloc+0x50>
 8006ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ffa:	b9b8      	cbnz	r0, 800702c <_Balloc+0x68>
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	fa01 f605 	lsl.w	r6, r1, r5
 8007002:	1d72      	adds	r2, r6, #5
 8007004:	0092      	lsls	r2, r2, #2
 8007006:	4620      	mov	r0, r4
 8007008:	f000 fb5a 	bl	80076c0 <_calloc_r>
 800700c:	b160      	cbz	r0, 8007028 <_Balloc+0x64>
 800700e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007012:	e00e      	b.n	8007032 <_Balloc+0x6e>
 8007014:	2221      	movs	r2, #33	; 0x21
 8007016:	2104      	movs	r1, #4
 8007018:	4620      	mov	r0, r4
 800701a:	f000 fb51 	bl	80076c0 <_calloc_r>
 800701e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007020:	60f0      	str	r0, [r6, #12]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e4      	bne.n	8006ff2 <_Balloc+0x2e>
 8007028:	2000      	movs	r0, #0
 800702a:	bd70      	pop	{r4, r5, r6, pc}
 800702c:	6802      	ldr	r2, [r0, #0]
 800702e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007032:	2300      	movs	r3, #0
 8007034:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007038:	e7f7      	b.n	800702a <_Balloc+0x66>
 800703a:	bf00      	nop
 800703c:	0800877d 	.word	0x0800877d
 8007040:	08008804 	.word	0x08008804

08007044 <_Bfree>:
 8007044:	b570      	push	{r4, r5, r6, lr}
 8007046:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007048:	4605      	mov	r5, r0
 800704a:	460c      	mov	r4, r1
 800704c:	b976      	cbnz	r6, 800706c <_Bfree+0x28>
 800704e:	2010      	movs	r0, #16
 8007050:	f7ff ffa2 	bl	8006f98 <malloc>
 8007054:	4602      	mov	r2, r0
 8007056:	6268      	str	r0, [r5, #36]	; 0x24
 8007058:	b920      	cbnz	r0, 8007064 <_Bfree+0x20>
 800705a:	4b09      	ldr	r3, [pc, #36]	; (8007080 <_Bfree+0x3c>)
 800705c:	4809      	ldr	r0, [pc, #36]	; (8007084 <_Bfree+0x40>)
 800705e:	218a      	movs	r1, #138	; 0x8a
 8007060:	f000 fd54 	bl	8007b0c <__assert_func>
 8007064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007068:	6006      	str	r6, [r0, #0]
 800706a:	60c6      	str	r6, [r0, #12]
 800706c:	b13c      	cbz	r4, 800707e <_Bfree+0x3a>
 800706e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007070:	6862      	ldr	r2, [r4, #4]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007078:	6021      	str	r1, [r4, #0]
 800707a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800707e:	bd70      	pop	{r4, r5, r6, pc}
 8007080:	0800877d 	.word	0x0800877d
 8007084:	08008804 	.word	0x08008804

08007088 <__multadd>:
 8007088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800708c:	690e      	ldr	r6, [r1, #16]
 800708e:	4607      	mov	r7, r0
 8007090:	4698      	mov	r8, r3
 8007092:	460c      	mov	r4, r1
 8007094:	f101 0014 	add.w	r0, r1, #20
 8007098:	2300      	movs	r3, #0
 800709a:	6805      	ldr	r5, [r0, #0]
 800709c:	b2a9      	uxth	r1, r5
 800709e:	fb02 8101 	mla	r1, r2, r1, r8
 80070a2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80070a6:	0c2d      	lsrs	r5, r5, #16
 80070a8:	fb02 c505 	mla	r5, r2, r5, ip
 80070ac:	b289      	uxth	r1, r1
 80070ae:	3301      	adds	r3, #1
 80070b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80070b4:	429e      	cmp	r6, r3
 80070b6:	f840 1b04 	str.w	r1, [r0], #4
 80070ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80070be:	dcec      	bgt.n	800709a <__multadd+0x12>
 80070c0:	f1b8 0f00 	cmp.w	r8, #0
 80070c4:	d022      	beq.n	800710c <__multadd+0x84>
 80070c6:	68a3      	ldr	r3, [r4, #8]
 80070c8:	42b3      	cmp	r3, r6
 80070ca:	dc19      	bgt.n	8007100 <__multadd+0x78>
 80070cc:	6861      	ldr	r1, [r4, #4]
 80070ce:	4638      	mov	r0, r7
 80070d0:	3101      	adds	r1, #1
 80070d2:	f7ff ff77 	bl	8006fc4 <_Balloc>
 80070d6:	4605      	mov	r5, r0
 80070d8:	b928      	cbnz	r0, 80070e6 <__multadd+0x5e>
 80070da:	4602      	mov	r2, r0
 80070dc:	4b0d      	ldr	r3, [pc, #52]	; (8007114 <__multadd+0x8c>)
 80070de:	480e      	ldr	r0, [pc, #56]	; (8007118 <__multadd+0x90>)
 80070e0:	21b5      	movs	r1, #181	; 0xb5
 80070e2:	f000 fd13 	bl	8007b0c <__assert_func>
 80070e6:	6922      	ldr	r2, [r4, #16]
 80070e8:	3202      	adds	r2, #2
 80070ea:	f104 010c 	add.w	r1, r4, #12
 80070ee:	0092      	lsls	r2, r2, #2
 80070f0:	300c      	adds	r0, #12
 80070f2:	f7ff ff59 	bl	8006fa8 <memcpy>
 80070f6:	4621      	mov	r1, r4
 80070f8:	4638      	mov	r0, r7
 80070fa:	f7ff ffa3 	bl	8007044 <_Bfree>
 80070fe:	462c      	mov	r4, r5
 8007100:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007104:	3601      	adds	r6, #1
 8007106:	f8c3 8014 	str.w	r8, [r3, #20]
 800710a:	6126      	str	r6, [r4, #16]
 800710c:	4620      	mov	r0, r4
 800710e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007112:	bf00      	nop
 8007114:	080087f3 	.word	0x080087f3
 8007118:	08008804 	.word	0x08008804

0800711c <__hi0bits>:
 800711c:	0c03      	lsrs	r3, r0, #16
 800711e:	041b      	lsls	r3, r3, #16
 8007120:	b9d3      	cbnz	r3, 8007158 <__hi0bits+0x3c>
 8007122:	0400      	lsls	r0, r0, #16
 8007124:	2310      	movs	r3, #16
 8007126:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800712a:	bf04      	itt	eq
 800712c:	0200      	lsleq	r0, r0, #8
 800712e:	3308      	addeq	r3, #8
 8007130:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007134:	bf04      	itt	eq
 8007136:	0100      	lsleq	r0, r0, #4
 8007138:	3304      	addeq	r3, #4
 800713a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800713e:	bf04      	itt	eq
 8007140:	0080      	lsleq	r0, r0, #2
 8007142:	3302      	addeq	r3, #2
 8007144:	2800      	cmp	r0, #0
 8007146:	db05      	blt.n	8007154 <__hi0bits+0x38>
 8007148:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800714c:	f103 0301 	add.w	r3, r3, #1
 8007150:	bf08      	it	eq
 8007152:	2320      	moveq	r3, #32
 8007154:	4618      	mov	r0, r3
 8007156:	4770      	bx	lr
 8007158:	2300      	movs	r3, #0
 800715a:	e7e4      	b.n	8007126 <__hi0bits+0xa>

0800715c <__lo0bits>:
 800715c:	6803      	ldr	r3, [r0, #0]
 800715e:	f013 0207 	ands.w	r2, r3, #7
 8007162:	4601      	mov	r1, r0
 8007164:	d00b      	beq.n	800717e <__lo0bits+0x22>
 8007166:	07da      	lsls	r2, r3, #31
 8007168:	d424      	bmi.n	80071b4 <__lo0bits+0x58>
 800716a:	0798      	lsls	r0, r3, #30
 800716c:	bf49      	itett	mi
 800716e:	085b      	lsrmi	r3, r3, #1
 8007170:	089b      	lsrpl	r3, r3, #2
 8007172:	2001      	movmi	r0, #1
 8007174:	600b      	strmi	r3, [r1, #0]
 8007176:	bf5c      	itt	pl
 8007178:	600b      	strpl	r3, [r1, #0]
 800717a:	2002      	movpl	r0, #2
 800717c:	4770      	bx	lr
 800717e:	b298      	uxth	r0, r3
 8007180:	b9b0      	cbnz	r0, 80071b0 <__lo0bits+0x54>
 8007182:	0c1b      	lsrs	r3, r3, #16
 8007184:	2010      	movs	r0, #16
 8007186:	f013 0fff 	tst.w	r3, #255	; 0xff
 800718a:	bf04      	itt	eq
 800718c:	0a1b      	lsreq	r3, r3, #8
 800718e:	3008      	addeq	r0, #8
 8007190:	071a      	lsls	r2, r3, #28
 8007192:	bf04      	itt	eq
 8007194:	091b      	lsreq	r3, r3, #4
 8007196:	3004      	addeq	r0, #4
 8007198:	079a      	lsls	r2, r3, #30
 800719a:	bf04      	itt	eq
 800719c:	089b      	lsreq	r3, r3, #2
 800719e:	3002      	addeq	r0, #2
 80071a0:	07da      	lsls	r2, r3, #31
 80071a2:	d403      	bmi.n	80071ac <__lo0bits+0x50>
 80071a4:	085b      	lsrs	r3, r3, #1
 80071a6:	f100 0001 	add.w	r0, r0, #1
 80071aa:	d005      	beq.n	80071b8 <__lo0bits+0x5c>
 80071ac:	600b      	str	r3, [r1, #0]
 80071ae:	4770      	bx	lr
 80071b0:	4610      	mov	r0, r2
 80071b2:	e7e8      	b.n	8007186 <__lo0bits+0x2a>
 80071b4:	2000      	movs	r0, #0
 80071b6:	4770      	bx	lr
 80071b8:	2020      	movs	r0, #32
 80071ba:	4770      	bx	lr

080071bc <__i2b>:
 80071bc:	b510      	push	{r4, lr}
 80071be:	460c      	mov	r4, r1
 80071c0:	2101      	movs	r1, #1
 80071c2:	f7ff feff 	bl	8006fc4 <_Balloc>
 80071c6:	4602      	mov	r2, r0
 80071c8:	b928      	cbnz	r0, 80071d6 <__i2b+0x1a>
 80071ca:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <__i2b+0x24>)
 80071cc:	4805      	ldr	r0, [pc, #20]	; (80071e4 <__i2b+0x28>)
 80071ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80071d2:	f000 fc9b 	bl	8007b0c <__assert_func>
 80071d6:	2301      	movs	r3, #1
 80071d8:	6144      	str	r4, [r0, #20]
 80071da:	6103      	str	r3, [r0, #16]
 80071dc:	bd10      	pop	{r4, pc}
 80071de:	bf00      	nop
 80071e0:	080087f3 	.word	0x080087f3
 80071e4:	08008804 	.word	0x08008804

080071e8 <__multiply>:
 80071e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	4614      	mov	r4, r2
 80071ee:	690a      	ldr	r2, [r1, #16]
 80071f0:	6923      	ldr	r3, [r4, #16]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	bfb8      	it	lt
 80071f6:	460b      	movlt	r3, r1
 80071f8:	460d      	mov	r5, r1
 80071fa:	bfbc      	itt	lt
 80071fc:	4625      	movlt	r5, r4
 80071fe:	461c      	movlt	r4, r3
 8007200:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007204:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007208:	68ab      	ldr	r3, [r5, #8]
 800720a:	6869      	ldr	r1, [r5, #4]
 800720c:	eb0a 0709 	add.w	r7, sl, r9
 8007210:	42bb      	cmp	r3, r7
 8007212:	b085      	sub	sp, #20
 8007214:	bfb8      	it	lt
 8007216:	3101      	addlt	r1, #1
 8007218:	f7ff fed4 	bl	8006fc4 <_Balloc>
 800721c:	b930      	cbnz	r0, 800722c <__multiply+0x44>
 800721e:	4602      	mov	r2, r0
 8007220:	4b42      	ldr	r3, [pc, #264]	; (800732c <__multiply+0x144>)
 8007222:	4843      	ldr	r0, [pc, #268]	; (8007330 <__multiply+0x148>)
 8007224:	f240 115d 	movw	r1, #349	; 0x15d
 8007228:	f000 fc70 	bl	8007b0c <__assert_func>
 800722c:	f100 0614 	add.w	r6, r0, #20
 8007230:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007234:	4633      	mov	r3, r6
 8007236:	2200      	movs	r2, #0
 8007238:	4543      	cmp	r3, r8
 800723a:	d31e      	bcc.n	800727a <__multiply+0x92>
 800723c:	f105 0c14 	add.w	ip, r5, #20
 8007240:	f104 0314 	add.w	r3, r4, #20
 8007244:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007248:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800724c:	9202      	str	r2, [sp, #8]
 800724e:	ebac 0205 	sub.w	r2, ip, r5
 8007252:	3a15      	subs	r2, #21
 8007254:	f022 0203 	bic.w	r2, r2, #3
 8007258:	3204      	adds	r2, #4
 800725a:	f105 0115 	add.w	r1, r5, #21
 800725e:	458c      	cmp	ip, r1
 8007260:	bf38      	it	cc
 8007262:	2204      	movcc	r2, #4
 8007264:	9201      	str	r2, [sp, #4]
 8007266:	9a02      	ldr	r2, [sp, #8]
 8007268:	9303      	str	r3, [sp, #12]
 800726a:	429a      	cmp	r2, r3
 800726c:	d808      	bhi.n	8007280 <__multiply+0x98>
 800726e:	2f00      	cmp	r7, #0
 8007270:	dc55      	bgt.n	800731e <__multiply+0x136>
 8007272:	6107      	str	r7, [r0, #16]
 8007274:	b005      	add	sp, #20
 8007276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800727a:	f843 2b04 	str.w	r2, [r3], #4
 800727e:	e7db      	b.n	8007238 <__multiply+0x50>
 8007280:	f8b3 a000 	ldrh.w	sl, [r3]
 8007284:	f1ba 0f00 	cmp.w	sl, #0
 8007288:	d020      	beq.n	80072cc <__multiply+0xe4>
 800728a:	f105 0e14 	add.w	lr, r5, #20
 800728e:	46b1      	mov	r9, r6
 8007290:	2200      	movs	r2, #0
 8007292:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007296:	f8d9 b000 	ldr.w	fp, [r9]
 800729a:	b2a1      	uxth	r1, r4
 800729c:	fa1f fb8b 	uxth.w	fp, fp
 80072a0:	fb0a b101 	mla	r1, sl, r1, fp
 80072a4:	4411      	add	r1, r2
 80072a6:	f8d9 2000 	ldr.w	r2, [r9]
 80072aa:	0c24      	lsrs	r4, r4, #16
 80072ac:	0c12      	lsrs	r2, r2, #16
 80072ae:	fb0a 2404 	mla	r4, sl, r4, r2
 80072b2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80072b6:	b289      	uxth	r1, r1
 80072b8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80072bc:	45f4      	cmp	ip, lr
 80072be:	f849 1b04 	str.w	r1, [r9], #4
 80072c2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80072c6:	d8e4      	bhi.n	8007292 <__multiply+0xaa>
 80072c8:	9901      	ldr	r1, [sp, #4]
 80072ca:	5072      	str	r2, [r6, r1]
 80072cc:	9a03      	ldr	r2, [sp, #12]
 80072ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80072d2:	3304      	adds	r3, #4
 80072d4:	f1b9 0f00 	cmp.w	r9, #0
 80072d8:	d01f      	beq.n	800731a <__multiply+0x132>
 80072da:	6834      	ldr	r4, [r6, #0]
 80072dc:	f105 0114 	add.w	r1, r5, #20
 80072e0:	46b6      	mov	lr, r6
 80072e2:	f04f 0a00 	mov.w	sl, #0
 80072e6:	880a      	ldrh	r2, [r1, #0]
 80072e8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80072ec:	fb09 b202 	mla	r2, r9, r2, fp
 80072f0:	4492      	add	sl, r2
 80072f2:	b2a4      	uxth	r4, r4
 80072f4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80072f8:	f84e 4b04 	str.w	r4, [lr], #4
 80072fc:	f851 4b04 	ldr.w	r4, [r1], #4
 8007300:	f8be 2000 	ldrh.w	r2, [lr]
 8007304:	0c24      	lsrs	r4, r4, #16
 8007306:	fb09 2404 	mla	r4, r9, r4, r2
 800730a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800730e:	458c      	cmp	ip, r1
 8007310:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007314:	d8e7      	bhi.n	80072e6 <__multiply+0xfe>
 8007316:	9a01      	ldr	r2, [sp, #4]
 8007318:	50b4      	str	r4, [r6, r2]
 800731a:	3604      	adds	r6, #4
 800731c:	e7a3      	b.n	8007266 <__multiply+0x7e>
 800731e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1a5      	bne.n	8007272 <__multiply+0x8a>
 8007326:	3f01      	subs	r7, #1
 8007328:	e7a1      	b.n	800726e <__multiply+0x86>
 800732a:	bf00      	nop
 800732c:	080087f3 	.word	0x080087f3
 8007330:	08008804 	.word	0x08008804

08007334 <__pow5mult>:
 8007334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007338:	4615      	mov	r5, r2
 800733a:	f012 0203 	ands.w	r2, r2, #3
 800733e:	4606      	mov	r6, r0
 8007340:	460f      	mov	r7, r1
 8007342:	d007      	beq.n	8007354 <__pow5mult+0x20>
 8007344:	4c25      	ldr	r4, [pc, #148]	; (80073dc <__pow5mult+0xa8>)
 8007346:	3a01      	subs	r2, #1
 8007348:	2300      	movs	r3, #0
 800734a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800734e:	f7ff fe9b 	bl	8007088 <__multadd>
 8007352:	4607      	mov	r7, r0
 8007354:	10ad      	asrs	r5, r5, #2
 8007356:	d03d      	beq.n	80073d4 <__pow5mult+0xa0>
 8007358:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800735a:	b97c      	cbnz	r4, 800737c <__pow5mult+0x48>
 800735c:	2010      	movs	r0, #16
 800735e:	f7ff fe1b 	bl	8006f98 <malloc>
 8007362:	4602      	mov	r2, r0
 8007364:	6270      	str	r0, [r6, #36]	; 0x24
 8007366:	b928      	cbnz	r0, 8007374 <__pow5mult+0x40>
 8007368:	4b1d      	ldr	r3, [pc, #116]	; (80073e0 <__pow5mult+0xac>)
 800736a:	481e      	ldr	r0, [pc, #120]	; (80073e4 <__pow5mult+0xb0>)
 800736c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007370:	f000 fbcc 	bl	8007b0c <__assert_func>
 8007374:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007378:	6004      	str	r4, [r0, #0]
 800737a:	60c4      	str	r4, [r0, #12]
 800737c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007380:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007384:	b94c      	cbnz	r4, 800739a <__pow5mult+0x66>
 8007386:	f240 2171 	movw	r1, #625	; 0x271
 800738a:	4630      	mov	r0, r6
 800738c:	f7ff ff16 	bl	80071bc <__i2b>
 8007390:	2300      	movs	r3, #0
 8007392:	f8c8 0008 	str.w	r0, [r8, #8]
 8007396:	4604      	mov	r4, r0
 8007398:	6003      	str	r3, [r0, #0]
 800739a:	f04f 0900 	mov.w	r9, #0
 800739e:	07eb      	lsls	r3, r5, #31
 80073a0:	d50a      	bpl.n	80073b8 <__pow5mult+0x84>
 80073a2:	4639      	mov	r1, r7
 80073a4:	4622      	mov	r2, r4
 80073a6:	4630      	mov	r0, r6
 80073a8:	f7ff ff1e 	bl	80071e8 <__multiply>
 80073ac:	4639      	mov	r1, r7
 80073ae:	4680      	mov	r8, r0
 80073b0:	4630      	mov	r0, r6
 80073b2:	f7ff fe47 	bl	8007044 <_Bfree>
 80073b6:	4647      	mov	r7, r8
 80073b8:	106d      	asrs	r5, r5, #1
 80073ba:	d00b      	beq.n	80073d4 <__pow5mult+0xa0>
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	b938      	cbnz	r0, 80073d0 <__pow5mult+0x9c>
 80073c0:	4622      	mov	r2, r4
 80073c2:	4621      	mov	r1, r4
 80073c4:	4630      	mov	r0, r6
 80073c6:	f7ff ff0f 	bl	80071e8 <__multiply>
 80073ca:	6020      	str	r0, [r4, #0]
 80073cc:	f8c0 9000 	str.w	r9, [r0]
 80073d0:	4604      	mov	r4, r0
 80073d2:	e7e4      	b.n	800739e <__pow5mult+0x6a>
 80073d4:	4638      	mov	r0, r7
 80073d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073da:	bf00      	nop
 80073dc:	08008958 	.word	0x08008958
 80073e0:	0800877d 	.word	0x0800877d
 80073e4:	08008804 	.word	0x08008804

080073e8 <__lshift>:
 80073e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ec:	460c      	mov	r4, r1
 80073ee:	6849      	ldr	r1, [r1, #4]
 80073f0:	6923      	ldr	r3, [r4, #16]
 80073f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073f6:	68a3      	ldr	r3, [r4, #8]
 80073f8:	4607      	mov	r7, r0
 80073fa:	4691      	mov	r9, r2
 80073fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007400:	f108 0601 	add.w	r6, r8, #1
 8007404:	42b3      	cmp	r3, r6
 8007406:	db0b      	blt.n	8007420 <__lshift+0x38>
 8007408:	4638      	mov	r0, r7
 800740a:	f7ff fddb 	bl	8006fc4 <_Balloc>
 800740e:	4605      	mov	r5, r0
 8007410:	b948      	cbnz	r0, 8007426 <__lshift+0x3e>
 8007412:	4602      	mov	r2, r0
 8007414:	4b28      	ldr	r3, [pc, #160]	; (80074b8 <__lshift+0xd0>)
 8007416:	4829      	ldr	r0, [pc, #164]	; (80074bc <__lshift+0xd4>)
 8007418:	f240 11d9 	movw	r1, #473	; 0x1d9
 800741c:	f000 fb76 	bl	8007b0c <__assert_func>
 8007420:	3101      	adds	r1, #1
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	e7ee      	b.n	8007404 <__lshift+0x1c>
 8007426:	2300      	movs	r3, #0
 8007428:	f100 0114 	add.w	r1, r0, #20
 800742c:	f100 0210 	add.w	r2, r0, #16
 8007430:	4618      	mov	r0, r3
 8007432:	4553      	cmp	r3, sl
 8007434:	db33      	blt.n	800749e <__lshift+0xb6>
 8007436:	6920      	ldr	r0, [r4, #16]
 8007438:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800743c:	f104 0314 	add.w	r3, r4, #20
 8007440:	f019 091f 	ands.w	r9, r9, #31
 8007444:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007448:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800744c:	d02b      	beq.n	80074a6 <__lshift+0xbe>
 800744e:	f1c9 0e20 	rsb	lr, r9, #32
 8007452:	468a      	mov	sl, r1
 8007454:	2200      	movs	r2, #0
 8007456:	6818      	ldr	r0, [r3, #0]
 8007458:	fa00 f009 	lsl.w	r0, r0, r9
 800745c:	4302      	orrs	r2, r0
 800745e:	f84a 2b04 	str.w	r2, [sl], #4
 8007462:	f853 2b04 	ldr.w	r2, [r3], #4
 8007466:	459c      	cmp	ip, r3
 8007468:	fa22 f20e 	lsr.w	r2, r2, lr
 800746c:	d8f3      	bhi.n	8007456 <__lshift+0x6e>
 800746e:	ebac 0304 	sub.w	r3, ip, r4
 8007472:	3b15      	subs	r3, #21
 8007474:	f023 0303 	bic.w	r3, r3, #3
 8007478:	3304      	adds	r3, #4
 800747a:	f104 0015 	add.w	r0, r4, #21
 800747e:	4584      	cmp	ip, r0
 8007480:	bf38      	it	cc
 8007482:	2304      	movcc	r3, #4
 8007484:	50ca      	str	r2, [r1, r3]
 8007486:	b10a      	cbz	r2, 800748c <__lshift+0xa4>
 8007488:	f108 0602 	add.w	r6, r8, #2
 800748c:	3e01      	subs	r6, #1
 800748e:	4638      	mov	r0, r7
 8007490:	612e      	str	r6, [r5, #16]
 8007492:	4621      	mov	r1, r4
 8007494:	f7ff fdd6 	bl	8007044 <_Bfree>
 8007498:	4628      	mov	r0, r5
 800749a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749e:	f842 0f04 	str.w	r0, [r2, #4]!
 80074a2:	3301      	adds	r3, #1
 80074a4:	e7c5      	b.n	8007432 <__lshift+0x4a>
 80074a6:	3904      	subs	r1, #4
 80074a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80074b0:	459c      	cmp	ip, r3
 80074b2:	d8f9      	bhi.n	80074a8 <__lshift+0xc0>
 80074b4:	e7ea      	b.n	800748c <__lshift+0xa4>
 80074b6:	bf00      	nop
 80074b8:	080087f3 	.word	0x080087f3
 80074bc:	08008804 	.word	0x08008804

080074c0 <__mcmp>:
 80074c0:	b530      	push	{r4, r5, lr}
 80074c2:	6902      	ldr	r2, [r0, #16]
 80074c4:	690c      	ldr	r4, [r1, #16]
 80074c6:	1b12      	subs	r2, r2, r4
 80074c8:	d10e      	bne.n	80074e8 <__mcmp+0x28>
 80074ca:	f100 0314 	add.w	r3, r0, #20
 80074ce:	3114      	adds	r1, #20
 80074d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80074d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80074d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80074dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80074e0:	42a5      	cmp	r5, r4
 80074e2:	d003      	beq.n	80074ec <__mcmp+0x2c>
 80074e4:	d305      	bcc.n	80074f2 <__mcmp+0x32>
 80074e6:	2201      	movs	r2, #1
 80074e8:	4610      	mov	r0, r2
 80074ea:	bd30      	pop	{r4, r5, pc}
 80074ec:	4283      	cmp	r3, r0
 80074ee:	d3f3      	bcc.n	80074d8 <__mcmp+0x18>
 80074f0:	e7fa      	b.n	80074e8 <__mcmp+0x28>
 80074f2:	f04f 32ff 	mov.w	r2, #4294967295
 80074f6:	e7f7      	b.n	80074e8 <__mcmp+0x28>

080074f8 <__mdiff>:
 80074f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	460c      	mov	r4, r1
 80074fe:	4606      	mov	r6, r0
 8007500:	4611      	mov	r1, r2
 8007502:	4620      	mov	r0, r4
 8007504:	4617      	mov	r7, r2
 8007506:	f7ff ffdb 	bl	80074c0 <__mcmp>
 800750a:	1e05      	subs	r5, r0, #0
 800750c:	d110      	bne.n	8007530 <__mdiff+0x38>
 800750e:	4629      	mov	r1, r5
 8007510:	4630      	mov	r0, r6
 8007512:	f7ff fd57 	bl	8006fc4 <_Balloc>
 8007516:	b930      	cbnz	r0, 8007526 <__mdiff+0x2e>
 8007518:	4b39      	ldr	r3, [pc, #228]	; (8007600 <__mdiff+0x108>)
 800751a:	4602      	mov	r2, r0
 800751c:	f240 2132 	movw	r1, #562	; 0x232
 8007520:	4838      	ldr	r0, [pc, #224]	; (8007604 <__mdiff+0x10c>)
 8007522:	f000 faf3 	bl	8007b0c <__assert_func>
 8007526:	2301      	movs	r3, #1
 8007528:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800752c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007530:	bfa4      	itt	ge
 8007532:	463b      	movge	r3, r7
 8007534:	4627      	movge	r7, r4
 8007536:	4630      	mov	r0, r6
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	bfa6      	itte	ge
 800753c:	461c      	movge	r4, r3
 800753e:	2500      	movge	r5, #0
 8007540:	2501      	movlt	r5, #1
 8007542:	f7ff fd3f 	bl	8006fc4 <_Balloc>
 8007546:	b920      	cbnz	r0, 8007552 <__mdiff+0x5a>
 8007548:	4b2d      	ldr	r3, [pc, #180]	; (8007600 <__mdiff+0x108>)
 800754a:	4602      	mov	r2, r0
 800754c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007550:	e7e6      	b.n	8007520 <__mdiff+0x28>
 8007552:	693e      	ldr	r6, [r7, #16]
 8007554:	60c5      	str	r5, [r0, #12]
 8007556:	6925      	ldr	r5, [r4, #16]
 8007558:	f107 0114 	add.w	r1, r7, #20
 800755c:	f104 0914 	add.w	r9, r4, #20
 8007560:	f100 0e14 	add.w	lr, r0, #20
 8007564:	f107 0210 	add.w	r2, r7, #16
 8007568:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800756c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007570:	46f2      	mov	sl, lr
 8007572:	2700      	movs	r7, #0
 8007574:	f859 3b04 	ldr.w	r3, [r9], #4
 8007578:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800757c:	fa1f f883 	uxth.w	r8, r3
 8007580:	fa17 f78b 	uxtah	r7, r7, fp
 8007584:	0c1b      	lsrs	r3, r3, #16
 8007586:	eba7 0808 	sub.w	r8, r7, r8
 800758a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800758e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007592:	fa1f f888 	uxth.w	r8, r8
 8007596:	141f      	asrs	r7, r3, #16
 8007598:	454d      	cmp	r5, r9
 800759a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800759e:	f84a 3b04 	str.w	r3, [sl], #4
 80075a2:	d8e7      	bhi.n	8007574 <__mdiff+0x7c>
 80075a4:	1b2b      	subs	r3, r5, r4
 80075a6:	3b15      	subs	r3, #21
 80075a8:	f023 0303 	bic.w	r3, r3, #3
 80075ac:	3304      	adds	r3, #4
 80075ae:	3415      	adds	r4, #21
 80075b0:	42a5      	cmp	r5, r4
 80075b2:	bf38      	it	cc
 80075b4:	2304      	movcc	r3, #4
 80075b6:	4419      	add	r1, r3
 80075b8:	4473      	add	r3, lr
 80075ba:	469e      	mov	lr, r3
 80075bc:	460d      	mov	r5, r1
 80075be:	4565      	cmp	r5, ip
 80075c0:	d30e      	bcc.n	80075e0 <__mdiff+0xe8>
 80075c2:	f10c 0203 	add.w	r2, ip, #3
 80075c6:	1a52      	subs	r2, r2, r1
 80075c8:	f022 0203 	bic.w	r2, r2, #3
 80075cc:	3903      	subs	r1, #3
 80075ce:	458c      	cmp	ip, r1
 80075d0:	bf38      	it	cc
 80075d2:	2200      	movcc	r2, #0
 80075d4:	441a      	add	r2, r3
 80075d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80075da:	b17b      	cbz	r3, 80075fc <__mdiff+0x104>
 80075dc:	6106      	str	r6, [r0, #16]
 80075de:	e7a5      	b.n	800752c <__mdiff+0x34>
 80075e0:	f855 8b04 	ldr.w	r8, [r5], #4
 80075e4:	fa17 f488 	uxtah	r4, r7, r8
 80075e8:	1422      	asrs	r2, r4, #16
 80075ea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80075ee:	b2a4      	uxth	r4, r4
 80075f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80075f4:	f84e 4b04 	str.w	r4, [lr], #4
 80075f8:	1417      	asrs	r7, r2, #16
 80075fa:	e7e0      	b.n	80075be <__mdiff+0xc6>
 80075fc:	3e01      	subs	r6, #1
 80075fe:	e7ea      	b.n	80075d6 <__mdiff+0xde>
 8007600:	080087f3 	.word	0x080087f3
 8007604:	08008804 	.word	0x08008804

08007608 <__d2b>:
 8007608:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800760c:	4689      	mov	r9, r1
 800760e:	2101      	movs	r1, #1
 8007610:	ec57 6b10 	vmov	r6, r7, d0
 8007614:	4690      	mov	r8, r2
 8007616:	f7ff fcd5 	bl	8006fc4 <_Balloc>
 800761a:	4604      	mov	r4, r0
 800761c:	b930      	cbnz	r0, 800762c <__d2b+0x24>
 800761e:	4602      	mov	r2, r0
 8007620:	4b25      	ldr	r3, [pc, #148]	; (80076b8 <__d2b+0xb0>)
 8007622:	4826      	ldr	r0, [pc, #152]	; (80076bc <__d2b+0xb4>)
 8007624:	f240 310a 	movw	r1, #778	; 0x30a
 8007628:	f000 fa70 	bl	8007b0c <__assert_func>
 800762c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007630:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007634:	bb35      	cbnz	r5, 8007684 <__d2b+0x7c>
 8007636:	2e00      	cmp	r6, #0
 8007638:	9301      	str	r3, [sp, #4]
 800763a:	d028      	beq.n	800768e <__d2b+0x86>
 800763c:	4668      	mov	r0, sp
 800763e:	9600      	str	r6, [sp, #0]
 8007640:	f7ff fd8c 	bl	800715c <__lo0bits>
 8007644:	9900      	ldr	r1, [sp, #0]
 8007646:	b300      	cbz	r0, 800768a <__d2b+0x82>
 8007648:	9a01      	ldr	r2, [sp, #4]
 800764a:	f1c0 0320 	rsb	r3, r0, #32
 800764e:	fa02 f303 	lsl.w	r3, r2, r3
 8007652:	430b      	orrs	r3, r1
 8007654:	40c2      	lsrs	r2, r0
 8007656:	6163      	str	r3, [r4, #20]
 8007658:	9201      	str	r2, [sp, #4]
 800765a:	9b01      	ldr	r3, [sp, #4]
 800765c:	61a3      	str	r3, [r4, #24]
 800765e:	2b00      	cmp	r3, #0
 8007660:	bf14      	ite	ne
 8007662:	2202      	movne	r2, #2
 8007664:	2201      	moveq	r2, #1
 8007666:	6122      	str	r2, [r4, #16]
 8007668:	b1d5      	cbz	r5, 80076a0 <__d2b+0x98>
 800766a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800766e:	4405      	add	r5, r0
 8007670:	f8c9 5000 	str.w	r5, [r9]
 8007674:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007678:	f8c8 0000 	str.w	r0, [r8]
 800767c:	4620      	mov	r0, r4
 800767e:	b003      	add	sp, #12
 8007680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007688:	e7d5      	b.n	8007636 <__d2b+0x2e>
 800768a:	6161      	str	r1, [r4, #20]
 800768c:	e7e5      	b.n	800765a <__d2b+0x52>
 800768e:	a801      	add	r0, sp, #4
 8007690:	f7ff fd64 	bl	800715c <__lo0bits>
 8007694:	9b01      	ldr	r3, [sp, #4]
 8007696:	6163      	str	r3, [r4, #20]
 8007698:	2201      	movs	r2, #1
 800769a:	6122      	str	r2, [r4, #16]
 800769c:	3020      	adds	r0, #32
 800769e:	e7e3      	b.n	8007668 <__d2b+0x60>
 80076a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076a8:	f8c9 0000 	str.w	r0, [r9]
 80076ac:	6918      	ldr	r0, [r3, #16]
 80076ae:	f7ff fd35 	bl	800711c <__hi0bits>
 80076b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076b6:	e7df      	b.n	8007678 <__d2b+0x70>
 80076b8:	080087f3 	.word	0x080087f3
 80076bc:	08008804 	.word	0x08008804

080076c0 <_calloc_r>:
 80076c0:	b513      	push	{r0, r1, r4, lr}
 80076c2:	434a      	muls	r2, r1
 80076c4:	4611      	mov	r1, r2
 80076c6:	9201      	str	r2, [sp, #4]
 80076c8:	f000 f85a 	bl	8007780 <_malloc_r>
 80076cc:	4604      	mov	r4, r0
 80076ce:	b118      	cbz	r0, 80076d8 <_calloc_r+0x18>
 80076d0:	9a01      	ldr	r2, [sp, #4]
 80076d2:	2100      	movs	r1, #0
 80076d4:	f7fe f932 	bl	800593c <memset>
 80076d8:	4620      	mov	r0, r4
 80076da:	b002      	add	sp, #8
 80076dc:	bd10      	pop	{r4, pc}
	...

080076e0 <_free_r>:
 80076e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076e2:	2900      	cmp	r1, #0
 80076e4:	d048      	beq.n	8007778 <_free_r+0x98>
 80076e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ea:	9001      	str	r0, [sp, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f1a1 0404 	sub.w	r4, r1, #4
 80076f2:	bfb8      	it	lt
 80076f4:	18e4      	addlt	r4, r4, r3
 80076f6:	f000 fa65 	bl	8007bc4 <__malloc_lock>
 80076fa:	4a20      	ldr	r2, [pc, #128]	; (800777c <_free_r+0x9c>)
 80076fc:	9801      	ldr	r0, [sp, #4]
 80076fe:	6813      	ldr	r3, [r2, #0]
 8007700:	4615      	mov	r5, r2
 8007702:	b933      	cbnz	r3, 8007712 <_free_r+0x32>
 8007704:	6063      	str	r3, [r4, #4]
 8007706:	6014      	str	r4, [r2, #0]
 8007708:	b003      	add	sp, #12
 800770a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800770e:	f000 ba5f 	b.w	8007bd0 <__malloc_unlock>
 8007712:	42a3      	cmp	r3, r4
 8007714:	d90b      	bls.n	800772e <_free_r+0x4e>
 8007716:	6821      	ldr	r1, [r4, #0]
 8007718:	1862      	adds	r2, r4, r1
 800771a:	4293      	cmp	r3, r2
 800771c:	bf04      	itt	eq
 800771e:	681a      	ldreq	r2, [r3, #0]
 8007720:	685b      	ldreq	r3, [r3, #4]
 8007722:	6063      	str	r3, [r4, #4]
 8007724:	bf04      	itt	eq
 8007726:	1852      	addeq	r2, r2, r1
 8007728:	6022      	streq	r2, [r4, #0]
 800772a:	602c      	str	r4, [r5, #0]
 800772c:	e7ec      	b.n	8007708 <_free_r+0x28>
 800772e:	461a      	mov	r2, r3
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	b10b      	cbz	r3, 8007738 <_free_r+0x58>
 8007734:	42a3      	cmp	r3, r4
 8007736:	d9fa      	bls.n	800772e <_free_r+0x4e>
 8007738:	6811      	ldr	r1, [r2, #0]
 800773a:	1855      	adds	r5, r2, r1
 800773c:	42a5      	cmp	r5, r4
 800773e:	d10b      	bne.n	8007758 <_free_r+0x78>
 8007740:	6824      	ldr	r4, [r4, #0]
 8007742:	4421      	add	r1, r4
 8007744:	1854      	adds	r4, r2, r1
 8007746:	42a3      	cmp	r3, r4
 8007748:	6011      	str	r1, [r2, #0]
 800774a:	d1dd      	bne.n	8007708 <_free_r+0x28>
 800774c:	681c      	ldr	r4, [r3, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	6053      	str	r3, [r2, #4]
 8007752:	4421      	add	r1, r4
 8007754:	6011      	str	r1, [r2, #0]
 8007756:	e7d7      	b.n	8007708 <_free_r+0x28>
 8007758:	d902      	bls.n	8007760 <_free_r+0x80>
 800775a:	230c      	movs	r3, #12
 800775c:	6003      	str	r3, [r0, #0]
 800775e:	e7d3      	b.n	8007708 <_free_r+0x28>
 8007760:	6825      	ldr	r5, [r4, #0]
 8007762:	1961      	adds	r1, r4, r5
 8007764:	428b      	cmp	r3, r1
 8007766:	bf04      	itt	eq
 8007768:	6819      	ldreq	r1, [r3, #0]
 800776a:	685b      	ldreq	r3, [r3, #4]
 800776c:	6063      	str	r3, [r4, #4]
 800776e:	bf04      	itt	eq
 8007770:	1949      	addeq	r1, r1, r5
 8007772:	6021      	streq	r1, [r4, #0]
 8007774:	6054      	str	r4, [r2, #4]
 8007776:	e7c7      	b.n	8007708 <_free_r+0x28>
 8007778:	b003      	add	sp, #12
 800777a:	bd30      	pop	{r4, r5, pc}
 800777c:	20000208 	.word	0x20000208

08007780 <_malloc_r>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	1ccd      	adds	r5, r1, #3
 8007784:	f025 0503 	bic.w	r5, r5, #3
 8007788:	3508      	adds	r5, #8
 800778a:	2d0c      	cmp	r5, #12
 800778c:	bf38      	it	cc
 800778e:	250c      	movcc	r5, #12
 8007790:	2d00      	cmp	r5, #0
 8007792:	4606      	mov	r6, r0
 8007794:	db01      	blt.n	800779a <_malloc_r+0x1a>
 8007796:	42a9      	cmp	r1, r5
 8007798:	d903      	bls.n	80077a2 <_malloc_r+0x22>
 800779a:	230c      	movs	r3, #12
 800779c:	6033      	str	r3, [r6, #0]
 800779e:	2000      	movs	r0, #0
 80077a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077a2:	f000 fa0f 	bl	8007bc4 <__malloc_lock>
 80077a6:	4921      	ldr	r1, [pc, #132]	; (800782c <_malloc_r+0xac>)
 80077a8:	680a      	ldr	r2, [r1, #0]
 80077aa:	4614      	mov	r4, r2
 80077ac:	b99c      	cbnz	r4, 80077d6 <_malloc_r+0x56>
 80077ae:	4f20      	ldr	r7, [pc, #128]	; (8007830 <_malloc_r+0xb0>)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	b923      	cbnz	r3, 80077be <_malloc_r+0x3e>
 80077b4:	4621      	mov	r1, r4
 80077b6:	4630      	mov	r0, r6
 80077b8:	f000 f998 	bl	8007aec <_sbrk_r>
 80077bc:	6038      	str	r0, [r7, #0]
 80077be:	4629      	mov	r1, r5
 80077c0:	4630      	mov	r0, r6
 80077c2:	f000 f993 	bl	8007aec <_sbrk_r>
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	d123      	bne.n	8007812 <_malloc_r+0x92>
 80077ca:	230c      	movs	r3, #12
 80077cc:	6033      	str	r3, [r6, #0]
 80077ce:	4630      	mov	r0, r6
 80077d0:	f000 f9fe 	bl	8007bd0 <__malloc_unlock>
 80077d4:	e7e3      	b.n	800779e <_malloc_r+0x1e>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	1b5b      	subs	r3, r3, r5
 80077da:	d417      	bmi.n	800780c <_malloc_r+0x8c>
 80077dc:	2b0b      	cmp	r3, #11
 80077de:	d903      	bls.n	80077e8 <_malloc_r+0x68>
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	441c      	add	r4, r3
 80077e4:	6025      	str	r5, [r4, #0]
 80077e6:	e004      	b.n	80077f2 <_malloc_r+0x72>
 80077e8:	6863      	ldr	r3, [r4, #4]
 80077ea:	42a2      	cmp	r2, r4
 80077ec:	bf0c      	ite	eq
 80077ee:	600b      	streq	r3, [r1, #0]
 80077f0:	6053      	strne	r3, [r2, #4]
 80077f2:	4630      	mov	r0, r6
 80077f4:	f000 f9ec 	bl	8007bd0 <__malloc_unlock>
 80077f8:	f104 000b 	add.w	r0, r4, #11
 80077fc:	1d23      	adds	r3, r4, #4
 80077fe:	f020 0007 	bic.w	r0, r0, #7
 8007802:	1ac2      	subs	r2, r0, r3
 8007804:	d0cc      	beq.n	80077a0 <_malloc_r+0x20>
 8007806:	1a1b      	subs	r3, r3, r0
 8007808:	50a3      	str	r3, [r4, r2]
 800780a:	e7c9      	b.n	80077a0 <_malloc_r+0x20>
 800780c:	4622      	mov	r2, r4
 800780e:	6864      	ldr	r4, [r4, #4]
 8007810:	e7cc      	b.n	80077ac <_malloc_r+0x2c>
 8007812:	1cc4      	adds	r4, r0, #3
 8007814:	f024 0403 	bic.w	r4, r4, #3
 8007818:	42a0      	cmp	r0, r4
 800781a:	d0e3      	beq.n	80077e4 <_malloc_r+0x64>
 800781c:	1a21      	subs	r1, r4, r0
 800781e:	4630      	mov	r0, r6
 8007820:	f000 f964 	bl	8007aec <_sbrk_r>
 8007824:	3001      	adds	r0, #1
 8007826:	d1dd      	bne.n	80077e4 <_malloc_r+0x64>
 8007828:	e7cf      	b.n	80077ca <_malloc_r+0x4a>
 800782a:	bf00      	nop
 800782c:	20000208 	.word	0x20000208
 8007830:	2000020c 	.word	0x2000020c

08007834 <__ssputs_r>:
 8007834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007838:	688e      	ldr	r6, [r1, #8]
 800783a:	429e      	cmp	r6, r3
 800783c:	4682      	mov	sl, r0
 800783e:	460c      	mov	r4, r1
 8007840:	4690      	mov	r8, r2
 8007842:	461f      	mov	r7, r3
 8007844:	d838      	bhi.n	80078b8 <__ssputs_r+0x84>
 8007846:	898a      	ldrh	r2, [r1, #12]
 8007848:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800784c:	d032      	beq.n	80078b4 <__ssputs_r+0x80>
 800784e:	6825      	ldr	r5, [r4, #0]
 8007850:	6909      	ldr	r1, [r1, #16]
 8007852:	eba5 0901 	sub.w	r9, r5, r1
 8007856:	6965      	ldr	r5, [r4, #20]
 8007858:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800785c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007860:	3301      	adds	r3, #1
 8007862:	444b      	add	r3, r9
 8007864:	106d      	asrs	r5, r5, #1
 8007866:	429d      	cmp	r5, r3
 8007868:	bf38      	it	cc
 800786a:	461d      	movcc	r5, r3
 800786c:	0553      	lsls	r3, r2, #21
 800786e:	d531      	bpl.n	80078d4 <__ssputs_r+0xa0>
 8007870:	4629      	mov	r1, r5
 8007872:	f7ff ff85 	bl	8007780 <_malloc_r>
 8007876:	4606      	mov	r6, r0
 8007878:	b950      	cbnz	r0, 8007890 <__ssputs_r+0x5c>
 800787a:	230c      	movs	r3, #12
 800787c:	f8ca 3000 	str.w	r3, [sl]
 8007880:	89a3      	ldrh	r3, [r4, #12]
 8007882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007886:	81a3      	strh	r3, [r4, #12]
 8007888:	f04f 30ff 	mov.w	r0, #4294967295
 800788c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007890:	6921      	ldr	r1, [r4, #16]
 8007892:	464a      	mov	r2, r9
 8007894:	f7ff fb88 	bl	8006fa8 <memcpy>
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800789e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a2:	81a3      	strh	r3, [r4, #12]
 80078a4:	6126      	str	r6, [r4, #16]
 80078a6:	6165      	str	r5, [r4, #20]
 80078a8:	444e      	add	r6, r9
 80078aa:	eba5 0509 	sub.w	r5, r5, r9
 80078ae:	6026      	str	r6, [r4, #0]
 80078b0:	60a5      	str	r5, [r4, #8]
 80078b2:	463e      	mov	r6, r7
 80078b4:	42be      	cmp	r6, r7
 80078b6:	d900      	bls.n	80078ba <__ssputs_r+0x86>
 80078b8:	463e      	mov	r6, r7
 80078ba:	4632      	mov	r2, r6
 80078bc:	6820      	ldr	r0, [r4, #0]
 80078be:	4641      	mov	r1, r8
 80078c0:	f000 f966 	bl	8007b90 <memmove>
 80078c4:	68a3      	ldr	r3, [r4, #8]
 80078c6:	6822      	ldr	r2, [r4, #0]
 80078c8:	1b9b      	subs	r3, r3, r6
 80078ca:	4432      	add	r2, r6
 80078cc:	60a3      	str	r3, [r4, #8]
 80078ce:	6022      	str	r2, [r4, #0]
 80078d0:	2000      	movs	r0, #0
 80078d2:	e7db      	b.n	800788c <__ssputs_r+0x58>
 80078d4:	462a      	mov	r2, r5
 80078d6:	f000 f981 	bl	8007bdc <_realloc_r>
 80078da:	4606      	mov	r6, r0
 80078dc:	2800      	cmp	r0, #0
 80078de:	d1e1      	bne.n	80078a4 <__ssputs_r+0x70>
 80078e0:	6921      	ldr	r1, [r4, #16]
 80078e2:	4650      	mov	r0, sl
 80078e4:	f7ff fefc 	bl	80076e0 <_free_r>
 80078e8:	e7c7      	b.n	800787a <__ssputs_r+0x46>
	...

080078ec <_svfiprintf_r>:
 80078ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f0:	4698      	mov	r8, r3
 80078f2:	898b      	ldrh	r3, [r1, #12]
 80078f4:	061b      	lsls	r3, r3, #24
 80078f6:	b09d      	sub	sp, #116	; 0x74
 80078f8:	4607      	mov	r7, r0
 80078fa:	460d      	mov	r5, r1
 80078fc:	4614      	mov	r4, r2
 80078fe:	d50e      	bpl.n	800791e <_svfiprintf_r+0x32>
 8007900:	690b      	ldr	r3, [r1, #16]
 8007902:	b963      	cbnz	r3, 800791e <_svfiprintf_r+0x32>
 8007904:	2140      	movs	r1, #64	; 0x40
 8007906:	f7ff ff3b 	bl	8007780 <_malloc_r>
 800790a:	6028      	str	r0, [r5, #0]
 800790c:	6128      	str	r0, [r5, #16]
 800790e:	b920      	cbnz	r0, 800791a <_svfiprintf_r+0x2e>
 8007910:	230c      	movs	r3, #12
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	f04f 30ff 	mov.w	r0, #4294967295
 8007918:	e0d1      	b.n	8007abe <_svfiprintf_r+0x1d2>
 800791a:	2340      	movs	r3, #64	; 0x40
 800791c:	616b      	str	r3, [r5, #20]
 800791e:	2300      	movs	r3, #0
 8007920:	9309      	str	r3, [sp, #36]	; 0x24
 8007922:	2320      	movs	r3, #32
 8007924:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007928:	f8cd 800c 	str.w	r8, [sp, #12]
 800792c:	2330      	movs	r3, #48	; 0x30
 800792e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ad8 <_svfiprintf_r+0x1ec>
 8007932:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007936:	f04f 0901 	mov.w	r9, #1
 800793a:	4623      	mov	r3, r4
 800793c:	469a      	mov	sl, r3
 800793e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007942:	b10a      	cbz	r2, 8007948 <_svfiprintf_r+0x5c>
 8007944:	2a25      	cmp	r2, #37	; 0x25
 8007946:	d1f9      	bne.n	800793c <_svfiprintf_r+0x50>
 8007948:	ebba 0b04 	subs.w	fp, sl, r4
 800794c:	d00b      	beq.n	8007966 <_svfiprintf_r+0x7a>
 800794e:	465b      	mov	r3, fp
 8007950:	4622      	mov	r2, r4
 8007952:	4629      	mov	r1, r5
 8007954:	4638      	mov	r0, r7
 8007956:	f7ff ff6d 	bl	8007834 <__ssputs_r>
 800795a:	3001      	adds	r0, #1
 800795c:	f000 80aa 	beq.w	8007ab4 <_svfiprintf_r+0x1c8>
 8007960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007962:	445a      	add	r2, fp
 8007964:	9209      	str	r2, [sp, #36]	; 0x24
 8007966:	f89a 3000 	ldrb.w	r3, [sl]
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 80a2 	beq.w	8007ab4 <_svfiprintf_r+0x1c8>
 8007970:	2300      	movs	r3, #0
 8007972:	f04f 32ff 	mov.w	r2, #4294967295
 8007976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800797a:	f10a 0a01 	add.w	sl, sl, #1
 800797e:	9304      	str	r3, [sp, #16]
 8007980:	9307      	str	r3, [sp, #28]
 8007982:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007986:	931a      	str	r3, [sp, #104]	; 0x68
 8007988:	4654      	mov	r4, sl
 800798a:	2205      	movs	r2, #5
 800798c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007990:	4851      	ldr	r0, [pc, #324]	; (8007ad8 <_svfiprintf_r+0x1ec>)
 8007992:	f7f8 fc45 	bl	8000220 <memchr>
 8007996:	9a04      	ldr	r2, [sp, #16]
 8007998:	b9d8      	cbnz	r0, 80079d2 <_svfiprintf_r+0xe6>
 800799a:	06d0      	lsls	r0, r2, #27
 800799c:	bf44      	itt	mi
 800799e:	2320      	movmi	r3, #32
 80079a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079a4:	0711      	lsls	r1, r2, #28
 80079a6:	bf44      	itt	mi
 80079a8:	232b      	movmi	r3, #43	; 0x2b
 80079aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079ae:	f89a 3000 	ldrb.w	r3, [sl]
 80079b2:	2b2a      	cmp	r3, #42	; 0x2a
 80079b4:	d015      	beq.n	80079e2 <_svfiprintf_r+0xf6>
 80079b6:	9a07      	ldr	r2, [sp, #28]
 80079b8:	4654      	mov	r4, sl
 80079ba:	2000      	movs	r0, #0
 80079bc:	f04f 0c0a 	mov.w	ip, #10
 80079c0:	4621      	mov	r1, r4
 80079c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079c6:	3b30      	subs	r3, #48	; 0x30
 80079c8:	2b09      	cmp	r3, #9
 80079ca:	d94e      	bls.n	8007a6a <_svfiprintf_r+0x17e>
 80079cc:	b1b0      	cbz	r0, 80079fc <_svfiprintf_r+0x110>
 80079ce:	9207      	str	r2, [sp, #28]
 80079d0:	e014      	b.n	80079fc <_svfiprintf_r+0x110>
 80079d2:	eba0 0308 	sub.w	r3, r0, r8
 80079d6:	fa09 f303 	lsl.w	r3, r9, r3
 80079da:	4313      	orrs	r3, r2
 80079dc:	9304      	str	r3, [sp, #16]
 80079de:	46a2      	mov	sl, r4
 80079e0:	e7d2      	b.n	8007988 <_svfiprintf_r+0x9c>
 80079e2:	9b03      	ldr	r3, [sp, #12]
 80079e4:	1d19      	adds	r1, r3, #4
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	9103      	str	r1, [sp, #12]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	bfbb      	ittet	lt
 80079ee:	425b      	neglt	r3, r3
 80079f0:	f042 0202 	orrlt.w	r2, r2, #2
 80079f4:	9307      	strge	r3, [sp, #28]
 80079f6:	9307      	strlt	r3, [sp, #28]
 80079f8:	bfb8      	it	lt
 80079fa:	9204      	strlt	r2, [sp, #16]
 80079fc:	7823      	ldrb	r3, [r4, #0]
 80079fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007a00:	d10c      	bne.n	8007a1c <_svfiprintf_r+0x130>
 8007a02:	7863      	ldrb	r3, [r4, #1]
 8007a04:	2b2a      	cmp	r3, #42	; 0x2a
 8007a06:	d135      	bne.n	8007a74 <_svfiprintf_r+0x188>
 8007a08:	9b03      	ldr	r3, [sp, #12]
 8007a0a:	1d1a      	adds	r2, r3, #4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	9203      	str	r2, [sp, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	bfb8      	it	lt
 8007a14:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a18:	3402      	adds	r4, #2
 8007a1a:	9305      	str	r3, [sp, #20]
 8007a1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ae8 <_svfiprintf_r+0x1fc>
 8007a20:	7821      	ldrb	r1, [r4, #0]
 8007a22:	2203      	movs	r2, #3
 8007a24:	4650      	mov	r0, sl
 8007a26:	f7f8 fbfb 	bl	8000220 <memchr>
 8007a2a:	b140      	cbz	r0, 8007a3e <_svfiprintf_r+0x152>
 8007a2c:	2340      	movs	r3, #64	; 0x40
 8007a2e:	eba0 000a 	sub.w	r0, r0, sl
 8007a32:	fa03 f000 	lsl.w	r0, r3, r0
 8007a36:	9b04      	ldr	r3, [sp, #16]
 8007a38:	4303      	orrs	r3, r0
 8007a3a:	3401      	adds	r4, #1
 8007a3c:	9304      	str	r3, [sp, #16]
 8007a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a42:	4826      	ldr	r0, [pc, #152]	; (8007adc <_svfiprintf_r+0x1f0>)
 8007a44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a48:	2206      	movs	r2, #6
 8007a4a:	f7f8 fbe9 	bl	8000220 <memchr>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d038      	beq.n	8007ac4 <_svfiprintf_r+0x1d8>
 8007a52:	4b23      	ldr	r3, [pc, #140]	; (8007ae0 <_svfiprintf_r+0x1f4>)
 8007a54:	bb1b      	cbnz	r3, 8007a9e <_svfiprintf_r+0x1b2>
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	3307      	adds	r3, #7
 8007a5a:	f023 0307 	bic.w	r3, r3, #7
 8007a5e:	3308      	adds	r3, #8
 8007a60:	9303      	str	r3, [sp, #12]
 8007a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a64:	4433      	add	r3, r6
 8007a66:	9309      	str	r3, [sp, #36]	; 0x24
 8007a68:	e767      	b.n	800793a <_svfiprintf_r+0x4e>
 8007a6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a6e:	460c      	mov	r4, r1
 8007a70:	2001      	movs	r0, #1
 8007a72:	e7a5      	b.n	80079c0 <_svfiprintf_r+0xd4>
 8007a74:	2300      	movs	r3, #0
 8007a76:	3401      	adds	r4, #1
 8007a78:	9305      	str	r3, [sp, #20]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	f04f 0c0a 	mov.w	ip, #10
 8007a80:	4620      	mov	r0, r4
 8007a82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a86:	3a30      	subs	r2, #48	; 0x30
 8007a88:	2a09      	cmp	r2, #9
 8007a8a:	d903      	bls.n	8007a94 <_svfiprintf_r+0x1a8>
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0c5      	beq.n	8007a1c <_svfiprintf_r+0x130>
 8007a90:	9105      	str	r1, [sp, #20]
 8007a92:	e7c3      	b.n	8007a1c <_svfiprintf_r+0x130>
 8007a94:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a98:	4604      	mov	r4, r0
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e7f0      	b.n	8007a80 <_svfiprintf_r+0x194>
 8007a9e:	ab03      	add	r3, sp, #12
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	462a      	mov	r2, r5
 8007aa4:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <_svfiprintf_r+0x1f8>)
 8007aa6:	a904      	add	r1, sp, #16
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	f7fd ffef 	bl	8005a8c <_printf_float>
 8007aae:	1c42      	adds	r2, r0, #1
 8007ab0:	4606      	mov	r6, r0
 8007ab2:	d1d6      	bne.n	8007a62 <_svfiprintf_r+0x176>
 8007ab4:	89ab      	ldrh	r3, [r5, #12]
 8007ab6:	065b      	lsls	r3, r3, #25
 8007ab8:	f53f af2c 	bmi.w	8007914 <_svfiprintf_r+0x28>
 8007abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007abe:	b01d      	add	sp, #116	; 0x74
 8007ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac4:	ab03      	add	r3, sp, #12
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	462a      	mov	r2, r5
 8007aca:	4b06      	ldr	r3, [pc, #24]	; (8007ae4 <_svfiprintf_r+0x1f8>)
 8007acc:	a904      	add	r1, sp, #16
 8007ace:	4638      	mov	r0, r7
 8007ad0:	f7fe fa80 	bl	8005fd4 <_printf_i>
 8007ad4:	e7eb      	b.n	8007aae <_svfiprintf_r+0x1c2>
 8007ad6:	bf00      	nop
 8007ad8:	08008964 	.word	0x08008964
 8007adc:	0800896e 	.word	0x0800896e
 8007ae0:	08005a8d 	.word	0x08005a8d
 8007ae4:	08007835 	.word	0x08007835
 8007ae8:	0800896a 	.word	0x0800896a

08007aec <_sbrk_r>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	4d06      	ldr	r5, [pc, #24]	; (8007b08 <_sbrk_r+0x1c>)
 8007af0:	2300      	movs	r3, #0
 8007af2:	4604      	mov	r4, r0
 8007af4:	4608      	mov	r0, r1
 8007af6:	602b      	str	r3, [r5, #0]
 8007af8:	f7fa f964 	bl	8001dc4 <_sbrk>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d102      	bne.n	8007b06 <_sbrk_r+0x1a>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	b103      	cbz	r3, 8007b06 <_sbrk_r+0x1a>
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	20000424 	.word	0x20000424

08007b0c <__assert_func>:
 8007b0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b0e:	4614      	mov	r4, r2
 8007b10:	461a      	mov	r2, r3
 8007b12:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <__assert_func+0x2c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4605      	mov	r5, r0
 8007b18:	68d8      	ldr	r0, [r3, #12]
 8007b1a:	b14c      	cbz	r4, 8007b30 <__assert_func+0x24>
 8007b1c:	4b07      	ldr	r3, [pc, #28]	; (8007b3c <__assert_func+0x30>)
 8007b1e:	9100      	str	r1, [sp, #0]
 8007b20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b24:	4906      	ldr	r1, [pc, #24]	; (8007b40 <__assert_func+0x34>)
 8007b26:	462b      	mov	r3, r5
 8007b28:	f000 f80e 	bl	8007b48 <fiprintf>
 8007b2c:	f000 faa4 	bl	8008078 <abort>
 8007b30:	4b04      	ldr	r3, [pc, #16]	; (8007b44 <__assert_func+0x38>)
 8007b32:	461c      	mov	r4, r3
 8007b34:	e7f3      	b.n	8007b1e <__assert_func+0x12>
 8007b36:	bf00      	nop
 8007b38:	20000010 	.word	0x20000010
 8007b3c:	08008975 	.word	0x08008975
 8007b40:	08008982 	.word	0x08008982
 8007b44:	080089b0 	.word	0x080089b0

08007b48 <fiprintf>:
 8007b48:	b40e      	push	{r1, r2, r3}
 8007b4a:	b503      	push	{r0, r1, lr}
 8007b4c:	4601      	mov	r1, r0
 8007b4e:	ab03      	add	r3, sp, #12
 8007b50:	4805      	ldr	r0, [pc, #20]	; (8007b68 <fiprintf+0x20>)
 8007b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b56:	6800      	ldr	r0, [r0, #0]
 8007b58:	9301      	str	r3, [sp, #4]
 8007b5a:	f000 f88f 	bl	8007c7c <_vfiprintf_r>
 8007b5e:	b002      	add	sp, #8
 8007b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b64:	b003      	add	sp, #12
 8007b66:	4770      	bx	lr
 8007b68:	20000010 	.word	0x20000010

08007b6c <__ascii_mbtowc>:
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	b901      	cbnz	r1, 8007b72 <__ascii_mbtowc+0x6>
 8007b70:	a901      	add	r1, sp, #4
 8007b72:	b142      	cbz	r2, 8007b86 <__ascii_mbtowc+0x1a>
 8007b74:	b14b      	cbz	r3, 8007b8a <__ascii_mbtowc+0x1e>
 8007b76:	7813      	ldrb	r3, [r2, #0]
 8007b78:	600b      	str	r3, [r1, #0]
 8007b7a:	7812      	ldrb	r2, [r2, #0]
 8007b7c:	1e10      	subs	r0, r2, #0
 8007b7e:	bf18      	it	ne
 8007b80:	2001      	movne	r0, #1
 8007b82:	b002      	add	sp, #8
 8007b84:	4770      	bx	lr
 8007b86:	4610      	mov	r0, r2
 8007b88:	e7fb      	b.n	8007b82 <__ascii_mbtowc+0x16>
 8007b8a:	f06f 0001 	mvn.w	r0, #1
 8007b8e:	e7f8      	b.n	8007b82 <__ascii_mbtowc+0x16>

08007b90 <memmove>:
 8007b90:	4288      	cmp	r0, r1
 8007b92:	b510      	push	{r4, lr}
 8007b94:	eb01 0402 	add.w	r4, r1, r2
 8007b98:	d902      	bls.n	8007ba0 <memmove+0x10>
 8007b9a:	4284      	cmp	r4, r0
 8007b9c:	4623      	mov	r3, r4
 8007b9e:	d807      	bhi.n	8007bb0 <memmove+0x20>
 8007ba0:	1e43      	subs	r3, r0, #1
 8007ba2:	42a1      	cmp	r1, r4
 8007ba4:	d008      	beq.n	8007bb8 <memmove+0x28>
 8007ba6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007baa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bae:	e7f8      	b.n	8007ba2 <memmove+0x12>
 8007bb0:	4402      	add	r2, r0
 8007bb2:	4601      	mov	r1, r0
 8007bb4:	428a      	cmp	r2, r1
 8007bb6:	d100      	bne.n	8007bba <memmove+0x2a>
 8007bb8:	bd10      	pop	{r4, pc}
 8007bba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bc2:	e7f7      	b.n	8007bb4 <memmove+0x24>

08007bc4 <__malloc_lock>:
 8007bc4:	4801      	ldr	r0, [pc, #4]	; (8007bcc <__malloc_lock+0x8>)
 8007bc6:	f000 bc17 	b.w	80083f8 <__retarget_lock_acquire_recursive>
 8007bca:	bf00      	nop
 8007bcc:	2000042c 	.word	0x2000042c

08007bd0 <__malloc_unlock>:
 8007bd0:	4801      	ldr	r0, [pc, #4]	; (8007bd8 <__malloc_unlock+0x8>)
 8007bd2:	f000 bc12 	b.w	80083fa <__retarget_lock_release_recursive>
 8007bd6:	bf00      	nop
 8007bd8:	2000042c 	.word	0x2000042c

08007bdc <_realloc_r>:
 8007bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bde:	4607      	mov	r7, r0
 8007be0:	4614      	mov	r4, r2
 8007be2:	460e      	mov	r6, r1
 8007be4:	b921      	cbnz	r1, 8007bf0 <_realloc_r+0x14>
 8007be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007bea:	4611      	mov	r1, r2
 8007bec:	f7ff bdc8 	b.w	8007780 <_malloc_r>
 8007bf0:	b922      	cbnz	r2, 8007bfc <_realloc_r+0x20>
 8007bf2:	f7ff fd75 	bl	80076e0 <_free_r>
 8007bf6:	4625      	mov	r5, r4
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bfc:	f000 fc62 	bl	80084c4 <_malloc_usable_size_r>
 8007c00:	42a0      	cmp	r0, r4
 8007c02:	d20f      	bcs.n	8007c24 <_realloc_r+0x48>
 8007c04:	4621      	mov	r1, r4
 8007c06:	4638      	mov	r0, r7
 8007c08:	f7ff fdba 	bl	8007780 <_malloc_r>
 8007c0c:	4605      	mov	r5, r0
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	d0f2      	beq.n	8007bf8 <_realloc_r+0x1c>
 8007c12:	4631      	mov	r1, r6
 8007c14:	4622      	mov	r2, r4
 8007c16:	f7ff f9c7 	bl	8006fa8 <memcpy>
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4638      	mov	r0, r7
 8007c1e:	f7ff fd5f 	bl	80076e0 <_free_r>
 8007c22:	e7e9      	b.n	8007bf8 <_realloc_r+0x1c>
 8007c24:	4635      	mov	r5, r6
 8007c26:	e7e7      	b.n	8007bf8 <_realloc_r+0x1c>

08007c28 <__sfputc_r>:
 8007c28:	6893      	ldr	r3, [r2, #8]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	b410      	push	{r4}
 8007c30:	6093      	str	r3, [r2, #8]
 8007c32:	da08      	bge.n	8007c46 <__sfputc_r+0x1e>
 8007c34:	6994      	ldr	r4, [r2, #24]
 8007c36:	42a3      	cmp	r3, r4
 8007c38:	db01      	blt.n	8007c3e <__sfputc_r+0x16>
 8007c3a:	290a      	cmp	r1, #10
 8007c3c:	d103      	bne.n	8007c46 <__sfputc_r+0x1e>
 8007c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c42:	f000 b94b 	b.w	8007edc <__swbuf_r>
 8007c46:	6813      	ldr	r3, [r2, #0]
 8007c48:	1c58      	adds	r0, r3, #1
 8007c4a:	6010      	str	r0, [r2, #0]
 8007c4c:	7019      	strb	r1, [r3, #0]
 8007c4e:	4608      	mov	r0, r1
 8007c50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <__sfputs_r>:
 8007c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c58:	4606      	mov	r6, r0
 8007c5a:	460f      	mov	r7, r1
 8007c5c:	4614      	mov	r4, r2
 8007c5e:	18d5      	adds	r5, r2, r3
 8007c60:	42ac      	cmp	r4, r5
 8007c62:	d101      	bne.n	8007c68 <__sfputs_r+0x12>
 8007c64:	2000      	movs	r0, #0
 8007c66:	e007      	b.n	8007c78 <__sfputs_r+0x22>
 8007c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c6c:	463a      	mov	r2, r7
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f7ff ffda 	bl	8007c28 <__sfputc_r>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d1f3      	bne.n	8007c60 <__sfputs_r+0xa>
 8007c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c7c <_vfiprintf_r>:
 8007c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c80:	460d      	mov	r5, r1
 8007c82:	b09d      	sub	sp, #116	; 0x74
 8007c84:	4614      	mov	r4, r2
 8007c86:	4698      	mov	r8, r3
 8007c88:	4606      	mov	r6, r0
 8007c8a:	b118      	cbz	r0, 8007c94 <_vfiprintf_r+0x18>
 8007c8c:	6983      	ldr	r3, [r0, #24]
 8007c8e:	b90b      	cbnz	r3, 8007c94 <_vfiprintf_r+0x18>
 8007c90:	f000 fb14 	bl	80082bc <__sinit>
 8007c94:	4b89      	ldr	r3, [pc, #548]	; (8007ebc <_vfiprintf_r+0x240>)
 8007c96:	429d      	cmp	r5, r3
 8007c98:	d11b      	bne.n	8007cd2 <_vfiprintf_r+0x56>
 8007c9a:	6875      	ldr	r5, [r6, #4]
 8007c9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c9e:	07d9      	lsls	r1, r3, #31
 8007ca0:	d405      	bmi.n	8007cae <_vfiprintf_r+0x32>
 8007ca2:	89ab      	ldrh	r3, [r5, #12]
 8007ca4:	059a      	lsls	r2, r3, #22
 8007ca6:	d402      	bmi.n	8007cae <_vfiprintf_r+0x32>
 8007ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007caa:	f000 fba5 	bl	80083f8 <__retarget_lock_acquire_recursive>
 8007cae:	89ab      	ldrh	r3, [r5, #12]
 8007cb0:	071b      	lsls	r3, r3, #28
 8007cb2:	d501      	bpl.n	8007cb8 <_vfiprintf_r+0x3c>
 8007cb4:	692b      	ldr	r3, [r5, #16]
 8007cb6:	b9eb      	cbnz	r3, 8007cf4 <_vfiprintf_r+0x78>
 8007cb8:	4629      	mov	r1, r5
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f000 f96e 	bl	8007f9c <__swsetup_r>
 8007cc0:	b1c0      	cbz	r0, 8007cf4 <_vfiprintf_r+0x78>
 8007cc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cc4:	07dc      	lsls	r4, r3, #31
 8007cc6:	d50e      	bpl.n	8007ce6 <_vfiprintf_r+0x6a>
 8007cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ccc:	b01d      	add	sp, #116	; 0x74
 8007cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd2:	4b7b      	ldr	r3, [pc, #492]	; (8007ec0 <_vfiprintf_r+0x244>)
 8007cd4:	429d      	cmp	r5, r3
 8007cd6:	d101      	bne.n	8007cdc <_vfiprintf_r+0x60>
 8007cd8:	68b5      	ldr	r5, [r6, #8]
 8007cda:	e7df      	b.n	8007c9c <_vfiprintf_r+0x20>
 8007cdc:	4b79      	ldr	r3, [pc, #484]	; (8007ec4 <_vfiprintf_r+0x248>)
 8007cde:	429d      	cmp	r5, r3
 8007ce0:	bf08      	it	eq
 8007ce2:	68f5      	ldreq	r5, [r6, #12]
 8007ce4:	e7da      	b.n	8007c9c <_vfiprintf_r+0x20>
 8007ce6:	89ab      	ldrh	r3, [r5, #12]
 8007ce8:	0598      	lsls	r0, r3, #22
 8007cea:	d4ed      	bmi.n	8007cc8 <_vfiprintf_r+0x4c>
 8007cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cee:	f000 fb84 	bl	80083fa <__retarget_lock_release_recursive>
 8007cf2:	e7e9      	b.n	8007cc8 <_vfiprintf_r+0x4c>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cf8:	2320      	movs	r3, #32
 8007cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d02:	2330      	movs	r3, #48	; 0x30
 8007d04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ec8 <_vfiprintf_r+0x24c>
 8007d08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d0c:	f04f 0901 	mov.w	r9, #1
 8007d10:	4623      	mov	r3, r4
 8007d12:	469a      	mov	sl, r3
 8007d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d18:	b10a      	cbz	r2, 8007d1e <_vfiprintf_r+0xa2>
 8007d1a:	2a25      	cmp	r2, #37	; 0x25
 8007d1c:	d1f9      	bne.n	8007d12 <_vfiprintf_r+0x96>
 8007d1e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d22:	d00b      	beq.n	8007d3c <_vfiprintf_r+0xc0>
 8007d24:	465b      	mov	r3, fp
 8007d26:	4622      	mov	r2, r4
 8007d28:	4629      	mov	r1, r5
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	f7ff ff93 	bl	8007c56 <__sfputs_r>
 8007d30:	3001      	adds	r0, #1
 8007d32:	f000 80aa 	beq.w	8007e8a <_vfiprintf_r+0x20e>
 8007d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d38:	445a      	add	r2, fp
 8007d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 80a2 	beq.w	8007e8a <_vfiprintf_r+0x20e>
 8007d46:	2300      	movs	r3, #0
 8007d48:	f04f 32ff 	mov.w	r2, #4294967295
 8007d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d50:	f10a 0a01 	add.w	sl, sl, #1
 8007d54:	9304      	str	r3, [sp, #16]
 8007d56:	9307      	str	r3, [sp, #28]
 8007d58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d5c:	931a      	str	r3, [sp, #104]	; 0x68
 8007d5e:	4654      	mov	r4, sl
 8007d60:	2205      	movs	r2, #5
 8007d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d66:	4858      	ldr	r0, [pc, #352]	; (8007ec8 <_vfiprintf_r+0x24c>)
 8007d68:	f7f8 fa5a 	bl	8000220 <memchr>
 8007d6c:	9a04      	ldr	r2, [sp, #16]
 8007d6e:	b9d8      	cbnz	r0, 8007da8 <_vfiprintf_r+0x12c>
 8007d70:	06d1      	lsls	r1, r2, #27
 8007d72:	bf44      	itt	mi
 8007d74:	2320      	movmi	r3, #32
 8007d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d7a:	0713      	lsls	r3, r2, #28
 8007d7c:	bf44      	itt	mi
 8007d7e:	232b      	movmi	r3, #43	; 0x2b
 8007d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d84:	f89a 3000 	ldrb.w	r3, [sl]
 8007d88:	2b2a      	cmp	r3, #42	; 0x2a
 8007d8a:	d015      	beq.n	8007db8 <_vfiprintf_r+0x13c>
 8007d8c:	9a07      	ldr	r2, [sp, #28]
 8007d8e:	4654      	mov	r4, sl
 8007d90:	2000      	movs	r0, #0
 8007d92:	f04f 0c0a 	mov.w	ip, #10
 8007d96:	4621      	mov	r1, r4
 8007d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d9c:	3b30      	subs	r3, #48	; 0x30
 8007d9e:	2b09      	cmp	r3, #9
 8007da0:	d94e      	bls.n	8007e40 <_vfiprintf_r+0x1c4>
 8007da2:	b1b0      	cbz	r0, 8007dd2 <_vfiprintf_r+0x156>
 8007da4:	9207      	str	r2, [sp, #28]
 8007da6:	e014      	b.n	8007dd2 <_vfiprintf_r+0x156>
 8007da8:	eba0 0308 	sub.w	r3, r0, r8
 8007dac:	fa09 f303 	lsl.w	r3, r9, r3
 8007db0:	4313      	orrs	r3, r2
 8007db2:	9304      	str	r3, [sp, #16]
 8007db4:	46a2      	mov	sl, r4
 8007db6:	e7d2      	b.n	8007d5e <_vfiprintf_r+0xe2>
 8007db8:	9b03      	ldr	r3, [sp, #12]
 8007dba:	1d19      	adds	r1, r3, #4
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	9103      	str	r1, [sp, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	bfbb      	ittet	lt
 8007dc4:	425b      	neglt	r3, r3
 8007dc6:	f042 0202 	orrlt.w	r2, r2, #2
 8007dca:	9307      	strge	r3, [sp, #28]
 8007dcc:	9307      	strlt	r3, [sp, #28]
 8007dce:	bfb8      	it	lt
 8007dd0:	9204      	strlt	r2, [sp, #16]
 8007dd2:	7823      	ldrb	r3, [r4, #0]
 8007dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8007dd6:	d10c      	bne.n	8007df2 <_vfiprintf_r+0x176>
 8007dd8:	7863      	ldrb	r3, [r4, #1]
 8007dda:	2b2a      	cmp	r3, #42	; 0x2a
 8007ddc:	d135      	bne.n	8007e4a <_vfiprintf_r+0x1ce>
 8007dde:	9b03      	ldr	r3, [sp, #12]
 8007de0:	1d1a      	adds	r2, r3, #4
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	9203      	str	r2, [sp, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	bfb8      	it	lt
 8007dea:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dee:	3402      	adds	r4, #2
 8007df0:	9305      	str	r3, [sp, #20]
 8007df2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ed8 <_vfiprintf_r+0x25c>
 8007df6:	7821      	ldrb	r1, [r4, #0]
 8007df8:	2203      	movs	r2, #3
 8007dfa:	4650      	mov	r0, sl
 8007dfc:	f7f8 fa10 	bl	8000220 <memchr>
 8007e00:	b140      	cbz	r0, 8007e14 <_vfiprintf_r+0x198>
 8007e02:	2340      	movs	r3, #64	; 0x40
 8007e04:	eba0 000a 	sub.w	r0, r0, sl
 8007e08:	fa03 f000 	lsl.w	r0, r3, r0
 8007e0c:	9b04      	ldr	r3, [sp, #16]
 8007e0e:	4303      	orrs	r3, r0
 8007e10:	3401      	adds	r4, #1
 8007e12:	9304      	str	r3, [sp, #16]
 8007e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e18:	482c      	ldr	r0, [pc, #176]	; (8007ecc <_vfiprintf_r+0x250>)
 8007e1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e1e:	2206      	movs	r2, #6
 8007e20:	f7f8 f9fe 	bl	8000220 <memchr>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d03f      	beq.n	8007ea8 <_vfiprintf_r+0x22c>
 8007e28:	4b29      	ldr	r3, [pc, #164]	; (8007ed0 <_vfiprintf_r+0x254>)
 8007e2a:	bb1b      	cbnz	r3, 8007e74 <_vfiprintf_r+0x1f8>
 8007e2c:	9b03      	ldr	r3, [sp, #12]
 8007e2e:	3307      	adds	r3, #7
 8007e30:	f023 0307 	bic.w	r3, r3, #7
 8007e34:	3308      	adds	r3, #8
 8007e36:	9303      	str	r3, [sp, #12]
 8007e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e3a:	443b      	add	r3, r7
 8007e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e3e:	e767      	b.n	8007d10 <_vfiprintf_r+0x94>
 8007e40:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e44:	460c      	mov	r4, r1
 8007e46:	2001      	movs	r0, #1
 8007e48:	e7a5      	b.n	8007d96 <_vfiprintf_r+0x11a>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	3401      	adds	r4, #1
 8007e4e:	9305      	str	r3, [sp, #20]
 8007e50:	4619      	mov	r1, r3
 8007e52:	f04f 0c0a 	mov.w	ip, #10
 8007e56:	4620      	mov	r0, r4
 8007e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e5c:	3a30      	subs	r2, #48	; 0x30
 8007e5e:	2a09      	cmp	r2, #9
 8007e60:	d903      	bls.n	8007e6a <_vfiprintf_r+0x1ee>
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d0c5      	beq.n	8007df2 <_vfiprintf_r+0x176>
 8007e66:	9105      	str	r1, [sp, #20]
 8007e68:	e7c3      	b.n	8007df2 <_vfiprintf_r+0x176>
 8007e6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e6e:	4604      	mov	r4, r0
 8007e70:	2301      	movs	r3, #1
 8007e72:	e7f0      	b.n	8007e56 <_vfiprintf_r+0x1da>
 8007e74:	ab03      	add	r3, sp, #12
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	462a      	mov	r2, r5
 8007e7a:	4b16      	ldr	r3, [pc, #88]	; (8007ed4 <_vfiprintf_r+0x258>)
 8007e7c:	a904      	add	r1, sp, #16
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f7fd fe04 	bl	8005a8c <_printf_float>
 8007e84:	4607      	mov	r7, r0
 8007e86:	1c78      	adds	r0, r7, #1
 8007e88:	d1d6      	bne.n	8007e38 <_vfiprintf_r+0x1bc>
 8007e8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e8c:	07d9      	lsls	r1, r3, #31
 8007e8e:	d405      	bmi.n	8007e9c <_vfiprintf_r+0x220>
 8007e90:	89ab      	ldrh	r3, [r5, #12]
 8007e92:	059a      	lsls	r2, r3, #22
 8007e94:	d402      	bmi.n	8007e9c <_vfiprintf_r+0x220>
 8007e96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e98:	f000 faaf 	bl	80083fa <__retarget_lock_release_recursive>
 8007e9c:	89ab      	ldrh	r3, [r5, #12]
 8007e9e:	065b      	lsls	r3, r3, #25
 8007ea0:	f53f af12 	bmi.w	8007cc8 <_vfiprintf_r+0x4c>
 8007ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ea6:	e711      	b.n	8007ccc <_vfiprintf_r+0x50>
 8007ea8:	ab03      	add	r3, sp, #12
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	462a      	mov	r2, r5
 8007eae:	4b09      	ldr	r3, [pc, #36]	; (8007ed4 <_vfiprintf_r+0x258>)
 8007eb0:	a904      	add	r1, sp, #16
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7fe f88e 	bl	8005fd4 <_printf_i>
 8007eb8:	e7e4      	b.n	8007e84 <_vfiprintf_r+0x208>
 8007eba:	bf00      	nop
 8007ebc:	08008adc 	.word	0x08008adc
 8007ec0:	08008afc 	.word	0x08008afc
 8007ec4:	08008abc 	.word	0x08008abc
 8007ec8:	08008964 	.word	0x08008964
 8007ecc:	0800896e 	.word	0x0800896e
 8007ed0:	08005a8d 	.word	0x08005a8d
 8007ed4:	08007c57 	.word	0x08007c57
 8007ed8:	0800896a 	.word	0x0800896a

08007edc <__swbuf_r>:
 8007edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ede:	460e      	mov	r6, r1
 8007ee0:	4614      	mov	r4, r2
 8007ee2:	4605      	mov	r5, r0
 8007ee4:	b118      	cbz	r0, 8007eee <__swbuf_r+0x12>
 8007ee6:	6983      	ldr	r3, [r0, #24]
 8007ee8:	b90b      	cbnz	r3, 8007eee <__swbuf_r+0x12>
 8007eea:	f000 f9e7 	bl	80082bc <__sinit>
 8007eee:	4b21      	ldr	r3, [pc, #132]	; (8007f74 <__swbuf_r+0x98>)
 8007ef0:	429c      	cmp	r4, r3
 8007ef2:	d12b      	bne.n	8007f4c <__swbuf_r+0x70>
 8007ef4:	686c      	ldr	r4, [r5, #4]
 8007ef6:	69a3      	ldr	r3, [r4, #24]
 8007ef8:	60a3      	str	r3, [r4, #8]
 8007efa:	89a3      	ldrh	r3, [r4, #12]
 8007efc:	071a      	lsls	r2, r3, #28
 8007efe:	d52f      	bpl.n	8007f60 <__swbuf_r+0x84>
 8007f00:	6923      	ldr	r3, [r4, #16]
 8007f02:	b36b      	cbz	r3, 8007f60 <__swbuf_r+0x84>
 8007f04:	6923      	ldr	r3, [r4, #16]
 8007f06:	6820      	ldr	r0, [r4, #0]
 8007f08:	1ac0      	subs	r0, r0, r3
 8007f0a:	6963      	ldr	r3, [r4, #20]
 8007f0c:	b2f6      	uxtb	r6, r6
 8007f0e:	4283      	cmp	r3, r0
 8007f10:	4637      	mov	r7, r6
 8007f12:	dc04      	bgt.n	8007f1e <__swbuf_r+0x42>
 8007f14:	4621      	mov	r1, r4
 8007f16:	4628      	mov	r0, r5
 8007f18:	f000 f93c 	bl	8008194 <_fflush_r>
 8007f1c:	bb30      	cbnz	r0, 8007f6c <__swbuf_r+0x90>
 8007f1e:	68a3      	ldr	r3, [r4, #8]
 8007f20:	3b01      	subs	r3, #1
 8007f22:	60a3      	str	r3, [r4, #8]
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	6022      	str	r2, [r4, #0]
 8007f2a:	701e      	strb	r6, [r3, #0]
 8007f2c:	6963      	ldr	r3, [r4, #20]
 8007f2e:	3001      	adds	r0, #1
 8007f30:	4283      	cmp	r3, r0
 8007f32:	d004      	beq.n	8007f3e <__swbuf_r+0x62>
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	07db      	lsls	r3, r3, #31
 8007f38:	d506      	bpl.n	8007f48 <__swbuf_r+0x6c>
 8007f3a:	2e0a      	cmp	r6, #10
 8007f3c:	d104      	bne.n	8007f48 <__swbuf_r+0x6c>
 8007f3e:	4621      	mov	r1, r4
 8007f40:	4628      	mov	r0, r5
 8007f42:	f000 f927 	bl	8008194 <_fflush_r>
 8007f46:	b988      	cbnz	r0, 8007f6c <__swbuf_r+0x90>
 8007f48:	4638      	mov	r0, r7
 8007f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f4c:	4b0a      	ldr	r3, [pc, #40]	; (8007f78 <__swbuf_r+0x9c>)
 8007f4e:	429c      	cmp	r4, r3
 8007f50:	d101      	bne.n	8007f56 <__swbuf_r+0x7a>
 8007f52:	68ac      	ldr	r4, [r5, #8]
 8007f54:	e7cf      	b.n	8007ef6 <__swbuf_r+0x1a>
 8007f56:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <__swbuf_r+0xa0>)
 8007f58:	429c      	cmp	r4, r3
 8007f5a:	bf08      	it	eq
 8007f5c:	68ec      	ldreq	r4, [r5, #12]
 8007f5e:	e7ca      	b.n	8007ef6 <__swbuf_r+0x1a>
 8007f60:	4621      	mov	r1, r4
 8007f62:	4628      	mov	r0, r5
 8007f64:	f000 f81a 	bl	8007f9c <__swsetup_r>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d0cb      	beq.n	8007f04 <__swbuf_r+0x28>
 8007f6c:	f04f 37ff 	mov.w	r7, #4294967295
 8007f70:	e7ea      	b.n	8007f48 <__swbuf_r+0x6c>
 8007f72:	bf00      	nop
 8007f74:	08008adc 	.word	0x08008adc
 8007f78:	08008afc 	.word	0x08008afc
 8007f7c:	08008abc 	.word	0x08008abc

08007f80 <__ascii_wctomb>:
 8007f80:	b149      	cbz	r1, 8007f96 <__ascii_wctomb+0x16>
 8007f82:	2aff      	cmp	r2, #255	; 0xff
 8007f84:	bf85      	ittet	hi
 8007f86:	238a      	movhi	r3, #138	; 0x8a
 8007f88:	6003      	strhi	r3, [r0, #0]
 8007f8a:	700a      	strbls	r2, [r1, #0]
 8007f8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f90:	bf98      	it	ls
 8007f92:	2001      	movls	r0, #1
 8007f94:	4770      	bx	lr
 8007f96:	4608      	mov	r0, r1
 8007f98:	4770      	bx	lr
	...

08007f9c <__swsetup_r>:
 8007f9c:	4b32      	ldr	r3, [pc, #200]	; (8008068 <__swsetup_r+0xcc>)
 8007f9e:	b570      	push	{r4, r5, r6, lr}
 8007fa0:	681d      	ldr	r5, [r3, #0]
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	b125      	cbz	r5, 8007fb2 <__swsetup_r+0x16>
 8007fa8:	69ab      	ldr	r3, [r5, #24]
 8007faa:	b913      	cbnz	r3, 8007fb2 <__swsetup_r+0x16>
 8007fac:	4628      	mov	r0, r5
 8007fae:	f000 f985 	bl	80082bc <__sinit>
 8007fb2:	4b2e      	ldr	r3, [pc, #184]	; (800806c <__swsetup_r+0xd0>)
 8007fb4:	429c      	cmp	r4, r3
 8007fb6:	d10f      	bne.n	8007fd8 <__swsetup_r+0x3c>
 8007fb8:	686c      	ldr	r4, [r5, #4]
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fc0:	0719      	lsls	r1, r3, #28
 8007fc2:	d42c      	bmi.n	800801e <__swsetup_r+0x82>
 8007fc4:	06dd      	lsls	r5, r3, #27
 8007fc6:	d411      	bmi.n	8007fec <__swsetup_r+0x50>
 8007fc8:	2309      	movs	r3, #9
 8007fca:	6033      	str	r3, [r6, #0]
 8007fcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fd0:	81a3      	strh	r3, [r4, #12]
 8007fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd6:	e03e      	b.n	8008056 <__swsetup_r+0xba>
 8007fd8:	4b25      	ldr	r3, [pc, #148]	; (8008070 <__swsetup_r+0xd4>)
 8007fda:	429c      	cmp	r4, r3
 8007fdc:	d101      	bne.n	8007fe2 <__swsetup_r+0x46>
 8007fde:	68ac      	ldr	r4, [r5, #8]
 8007fe0:	e7eb      	b.n	8007fba <__swsetup_r+0x1e>
 8007fe2:	4b24      	ldr	r3, [pc, #144]	; (8008074 <__swsetup_r+0xd8>)
 8007fe4:	429c      	cmp	r4, r3
 8007fe6:	bf08      	it	eq
 8007fe8:	68ec      	ldreq	r4, [r5, #12]
 8007fea:	e7e6      	b.n	8007fba <__swsetup_r+0x1e>
 8007fec:	0758      	lsls	r0, r3, #29
 8007fee:	d512      	bpl.n	8008016 <__swsetup_r+0x7a>
 8007ff0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ff2:	b141      	cbz	r1, 8008006 <__swsetup_r+0x6a>
 8007ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ff8:	4299      	cmp	r1, r3
 8007ffa:	d002      	beq.n	8008002 <__swsetup_r+0x66>
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	f7ff fb6f 	bl	80076e0 <_free_r>
 8008002:	2300      	movs	r3, #0
 8008004:	6363      	str	r3, [r4, #52]	; 0x34
 8008006:	89a3      	ldrh	r3, [r4, #12]
 8008008:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800800c:	81a3      	strh	r3, [r4, #12]
 800800e:	2300      	movs	r3, #0
 8008010:	6063      	str	r3, [r4, #4]
 8008012:	6923      	ldr	r3, [r4, #16]
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	89a3      	ldrh	r3, [r4, #12]
 8008018:	f043 0308 	orr.w	r3, r3, #8
 800801c:	81a3      	strh	r3, [r4, #12]
 800801e:	6923      	ldr	r3, [r4, #16]
 8008020:	b94b      	cbnz	r3, 8008036 <__swsetup_r+0x9a>
 8008022:	89a3      	ldrh	r3, [r4, #12]
 8008024:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800802c:	d003      	beq.n	8008036 <__swsetup_r+0x9a>
 800802e:	4621      	mov	r1, r4
 8008030:	4630      	mov	r0, r6
 8008032:	f000 fa07 	bl	8008444 <__smakebuf_r>
 8008036:	89a0      	ldrh	r0, [r4, #12]
 8008038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800803c:	f010 0301 	ands.w	r3, r0, #1
 8008040:	d00a      	beq.n	8008058 <__swsetup_r+0xbc>
 8008042:	2300      	movs	r3, #0
 8008044:	60a3      	str	r3, [r4, #8]
 8008046:	6963      	ldr	r3, [r4, #20]
 8008048:	425b      	negs	r3, r3
 800804a:	61a3      	str	r3, [r4, #24]
 800804c:	6923      	ldr	r3, [r4, #16]
 800804e:	b943      	cbnz	r3, 8008062 <__swsetup_r+0xc6>
 8008050:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008054:	d1ba      	bne.n	8007fcc <__swsetup_r+0x30>
 8008056:	bd70      	pop	{r4, r5, r6, pc}
 8008058:	0781      	lsls	r1, r0, #30
 800805a:	bf58      	it	pl
 800805c:	6963      	ldrpl	r3, [r4, #20]
 800805e:	60a3      	str	r3, [r4, #8]
 8008060:	e7f4      	b.n	800804c <__swsetup_r+0xb0>
 8008062:	2000      	movs	r0, #0
 8008064:	e7f7      	b.n	8008056 <__swsetup_r+0xba>
 8008066:	bf00      	nop
 8008068:	20000010 	.word	0x20000010
 800806c:	08008adc 	.word	0x08008adc
 8008070:	08008afc 	.word	0x08008afc
 8008074:	08008abc 	.word	0x08008abc

08008078 <abort>:
 8008078:	b508      	push	{r3, lr}
 800807a:	2006      	movs	r0, #6
 800807c:	f000 fa52 	bl	8008524 <raise>
 8008080:	2001      	movs	r0, #1
 8008082:	f7f9 fe27 	bl	8001cd4 <_exit>
	...

08008088 <__sflush_r>:
 8008088:	898a      	ldrh	r2, [r1, #12]
 800808a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800808e:	4605      	mov	r5, r0
 8008090:	0710      	lsls	r0, r2, #28
 8008092:	460c      	mov	r4, r1
 8008094:	d458      	bmi.n	8008148 <__sflush_r+0xc0>
 8008096:	684b      	ldr	r3, [r1, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	dc05      	bgt.n	80080a8 <__sflush_r+0x20>
 800809c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800809e:	2b00      	cmp	r3, #0
 80080a0:	dc02      	bgt.n	80080a8 <__sflush_r+0x20>
 80080a2:	2000      	movs	r0, #0
 80080a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080aa:	2e00      	cmp	r6, #0
 80080ac:	d0f9      	beq.n	80080a2 <__sflush_r+0x1a>
 80080ae:	2300      	movs	r3, #0
 80080b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080b4:	682f      	ldr	r7, [r5, #0]
 80080b6:	602b      	str	r3, [r5, #0]
 80080b8:	d032      	beq.n	8008120 <__sflush_r+0x98>
 80080ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080bc:	89a3      	ldrh	r3, [r4, #12]
 80080be:	075a      	lsls	r2, r3, #29
 80080c0:	d505      	bpl.n	80080ce <__sflush_r+0x46>
 80080c2:	6863      	ldr	r3, [r4, #4]
 80080c4:	1ac0      	subs	r0, r0, r3
 80080c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080c8:	b10b      	cbz	r3, 80080ce <__sflush_r+0x46>
 80080ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080cc:	1ac0      	subs	r0, r0, r3
 80080ce:	2300      	movs	r3, #0
 80080d0:	4602      	mov	r2, r0
 80080d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080d4:	6a21      	ldr	r1, [r4, #32]
 80080d6:	4628      	mov	r0, r5
 80080d8:	47b0      	blx	r6
 80080da:	1c43      	adds	r3, r0, #1
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	d106      	bne.n	80080ee <__sflush_r+0x66>
 80080e0:	6829      	ldr	r1, [r5, #0]
 80080e2:	291d      	cmp	r1, #29
 80080e4:	d82c      	bhi.n	8008140 <__sflush_r+0xb8>
 80080e6:	4a2a      	ldr	r2, [pc, #168]	; (8008190 <__sflush_r+0x108>)
 80080e8:	40ca      	lsrs	r2, r1
 80080ea:	07d6      	lsls	r6, r2, #31
 80080ec:	d528      	bpl.n	8008140 <__sflush_r+0xb8>
 80080ee:	2200      	movs	r2, #0
 80080f0:	6062      	str	r2, [r4, #4]
 80080f2:	04d9      	lsls	r1, r3, #19
 80080f4:	6922      	ldr	r2, [r4, #16]
 80080f6:	6022      	str	r2, [r4, #0]
 80080f8:	d504      	bpl.n	8008104 <__sflush_r+0x7c>
 80080fa:	1c42      	adds	r2, r0, #1
 80080fc:	d101      	bne.n	8008102 <__sflush_r+0x7a>
 80080fe:	682b      	ldr	r3, [r5, #0]
 8008100:	b903      	cbnz	r3, 8008104 <__sflush_r+0x7c>
 8008102:	6560      	str	r0, [r4, #84]	; 0x54
 8008104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008106:	602f      	str	r7, [r5, #0]
 8008108:	2900      	cmp	r1, #0
 800810a:	d0ca      	beq.n	80080a2 <__sflush_r+0x1a>
 800810c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008110:	4299      	cmp	r1, r3
 8008112:	d002      	beq.n	800811a <__sflush_r+0x92>
 8008114:	4628      	mov	r0, r5
 8008116:	f7ff fae3 	bl	80076e0 <_free_r>
 800811a:	2000      	movs	r0, #0
 800811c:	6360      	str	r0, [r4, #52]	; 0x34
 800811e:	e7c1      	b.n	80080a4 <__sflush_r+0x1c>
 8008120:	6a21      	ldr	r1, [r4, #32]
 8008122:	2301      	movs	r3, #1
 8008124:	4628      	mov	r0, r5
 8008126:	47b0      	blx	r6
 8008128:	1c41      	adds	r1, r0, #1
 800812a:	d1c7      	bne.n	80080bc <__sflush_r+0x34>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0c4      	beq.n	80080bc <__sflush_r+0x34>
 8008132:	2b1d      	cmp	r3, #29
 8008134:	d001      	beq.n	800813a <__sflush_r+0xb2>
 8008136:	2b16      	cmp	r3, #22
 8008138:	d101      	bne.n	800813e <__sflush_r+0xb6>
 800813a:	602f      	str	r7, [r5, #0]
 800813c:	e7b1      	b.n	80080a2 <__sflush_r+0x1a>
 800813e:	89a3      	ldrh	r3, [r4, #12]
 8008140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008144:	81a3      	strh	r3, [r4, #12]
 8008146:	e7ad      	b.n	80080a4 <__sflush_r+0x1c>
 8008148:	690f      	ldr	r7, [r1, #16]
 800814a:	2f00      	cmp	r7, #0
 800814c:	d0a9      	beq.n	80080a2 <__sflush_r+0x1a>
 800814e:	0793      	lsls	r3, r2, #30
 8008150:	680e      	ldr	r6, [r1, #0]
 8008152:	bf08      	it	eq
 8008154:	694b      	ldreq	r3, [r1, #20]
 8008156:	600f      	str	r7, [r1, #0]
 8008158:	bf18      	it	ne
 800815a:	2300      	movne	r3, #0
 800815c:	eba6 0807 	sub.w	r8, r6, r7
 8008160:	608b      	str	r3, [r1, #8]
 8008162:	f1b8 0f00 	cmp.w	r8, #0
 8008166:	dd9c      	ble.n	80080a2 <__sflush_r+0x1a>
 8008168:	6a21      	ldr	r1, [r4, #32]
 800816a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800816c:	4643      	mov	r3, r8
 800816e:	463a      	mov	r2, r7
 8008170:	4628      	mov	r0, r5
 8008172:	47b0      	blx	r6
 8008174:	2800      	cmp	r0, #0
 8008176:	dc06      	bgt.n	8008186 <__sflush_r+0xfe>
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800817e:	81a3      	strh	r3, [r4, #12]
 8008180:	f04f 30ff 	mov.w	r0, #4294967295
 8008184:	e78e      	b.n	80080a4 <__sflush_r+0x1c>
 8008186:	4407      	add	r7, r0
 8008188:	eba8 0800 	sub.w	r8, r8, r0
 800818c:	e7e9      	b.n	8008162 <__sflush_r+0xda>
 800818e:	bf00      	nop
 8008190:	20400001 	.word	0x20400001

08008194 <_fflush_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	690b      	ldr	r3, [r1, #16]
 8008198:	4605      	mov	r5, r0
 800819a:	460c      	mov	r4, r1
 800819c:	b913      	cbnz	r3, 80081a4 <_fflush_r+0x10>
 800819e:	2500      	movs	r5, #0
 80081a0:	4628      	mov	r0, r5
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	b118      	cbz	r0, 80081ae <_fflush_r+0x1a>
 80081a6:	6983      	ldr	r3, [r0, #24]
 80081a8:	b90b      	cbnz	r3, 80081ae <_fflush_r+0x1a>
 80081aa:	f000 f887 	bl	80082bc <__sinit>
 80081ae:	4b14      	ldr	r3, [pc, #80]	; (8008200 <_fflush_r+0x6c>)
 80081b0:	429c      	cmp	r4, r3
 80081b2:	d11b      	bne.n	80081ec <_fflush_r+0x58>
 80081b4:	686c      	ldr	r4, [r5, #4]
 80081b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d0ef      	beq.n	800819e <_fflush_r+0xa>
 80081be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081c0:	07d0      	lsls	r0, r2, #31
 80081c2:	d404      	bmi.n	80081ce <_fflush_r+0x3a>
 80081c4:	0599      	lsls	r1, r3, #22
 80081c6:	d402      	bmi.n	80081ce <_fflush_r+0x3a>
 80081c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081ca:	f000 f915 	bl	80083f8 <__retarget_lock_acquire_recursive>
 80081ce:	4628      	mov	r0, r5
 80081d0:	4621      	mov	r1, r4
 80081d2:	f7ff ff59 	bl	8008088 <__sflush_r>
 80081d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081d8:	07da      	lsls	r2, r3, #31
 80081da:	4605      	mov	r5, r0
 80081dc:	d4e0      	bmi.n	80081a0 <_fflush_r+0xc>
 80081de:	89a3      	ldrh	r3, [r4, #12]
 80081e0:	059b      	lsls	r3, r3, #22
 80081e2:	d4dd      	bmi.n	80081a0 <_fflush_r+0xc>
 80081e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081e6:	f000 f908 	bl	80083fa <__retarget_lock_release_recursive>
 80081ea:	e7d9      	b.n	80081a0 <_fflush_r+0xc>
 80081ec:	4b05      	ldr	r3, [pc, #20]	; (8008204 <_fflush_r+0x70>)
 80081ee:	429c      	cmp	r4, r3
 80081f0:	d101      	bne.n	80081f6 <_fflush_r+0x62>
 80081f2:	68ac      	ldr	r4, [r5, #8]
 80081f4:	e7df      	b.n	80081b6 <_fflush_r+0x22>
 80081f6:	4b04      	ldr	r3, [pc, #16]	; (8008208 <_fflush_r+0x74>)
 80081f8:	429c      	cmp	r4, r3
 80081fa:	bf08      	it	eq
 80081fc:	68ec      	ldreq	r4, [r5, #12]
 80081fe:	e7da      	b.n	80081b6 <_fflush_r+0x22>
 8008200:	08008adc 	.word	0x08008adc
 8008204:	08008afc 	.word	0x08008afc
 8008208:	08008abc 	.word	0x08008abc

0800820c <std>:
 800820c:	2300      	movs	r3, #0
 800820e:	b510      	push	{r4, lr}
 8008210:	4604      	mov	r4, r0
 8008212:	e9c0 3300 	strd	r3, r3, [r0]
 8008216:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800821a:	6083      	str	r3, [r0, #8]
 800821c:	8181      	strh	r1, [r0, #12]
 800821e:	6643      	str	r3, [r0, #100]	; 0x64
 8008220:	81c2      	strh	r2, [r0, #14]
 8008222:	6183      	str	r3, [r0, #24]
 8008224:	4619      	mov	r1, r3
 8008226:	2208      	movs	r2, #8
 8008228:	305c      	adds	r0, #92	; 0x5c
 800822a:	f7fd fb87 	bl	800593c <memset>
 800822e:	4b05      	ldr	r3, [pc, #20]	; (8008244 <std+0x38>)
 8008230:	6263      	str	r3, [r4, #36]	; 0x24
 8008232:	4b05      	ldr	r3, [pc, #20]	; (8008248 <std+0x3c>)
 8008234:	62a3      	str	r3, [r4, #40]	; 0x28
 8008236:	4b05      	ldr	r3, [pc, #20]	; (800824c <std+0x40>)
 8008238:	62e3      	str	r3, [r4, #44]	; 0x2c
 800823a:	4b05      	ldr	r3, [pc, #20]	; (8008250 <std+0x44>)
 800823c:	6224      	str	r4, [r4, #32]
 800823e:	6323      	str	r3, [r4, #48]	; 0x30
 8008240:	bd10      	pop	{r4, pc}
 8008242:	bf00      	nop
 8008244:	0800855d 	.word	0x0800855d
 8008248:	0800857f 	.word	0x0800857f
 800824c:	080085b7 	.word	0x080085b7
 8008250:	080085db 	.word	0x080085db

08008254 <_cleanup_r>:
 8008254:	4901      	ldr	r1, [pc, #4]	; (800825c <_cleanup_r+0x8>)
 8008256:	f000 b8af 	b.w	80083b8 <_fwalk_reent>
 800825a:	bf00      	nop
 800825c:	08008195 	.word	0x08008195

08008260 <__sfmoreglue>:
 8008260:	b570      	push	{r4, r5, r6, lr}
 8008262:	1e4a      	subs	r2, r1, #1
 8008264:	2568      	movs	r5, #104	; 0x68
 8008266:	4355      	muls	r5, r2
 8008268:	460e      	mov	r6, r1
 800826a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800826e:	f7ff fa87 	bl	8007780 <_malloc_r>
 8008272:	4604      	mov	r4, r0
 8008274:	b140      	cbz	r0, 8008288 <__sfmoreglue+0x28>
 8008276:	2100      	movs	r1, #0
 8008278:	e9c0 1600 	strd	r1, r6, [r0]
 800827c:	300c      	adds	r0, #12
 800827e:	60a0      	str	r0, [r4, #8]
 8008280:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008284:	f7fd fb5a 	bl	800593c <memset>
 8008288:	4620      	mov	r0, r4
 800828a:	bd70      	pop	{r4, r5, r6, pc}

0800828c <__sfp_lock_acquire>:
 800828c:	4801      	ldr	r0, [pc, #4]	; (8008294 <__sfp_lock_acquire+0x8>)
 800828e:	f000 b8b3 	b.w	80083f8 <__retarget_lock_acquire_recursive>
 8008292:	bf00      	nop
 8008294:	20000430 	.word	0x20000430

08008298 <__sfp_lock_release>:
 8008298:	4801      	ldr	r0, [pc, #4]	; (80082a0 <__sfp_lock_release+0x8>)
 800829a:	f000 b8ae 	b.w	80083fa <__retarget_lock_release_recursive>
 800829e:	bf00      	nop
 80082a0:	20000430 	.word	0x20000430

080082a4 <__sinit_lock_acquire>:
 80082a4:	4801      	ldr	r0, [pc, #4]	; (80082ac <__sinit_lock_acquire+0x8>)
 80082a6:	f000 b8a7 	b.w	80083f8 <__retarget_lock_acquire_recursive>
 80082aa:	bf00      	nop
 80082ac:	2000042b 	.word	0x2000042b

080082b0 <__sinit_lock_release>:
 80082b0:	4801      	ldr	r0, [pc, #4]	; (80082b8 <__sinit_lock_release+0x8>)
 80082b2:	f000 b8a2 	b.w	80083fa <__retarget_lock_release_recursive>
 80082b6:	bf00      	nop
 80082b8:	2000042b 	.word	0x2000042b

080082bc <__sinit>:
 80082bc:	b510      	push	{r4, lr}
 80082be:	4604      	mov	r4, r0
 80082c0:	f7ff fff0 	bl	80082a4 <__sinit_lock_acquire>
 80082c4:	69a3      	ldr	r3, [r4, #24]
 80082c6:	b11b      	cbz	r3, 80082d0 <__sinit+0x14>
 80082c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082cc:	f7ff bff0 	b.w	80082b0 <__sinit_lock_release>
 80082d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082d4:	6523      	str	r3, [r4, #80]	; 0x50
 80082d6:	4b13      	ldr	r3, [pc, #76]	; (8008324 <__sinit+0x68>)
 80082d8:	4a13      	ldr	r2, [pc, #76]	; (8008328 <__sinit+0x6c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80082de:	42a3      	cmp	r3, r4
 80082e0:	bf04      	itt	eq
 80082e2:	2301      	moveq	r3, #1
 80082e4:	61a3      	streq	r3, [r4, #24]
 80082e6:	4620      	mov	r0, r4
 80082e8:	f000 f820 	bl	800832c <__sfp>
 80082ec:	6060      	str	r0, [r4, #4]
 80082ee:	4620      	mov	r0, r4
 80082f0:	f000 f81c 	bl	800832c <__sfp>
 80082f4:	60a0      	str	r0, [r4, #8]
 80082f6:	4620      	mov	r0, r4
 80082f8:	f000 f818 	bl	800832c <__sfp>
 80082fc:	2200      	movs	r2, #0
 80082fe:	60e0      	str	r0, [r4, #12]
 8008300:	2104      	movs	r1, #4
 8008302:	6860      	ldr	r0, [r4, #4]
 8008304:	f7ff ff82 	bl	800820c <std>
 8008308:	68a0      	ldr	r0, [r4, #8]
 800830a:	2201      	movs	r2, #1
 800830c:	2109      	movs	r1, #9
 800830e:	f7ff ff7d 	bl	800820c <std>
 8008312:	68e0      	ldr	r0, [r4, #12]
 8008314:	2202      	movs	r2, #2
 8008316:	2112      	movs	r1, #18
 8008318:	f7ff ff78 	bl	800820c <std>
 800831c:	2301      	movs	r3, #1
 800831e:	61a3      	str	r3, [r4, #24]
 8008320:	e7d2      	b.n	80082c8 <__sinit+0xc>
 8008322:	bf00      	nop
 8008324:	08008738 	.word	0x08008738
 8008328:	08008255 	.word	0x08008255

0800832c <__sfp>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	4607      	mov	r7, r0
 8008330:	f7ff ffac 	bl	800828c <__sfp_lock_acquire>
 8008334:	4b1e      	ldr	r3, [pc, #120]	; (80083b0 <__sfp+0x84>)
 8008336:	681e      	ldr	r6, [r3, #0]
 8008338:	69b3      	ldr	r3, [r6, #24]
 800833a:	b913      	cbnz	r3, 8008342 <__sfp+0x16>
 800833c:	4630      	mov	r0, r6
 800833e:	f7ff ffbd 	bl	80082bc <__sinit>
 8008342:	3648      	adds	r6, #72	; 0x48
 8008344:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008348:	3b01      	subs	r3, #1
 800834a:	d503      	bpl.n	8008354 <__sfp+0x28>
 800834c:	6833      	ldr	r3, [r6, #0]
 800834e:	b30b      	cbz	r3, 8008394 <__sfp+0x68>
 8008350:	6836      	ldr	r6, [r6, #0]
 8008352:	e7f7      	b.n	8008344 <__sfp+0x18>
 8008354:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008358:	b9d5      	cbnz	r5, 8008390 <__sfp+0x64>
 800835a:	4b16      	ldr	r3, [pc, #88]	; (80083b4 <__sfp+0x88>)
 800835c:	60e3      	str	r3, [r4, #12]
 800835e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008362:	6665      	str	r5, [r4, #100]	; 0x64
 8008364:	f000 f847 	bl	80083f6 <__retarget_lock_init_recursive>
 8008368:	f7ff ff96 	bl	8008298 <__sfp_lock_release>
 800836c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008370:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008374:	6025      	str	r5, [r4, #0]
 8008376:	61a5      	str	r5, [r4, #24]
 8008378:	2208      	movs	r2, #8
 800837a:	4629      	mov	r1, r5
 800837c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008380:	f7fd fadc 	bl	800593c <memset>
 8008384:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008388:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800838c:	4620      	mov	r0, r4
 800838e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008390:	3468      	adds	r4, #104	; 0x68
 8008392:	e7d9      	b.n	8008348 <__sfp+0x1c>
 8008394:	2104      	movs	r1, #4
 8008396:	4638      	mov	r0, r7
 8008398:	f7ff ff62 	bl	8008260 <__sfmoreglue>
 800839c:	4604      	mov	r4, r0
 800839e:	6030      	str	r0, [r6, #0]
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d1d5      	bne.n	8008350 <__sfp+0x24>
 80083a4:	f7ff ff78 	bl	8008298 <__sfp_lock_release>
 80083a8:	230c      	movs	r3, #12
 80083aa:	603b      	str	r3, [r7, #0]
 80083ac:	e7ee      	b.n	800838c <__sfp+0x60>
 80083ae:	bf00      	nop
 80083b0:	08008738 	.word	0x08008738
 80083b4:	ffff0001 	.word	0xffff0001

080083b8 <_fwalk_reent>:
 80083b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083bc:	4606      	mov	r6, r0
 80083be:	4688      	mov	r8, r1
 80083c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083c4:	2700      	movs	r7, #0
 80083c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083ca:	f1b9 0901 	subs.w	r9, r9, #1
 80083ce:	d505      	bpl.n	80083dc <_fwalk_reent+0x24>
 80083d0:	6824      	ldr	r4, [r4, #0]
 80083d2:	2c00      	cmp	r4, #0
 80083d4:	d1f7      	bne.n	80083c6 <_fwalk_reent+0xe>
 80083d6:	4638      	mov	r0, r7
 80083d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083dc:	89ab      	ldrh	r3, [r5, #12]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d907      	bls.n	80083f2 <_fwalk_reent+0x3a>
 80083e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083e6:	3301      	adds	r3, #1
 80083e8:	d003      	beq.n	80083f2 <_fwalk_reent+0x3a>
 80083ea:	4629      	mov	r1, r5
 80083ec:	4630      	mov	r0, r6
 80083ee:	47c0      	blx	r8
 80083f0:	4307      	orrs	r7, r0
 80083f2:	3568      	adds	r5, #104	; 0x68
 80083f4:	e7e9      	b.n	80083ca <_fwalk_reent+0x12>

080083f6 <__retarget_lock_init_recursive>:
 80083f6:	4770      	bx	lr

080083f8 <__retarget_lock_acquire_recursive>:
 80083f8:	4770      	bx	lr

080083fa <__retarget_lock_release_recursive>:
 80083fa:	4770      	bx	lr

080083fc <__swhatbuf_r>:
 80083fc:	b570      	push	{r4, r5, r6, lr}
 80083fe:	460e      	mov	r6, r1
 8008400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008404:	2900      	cmp	r1, #0
 8008406:	b096      	sub	sp, #88	; 0x58
 8008408:	4614      	mov	r4, r2
 800840a:	461d      	mov	r5, r3
 800840c:	da07      	bge.n	800841e <__swhatbuf_r+0x22>
 800840e:	2300      	movs	r3, #0
 8008410:	602b      	str	r3, [r5, #0]
 8008412:	89b3      	ldrh	r3, [r6, #12]
 8008414:	061a      	lsls	r2, r3, #24
 8008416:	d410      	bmi.n	800843a <__swhatbuf_r+0x3e>
 8008418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800841c:	e00e      	b.n	800843c <__swhatbuf_r+0x40>
 800841e:	466a      	mov	r2, sp
 8008420:	f000 f902 	bl	8008628 <_fstat_r>
 8008424:	2800      	cmp	r0, #0
 8008426:	dbf2      	blt.n	800840e <__swhatbuf_r+0x12>
 8008428:	9a01      	ldr	r2, [sp, #4]
 800842a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800842e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008432:	425a      	negs	r2, r3
 8008434:	415a      	adcs	r2, r3
 8008436:	602a      	str	r2, [r5, #0]
 8008438:	e7ee      	b.n	8008418 <__swhatbuf_r+0x1c>
 800843a:	2340      	movs	r3, #64	; 0x40
 800843c:	2000      	movs	r0, #0
 800843e:	6023      	str	r3, [r4, #0]
 8008440:	b016      	add	sp, #88	; 0x58
 8008442:	bd70      	pop	{r4, r5, r6, pc}

08008444 <__smakebuf_r>:
 8008444:	898b      	ldrh	r3, [r1, #12]
 8008446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008448:	079d      	lsls	r5, r3, #30
 800844a:	4606      	mov	r6, r0
 800844c:	460c      	mov	r4, r1
 800844e:	d507      	bpl.n	8008460 <__smakebuf_r+0x1c>
 8008450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	6123      	str	r3, [r4, #16]
 8008458:	2301      	movs	r3, #1
 800845a:	6163      	str	r3, [r4, #20]
 800845c:	b002      	add	sp, #8
 800845e:	bd70      	pop	{r4, r5, r6, pc}
 8008460:	ab01      	add	r3, sp, #4
 8008462:	466a      	mov	r2, sp
 8008464:	f7ff ffca 	bl	80083fc <__swhatbuf_r>
 8008468:	9900      	ldr	r1, [sp, #0]
 800846a:	4605      	mov	r5, r0
 800846c:	4630      	mov	r0, r6
 800846e:	f7ff f987 	bl	8007780 <_malloc_r>
 8008472:	b948      	cbnz	r0, 8008488 <__smakebuf_r+0x44>
 8008474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008478:	059a      	lsls	r2, r3, #22
 800847a:	d4ef      	bmi.n	800845c <__smakebuf_r+0x18>
 800847c:	f023 0303 	bic.w	r3, r3, #3
 8008480:	f043 0302 	orr.w	r3, r3, #2
 8008484:	81a3      	strh	r3, [r4, #12]
 8008486:	e7e3      	b.n	8008450 <__smakebuf_r+0xc>
 8008488:	4b0d      	ldr	r3, [pc, #52]	; (80084c0 <__smakebuf_r+0x7c>)
 800848a:	62b3      	str	r3, [r6, #40]	; 0x28
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	6020      	str	r0, [r4, #0]
 8008490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008494:	81a3      	strh	r3, [r4, #12]
 8008496:	9b00      	ldr	r3, [sp, #0]
 8008498:	6163      	str	r3, [r4, #20]
 800849a:	9b01      	ldr	r3, [sp, #4]
 800849c:	6120      	str	r0, [r4, #16]
 800849e:	b15b      	cbz	r3, 80084b8 <__smakebuf_r+0x74>
 80084a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084a4:	4630      	mov	r0, r6
 80084a6:	f000 f8d1 	bl	800864c <_isatty_r>
 80084aa:	b128      	cbz	r0, 80084b8 <__smakebuf_r+0x74>
 80084ac:	89a3      	ldrh	r3, [r4, #12]
 80084ae:	f023 0303 	bic.w	r3, r3, #3
 80084b2:	f043 0301 	orr.w	r3, r3, #1
 80084b6:	81a3      	strh	r3, [r4, #12]
 80084b8:	89a0      	ldrh	r0, [r4, #12]
 80084ba:	4305      	orrs	r5, r0
 80084bc:	81a5      	strh	r5, [r4, #12]
 80084be:	e7cd      	b.n	800845c <__smakebuf_r+0x18>
 80084c0:	08008255 	.word	0x08008255

080084c4 <_malloc_usable_size_r>:
 80084c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084c8:	1f18      	subs	r0, r3, #4
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	bfbc      	itt	lt
 80084ce:	580b      	ldrlt	r3, [r1, r0]
 80084d0:	18c0      	addlt	r0, r0, r3
 80084d2:	4770      	bx	lr

080084d4 <_raise_r>:
 80084d4:	291f      	cmp	r1, #31
 80084d6:	b538      	push	{r3, r4, r5, lr}
 80084d8:	4604      	mov	r4, r0
 80084da:	460d      	mov	r5, r1
 80084dc:	d904      	bls.n	80084e8 <_raise_r+0x14>
 80084de:	2316      	movs	r3, #22
 80084e0:	6003      	str	r3, [r0, #0]
 80084e2:	f04f 30ff 	mov.w	r0, #4294967295
 80084e6:	bd38      	pop	{r3, r4, r5, pc}
 80084e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80084ea:	b112      	cbz	r2, 80084f2 <_raise_r+0x1e>
 80084ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084f0:	b94b      	cbnz	r3, 8008506 <_raise_r+0x32>
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 f830 	bl	8008558 <_getpid_r>
 80084f8:	462a      	mov	r2, r5
 80084fa:	4601      	mov	r1, r0
 80084fc:	4620      	mov	r0, r4
 80084fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008502:	f000 b817 	b.w	8008534 <_kill_r>
 8008506:	2b01      	cmp	r3, #1
 8008508:	d00a      	beq.n	8008520 <_raise_r+0x4c>
 800850a:	1c59      	adds	r1, r3, #1
 800850c:	d103      	bne.n	8008516 <_raise_r+0x42>
 800850e:	2316      	movs	r3, #22
 8008510:	6003      	str	r3, [r0, #0]
 8008512:	2001      	movs	r0, #1
 8008514:	e7e7      	b.n	80084e6 <_raise_r+0x12>
 8008516:	2400      	movs	r4, #0
 8008518:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800851c:	4628      	mov	r0, r5
 800851e:	4798      	blx	r3
 8008520:	2000      	movs	r0, #0
 8008522:	e7e0      	b.n	80084e6 <_raise_r+0x12>

08008524 <raise>:
 8008524:	4b02      	ldr	r3, [pc, #8]	; (8008530 <raise+0xc>)
 8008526:	4601      	mov	r1, r0
 8008528:	6818      	ldr	r0, [r3, #0]
 800852a:	f7ff bfd3 	b.w	80084d4 <_raise_r>
 800852e:	bf00      	nop
 8008530:	20000010 	.word	0x20000010

08008534 <_kill_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4d07      	ldr	r5, [pc, #28]	; (8008554 <_kill_r+0x20>)
 8008538:	2300      	movs	r3, #0
 800853a:	4604      	mov	r4, r0
 800853c:	4608      	mov	r0, r1
 800853e:	4611      	mov	r1, r2
 8008540:	602b      	str	r3, [r5, #0]
 8008542:	f7f9 fbb7 	bl	8001cb4 <_kill>
 8008546:	1c43      	adds	r3, r0, #1
 8008548:	d102      	bne.n	8008550 <_kill_r+0x1c>
 800854a:	682b      	ldr	r3, [r5, #0]
 800854c:	b103      	cbz	r3, 8008550 <_kill_r+0x1c>
 800854e:	6023      	str	r3, [r4, #0]
 8008550:	bd38      	pop	{r3, r4, r5, pc}
 8008552:	bf00      	nop
 8008554:	20000424 	.word	0x20000424

08008558 <_getpid_r>:
 8008558:	f7f9 bba4 	b.w	8001ca4 <_getpid>

0800855c <__sread>:
 800855c:	b510      	push	{r4, lr}
 800855e:	460c      	mov	r4, r1
 8008560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008564:	f000 f894 	bl	8008690 <_read_r>
 8008568:	2800      	cmp	r0, #0
 800856a:	bfab      	itete	ge
 800856c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800856e:	89a3      	ldrhlt	r3, [r4, #12]
 8008570:	181b      	addge	r3, r3, r0
 8008572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008576:	bfac      	ite	ge
 8008578:	6563      	strge	r3, [r4, #84]	; 0x54
 800857a:	81a3      	strhlt	r3, [r4, #12]
 800857c:	bd10      	pop	{r4, pc}

0800857e <__swrite>:
 800857e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008582:	461f      	mov	r7, r3
 8008584:	898b      	ldrh	r3, [r1, #12]
 8008586:	05db      	lsls	r3, r3, #23
 8008588:	4605      	mov	r5, r0
 800858a:	460c      	mov	r4, r1
 800858c:	4616      	mov	r6, r2
 800858e:	d505      	bpl.n	800859c <__swrite+0x1e>
 8008590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008594:	2302      	movs	r3, #2
 8008596:	2200      	movs	r2, #0
 8008598:	f000 f868 	bl	800866c <_lseek_r>
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085a6:	81a3      	strh	r3, [r4, #12]
 80085a8:	4632      	mov	r2, r6
 80085aa:	463b      	mov	r3, r7
 80085ac:	4628      	mov	r0, r5
 80085ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085b2:	f000 b817 	b.w	80085e4 <_write_r>

080085b6 <__sseek>:
 80085b6:	b510      	push	{r4, lr}
 80085b8:	460c      	mov	r4, r1
 80085ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085be:	f000 f855 	bl	800866c <_lseek_r>
 80085c2:	1c43      	adds	r3, r0, #1
 80085c4:	89a3      	ldrh	r3, [r4, #12]
 80085c6:	bf15      	itete	ne
 80085c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80085ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085d2:	81a3      	strheq	r3, [r4, #12]
 80085d4:	bf18      	it	ne
 80085d6:	81a3      	strhne	r3, [r4, #12]
 80085d8:	bd10      	pop	{r4, pc}

080085da <__sclose>:
 80085da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085de:	f000 b813 	b.w	8008608 <_close_r>
	...

080085e4 <_write_r>:
 80085e4:	b538      	push	{r3, r4, r5, lr}
 80085e6:	4d07      	ldr	r5, [pc, #28]	; (8008604 <_write_r+0x20>)
 80085e8:	4604      	mov	r4, r0
 80085ea:	4608      	mov	r0, r1
 80085ec:	4611      	mov	r1, r2
 80085ee:	2200      	movs	r2, #0
 80085f0:	602a      	str	r2, [r5, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	f7f9 fb95 	bl	8001d22 <_write>
 80085f8:	1c43      	adds	r3, r0, #1
 80085fa:	d102      	bne.n	8008602 <_write_r+0x1e>
 80085fc:	682b      	ldr	r3, [r5, #0]
 80085fe:	b103      	cbz	r3, 8008602 <_write_r+0x1e>
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	bd38      	pop	{r3, r4, r5, pc}
 8008604:	20000424 	.word	0x20000424

08008608 <_close_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4d06      	ldr	r5, [pc, #24]	; (8008624 <_close_r+0x1c>)
 800860c:	2300      	movs	r3, #0
 800860e:	4604      	mov	r4, r0
 8008610:	4608      	mov	r0, r1
 8008612:	602b      	str	r3, [r5, #0]
 8008614:	f7f9 fba1 	bl	8001d5a <_close>
 8008618:	1c43      	adds	r3, r0, #1
 800861a:	d102      	bne.n	8008622 <_close_r+0x1a>
 800861c:	682b      	ldr	r3, [r5, #0]
 800861e:	b103      	cbz	r3, 8008622 <_close_r+0x1a>
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	bd38      	pop	{r3, r4, r5, pc}
 8008624:	20000424 	.word	0x20000424

08008628 <_fstat_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	4d07      	ldr	r5, [pc, #28]	; (8008648 <_fstat_r+0x20>)
 800862c:	2300      	movs	r3, #0
 800862e:	4604      	mov	r4, r0
 8008630:	4608      	mov	r0, r1
 8008632:	4611      	mov	r1, r2
 8008634:	602b      	str	r3, [r5, #0]
 8008636:	f7f9 fb9c 	bl	8001d72 <_fstat>
 800863a:	1c43      	adds	r3, r0, #1
 800863c:	d102      	bne.n	8008644 <_fstat_r+0x1c>
 800863e:	682b      	ldr	r3, [r5, #0]
 8008640:	b103      	cbz	r3, 8008644 <_fstat_r+0x1c>
 8008642:	6023      	str	r3, [r4, #0]
 8008644:	bd38      	pop	{r3, r4, r5, pc}
 8008646:	bf00      	nop
 8008648:	20000424 	.word	0x20000424

0800864c <_isatty_r>:
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	4d06      	ldr	r5, [pc, #24]	; (8008668 <_isatty_r+0x1c>)
 8008650:	2300      	movs	r3, #0
 8008652:	4604      	mov	r4, r0
 8008654:	4608      	mov	r0, r1
 8008656:	602b      	str	r3, [r5, #0]
 8008658:	f7f9 fb9b 	bl	8001d92 <_isatty>
 800865c:	1c43      	adds	r3, r0, #1
 800865e:	d102      	bne.n	8008666 <_isatty_r+0x1a>
 8008660:	682b      	ldr	r3, [r5, #0]
 8008662:	b103      	cbz	r3, 8008666 <_isatty_r+0x1a>
 8008664:	6023      	str	r3, [r4, #0]
 8008666:	bd38      	pop	{r3, r4, r5, pc}
 8008668:	20000424 	.word	0x20000424

0800866c <_lseek_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4d07      	ldr	r5, [pc, #28]	; (800868c <_lseek_r+0x20>)
 8008670:	4604      	mov	r4, r0
 8008672:	4608      	mov	r0, r1
 8008674:	4611      	mov	r1, r2
 8008676:	2200      	movs	r2, #0
 8008678:	602a      	str	r2, [r5, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	f7f9 fb94 	bl	8001da8 <_lseek>
 8008680:	1c43      	adds	r3, r0, #1
 8008682:	d102      	bne.n	800868a <_lseek_r+0x1e>
 8008684:	682b      	ldr	r3, [r5, #0]
 8008686:	b103      	cbz	r3, 800868a <_lseek_r+0x1e>
 8008688:	6023      	str	r3, [r4, #0]
 800868a:	bd38      	pop	{r3, r4, r5, pc}
 800868c:	20000424 	.word	0x20000424

08008690 <_read_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4d07      	ldr	r5, [pc, #28]	; (80086b0 <_read_r+0x20>)
 8008694:	4604      	mov	r4, r0
 8008696:	4608      	mov	r0, r1
 8008698:	4611      	mov	r1, r2
 800869a:	2200      	movs	r2, #0
 800869c:	602a      	str	r2, [r5, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	f7f9 fb22 	bl	8001ce8 <_read>
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	d102      	bne.n	80086ae <_read_r+0x1e>
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	b103      	cbz	r3, 80086ae <_read_r+0x1e>
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	bd38      	pop	{r3, r4, r5, pc}
 80086b0:	20000424 	.word	0x20000424

080086b4 <_init>:
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	bf00      	nop
 80086b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ba:	bc08      	pop	{r3}
 80086bc:	469e      	mov	lr, r3
 80086be:	4770      	bx	lr

080086c0 <_fini>:
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c2:	bf00      	nop
 80086c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c6:	bc08      	pop	{r3}
 80086c8:	469e      	mov	lr, r3
 80086ca:	4770      	bx	lr
